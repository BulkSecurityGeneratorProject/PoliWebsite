{"version":3,"sources":["app/app.module.js","app/services/user/user.service.js","app/services/profiles/profile.service.js","app/services/profiles/page-ribbon.directive.js","app/services/auth/register.service.js","app/services/auth/principal.service.js","app/services/auth/password-reset-init.service.js","app/services/auth/password-reset-finish.service.js","app/services/auth/password.service.js","app/services/auth/has-authority.directive.js","app/services/auth/has-any-authority.directive.js","app/services/auth/auth.service.js","app/services/auth/auth.jwt.service.js","app/services/auth/activate.service.js","app/services/auth/account.service.js","app/layouts/navbar/navbar.controller.js","app/layouts/error/error.state.js","app/home/home.state.js","app/home/home.controller.js","app/entities/staff/staff-dialog.controller.js","app/entities/staff/staff-detail.controller.js","app/entities/staff/staff-delete-dialog.controller.js","app/entities/staff/staff.state.js","app/entities/staff/staff.service.js","app/entities/staff/staff.controller.js","app/entities/season/season-dialog.controller.js","app/entities/season/season-detail.controller.js","app/entities/season/season-delete-dialog.controller.js","app/entities/season/season.state.js","app/entities/season/season.service.js","app/entities/season/season.controller.js","app/entities/position/position-dialog.controller.js","app/entities/position/position-detail.controller.js","app/entities/position/position-delete-dialog.controller.js","app/entities/position/position.state.js","app/entities/position/position.service.js","app/entities/position/position.controller.js","app/entities/player/player-dialog.controller.js","app/entities/player/player-detail.controller.js","app/entities/player/player-delete-dialog.controller.js","app/entities/player/player.state.js","app/entities/player/player.service.js","app/entities/player/player.controller.js","app/entities/partner/partner-dialog.controller.js","app/entities/partner/partner-detail.controller.js","app/entities/partner/partner-delete-dialog.controller.js","app/entities/partner/partner.state.js","app/entities/partner/partner.service.js","app/entities/partner/partner.controller.js","app/entities/news/news-dialog.controller.js","app/entities/news/news-detail.controller.js","app/entities/news/news-delete-dialog.controller.js","app/entities/news/news.state.js","app/entities/news/news.service.js","app/entities/news/news.controller.js","app/entities/match/match-dialog.controller.js","app/entities/match/match-detail.controller.js","app/entities/match/match-delete-dialog.controller.js","app/entities/match/match.state.js","app/entities/match/match.service.js","app/entities/match/match.controller.js","app/entities/league-table/league-table-dialog.controller.js","app/entities/league-table/league-table-detail.controller.js","app/entities/league-table/league-table-delete-dialog.controller.js","app/entities/league-table/league-table.state.js","app/entities/league-table/league-table.service.js","app/entities/league-table/league-table.controller.js","app/entities/job/job-dialog.controller.js","app/entities/job/job-detail.controller.js","app/entities/job/job-delete-dialog.controller.js","app/entities/job/job.state.js","app/entities/job/job.service.js","app/entities/job/job.controller.js","app/entities/entity.state.js","app/entities/competition/competition-dialog.controller.js","app/entities/competition/competition-detail.controller.js","app/entities/competition/competition-delete-dialog.controller.js","app/entities/competition/competition.state.js","app/entities/competition/competition.service.js","app/entities/competition/competition.controller.js","app/components/util/truncate-words.filter.js","app/components/util/truncate-characters.filter.js","app/components/util/sort-by.directive.js","app/components/util/sort.directive.js","app/components/util/parse-links.service.js","app/components/util/pagination-util.service.js","app/components/util/jhi-item-count.directive.js","app/components/util/date-util.service.js","app/components/util/data-util.service.js","app/components/util/capitalize.filter.js","app/components/util/base64.service.js","app/components/login/login.service.js","app/components/login/login.controller.js","app/components/form/show-validation.directive.js","app/components/form/pagination.constants.js","app/components/form/minbytes.directive.js","app/components/form/maxbytes.directive.js","app/components/alert/alert-error.directive.js","app/components/alert/alert.service.js","app/components/alert/alert.directive.js","app/clubTeam/clubTeam.state.js","app/clubTeam/clubStaff/clubStaff.state.js","app/clubTeam/clubStaff/clubStaff.service.js","app/clubTeam/clubStaff/clubStaff.controller.js","app/clubTeam/clubPlayers/clubPlayers.state.js","app/clubTeam/clubPlayers/clubPlayers.service.js","app/clubTeam/clubPlayers/clubPlayers.controller.js","app/clubSchedule/clubSchedule.state.js","app/clubSchedule/clubRanking/clubRanking.state.js","app/clubSchedule/clubRanking/clubRanking.service.js","app/clubSchedule/clubRanking/clubRanking.controller.js","app/clubSchedule/clubMatches/clubMatches.state.js","app/clubSchedule/clubMatches/clubMatches.service.js","app/clubSchedule/clubMatches/clubMatches.controller.js","app/clubPartners/clubPartners.state.js","app/clubPartners/clubPartners.controller.js","app/clubPartners/clubPartners.service.js","app/clubNews/clubNews.state.js","app/clubNews/clubNews.service.js","app/clubNews/clubNews.controller.js","app/clubNews/clubNews-detail.controller.js","app/clubContact/clubContact.state.js","app/clubContact/clubContact.controller.js","app/club/clubStadium/clubStadium.state.js","app/club/clubStadium/clubStadium.controller.js","app/club/clubHistory/clubHistory.state.js","app/club/clubHistory/clubHistory.controller.js","app/club/club.state.js","app/blocks/interceptor/notification.interceptor.js","app/blocks/interceptor/errorhandler.interceptor.js","app/blocks/interceptor/auth-expired.interceptor.js","app/blocks/interceptor/auth.interceptor.js","app/blocks/handlers/state.handler.js","app/blocks/config/uib-pagination.config.js","app/blocks/config/uib-pager.config.js","app/blocks/config/localstorage.config.js","app/blocks/config/http.config.js","app/blocks/config/compile.config.js","app/blocks/config/alert.config.js","app/app.state.js","app/app.constants.js","app/admin/user-management/user-management-dialog.controller.js","app/admin/user-management/user-management-detail.controller.js","app/admin/user-management/user-management-delete-dialog.controller.js","app/admin/user-management/user-management.state.js","app/admin/user-management/user-management.controller.js","app/admin/metrics/metrics.state.js","app/admin/metrics/metrics.service.js","app/admin/metrics/metrics.modal.controller.js","app/admin/metrics/metrics.controller.js","app/admin/logs/logs.state.js","app/admin/logs/logs.service.js","app/admin/logs/logs.controller.js","app/admin/health/health.state.js","app/admin/health/health.service.js","app/admin/health/health.modal.controller.js","app/admin/health/health.controller.js","app/admin/docs/docs.state.js","app/admin/configuration/configuration.state.js","app/admin/configuration/configuration.service.js","app/admin/configuration/configuration.controller.js","app/admin/audits/audits.state.js","app/admin/audits/audits.service.js","app/admin/audits/audits.controller.js","app/admin/admin.state.js","app/account/social/social-register.controller.js","app/account/social/social-auth.controller.js","app/account/social/social.state.js","app/account/social/social.service.js","app/account/social/directive/social.directive.js","app/account/settings/settings.state.js","app/account/settings/settings.controller.js","app/account/reset/request/reset.request.state.js","app/account/reset/request/reset.request.controller.js","app/account/reset/finish/reset.finish.state.js","app/account/reset/finish/reset.finish.controller.js","app/account/register/register.state.js","app/account/register/register.controller.js","app/account/password/password-strength-bar.directive.js","app/account/password/password.state.js","app/account/password/password.controller.js","app/account/activate/activate.state.js","app/account/activate/activate.controller.js","app/account/account.state.js","app/app.js"],"names":["run","stateHandler","initialize","angular","module","$inject","User","$resource","service","query","method","isArray","get","transformResponse","data","fromJson","save","update","delete","factory","ProfileService","$http","getProfileInfo","isUndefined","dataPromise","then","result","activeProfiles","response","ribbonEnv","inProduction","indexOf","swaggerEnabled","pageRibbon","$rootScope","linkFunc","scope","element","attrs","addClass","removeClass","directive","replace","restrict","template","link","Register","Principal","$q","Account","authenticate","identity","_identity","_authenticated","hasAnyAuthority","authorities","i","length","hasAuthority","authority","this","_id","when","force","getAccountThen","account","deferred","resolve","getAccountCatch","defer","undefined","isDefined","promise","$promise","catch","isAuthenticated","isIdentityResolved","PasswordResetInit","PasswordResetFinish","Password","setVisible","setHidden","defineVisibility","reset","$watch","split","Auth","$state","$sessionStorage","AuthServerProvider","LoginService","Activate","activateAccount","key","callback","cb","noop","err","bind","authorize","authThen","toState","parent","name","go","fromState","getPreviousState","previousState","resetPreviousState","params","storePreviousState","toStateParams","open","authReturn","changePassword","newPassword","createAccount","logout","login","credentials","loginThen","reject","loginWithToken","jwt","rememberMe","resetPasswordFinish","keyAndPassword","resetPasswordInit","mail","updateAccount","previousStateName","previousStateParams","$localStorage","getToken","authenticationToken","authenticateSuccess","status","headers","bearerToken","slice","storeAuthenticationToken","username","password","post","success","interceptor","NavbarController","collapseNavbar","toggleNavbar","vm","isNavbarCollapsed","controller","stateConfig","$stateProvider","state","url","pageTitle","views","content@","templateUrl","config","controllerAs","HomeController","$scope","DataUtils","News","Match","Partner","LeagueTable","ParseLinks","AlertService","loadLast3News","onSuccess","news","$","document","ready","bxSlider","auto","autoControls","pause","onError","error","message","size","sort","loadLast3Matches","matches","orderLeagueTable","a","b","position","loadLeagueTable","list","teamname","push","leagueTables","openFile","byteSize","setFontWeight","team","fontWeight","StaffDialogController","$timeout","$stateParams","$uibModalInstance","entity","Staff","Job","clear","dismiss","isSaving","staff","id","onSaveSuccess","onSaveError","$emit","close","openCalendar","date","datePickerOpenStatus","jobs","focus","dateofbirth","setImage","$file","$error","toBase64","base64Data","$apply","image","imageContentType","type","StaffDetailController","unsubscribe","$on","event","StaffDeleteController","confirmDelete","page","value","squash","search","pagingParams","PaginationUtil","parsePage","predicate","parsePredicate","ascending","parseAscending","currentStateData","current","href","onEnter","$uibModal","backdrop","reload","fullname","priority","placeofbirth","previousclubs","DateUtils","resourceUrl","convertLocalDateFromServer","transformRequest","copy","convertLocalDateToServer","toJson","StaffController","paginationConstants","loadAll","reverse","links","parse","totalItems","queryCount","itemsPerPage","loadPage","transition","transitionTo","$current","currentSearch","SeasonDialogController","Season","season","SeasonDetailController","SeasonDeleteController","SeasonController","seasons","PositionDialogController","Position","PositionDetailController","PositionDeleteController","PositionController","positions","PlayerDialogController","Player","player","PlayerDetailController","PlayerDeleteController","shirtno","PlayerController","players","PartnerDialogController","partner","PartnerDetailController","PartnerDeleteController","externalUrl","PartnerController","partners","NewsDialogController","content","summernote","createdDate","NewsDetailController","filter","$sce","text","trustAsHtml","NewsDeleteController","title","videoUrl","convertDateTimeFromServer","NewsController","MatchDialogController","Competition","match","competitions","matchdatetime","MatchDetailController","MatchDeleteController","hometeam","awayteam","homegoals","awaygoals","location","description","MatchController","LeagueTableDialogController","leagueTable","LeagueTableDetailController","LeagueTableDeleteController","played","wins","draws","losses","goalsfor","goalsagainst","points","LeagueTableController","JobDialogController","job","JobDetailController","JobDeleteController","JobController","abstract","CompetitionDialogController","competition","CompetitionDetailController","CompetitionDeleteController","CompetitionController","words","wordsFilter","input","isNaN","inputWords","join","characters","charactersFilter","chars","breakOnWord","substring","charAt","substr","lastspace","lastIndexOf","jhSortBy","parentCtrl","require","jhSort","SortController","bindToController","$element","applyClass","thisIcon","find","sortIcon","sortAsc","sortDesc","remove","add","resetClasses","allThIcons","field","triggerApply","values","$watchGroup","header","Error","parts","forEach","p","section","trim","queryString","RegExp","$0","$1","$2","$3","isString","parseInt","sortArray","pop","jhiItemCount","bindings","component","$filter","Date","dateString","dateformat","$window","abbreviate","base64String","endsWith","suffix","str","paddingSize","formatAsBytes","toString","file","fileReader","FileReader","readAsDataURL","onload","e","target","capitalize","capitalizeFilter","toLowerCase","toUpperCase","Base64","encode","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","keyStr","decode","String","fromCharCode","modalInstance","animation","resetModal","LoginController","cancel","authenticationError","preventDefault","$broadcast","register","requestResetPassword","showValidation","formCtrl","each","$formGroup","$inputs","$input","inputName","attr","$invalid","$dirty","isInvalid","toggleClass","constant","minbytes","ngModel","$validators","modelValue","$isEmpty","numberOfBytes","maxbytes","jhiAlertErrorController","addErrorAlert","alerts","msg","timeout","toast","isToast","scoped","cleanHttpErrorListener","httpResponse","stopPropagation","Object","keys","errorHeader","entityKey","entityName","fieldErrors","fieldError","convertedField","fieldName","jhiAlertError","getService","warning","info","alertOptions","alert","alertId","closeAlert","addAlert","extAlerts","that","thisAlerts","closeAlertByIndex","map","index","splice","$get","showAsToast","provider","jhiAlertController","jhiAlert","ClubStaffController","showStaffDetails","selectedPlayer","modal","ClubPlayersController","showPlayerDetails","ClubRankingController","x","y","matchdate","ClubMatchesController","console","log","ClubPartnersController","ClubNewsController","ClubNewsDetailController","ClubContactController","getAccount","ClubStadiumController","ClubHistoryController","notificationInterceptor","alertKey","param","errorHandlerInterceptor","responseError","path","authExpiredInterceptor","$injector","authInterceptor","$location","request","token","Authorization","VERSION","stateChangeStart","external","stateChangeSuccess","toParams","fromParams","titleKey","paginationConfig","uibPaginationConfig","maxSize","boundaryLinks","firstText","previousText","nextText","lastText","pagerConfig","uibPagerConfig","localStorageConfig","$localStorageProvider","$sessionStorageProvider","setKeyPrefix","httpConfig","$urlRouterProvider","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","setMatchlist","otherwise","interceptors","val","equals","is","pattern","compileServiceConfig","$compileProvider","DEBUG_INFO_ENABLED","debugInfoEnabled","alertServiceConfig","AlertServiceProvider","navbar@","UserManagementDialogController","user","langKey","languages","UserManagementDetailController","load","UserManagementDeleteController","firstName","lastName","email","activated","createdBy","lastModifiedBy","lastModifiedDate","resetDate","resetKey","UserManagementController","setActive","isActivated","users","currentAccount","JhiMetricsService","getMetrics","threadDump","JhiMetricsMonitoringModalController","getLabelClass","threadState","threadDumpAll","threadDumpBlocked","threadDumpRunnable","threadDumpTimedWaiting","threadDumpWaiting","JhiMetricsMonitoringController","refresh","updatingMetrics","metrics","refreshThreadDumpData","cachesStats","servicesStats","newValue","timers","gauges","newKey","LogsService","findAll","changeLevel","LogsController","level","loggers","JhiHealthService","checkHealth","transformHealthData","flattenHealthData","getBaseName","getSubSystemName","remainder","isHealthObject","hasSubSystem","addHealthObject","getModuleName","isLeaf","healthObject","healthData","details","hasDetails","extend","separator","HealthModalController","currentHealth","baseName","subSystemName","JhiHealthCheckController","statusState","updatingHealth","showHealth","health","JhiConfigurationService","getConfigPropsComplete","properties","orderBy","getEnv","getEnvComplete","vals","v","k","JhiConfigurationController","allConfiguration","configuration","AuditsService","fromDate","toDate","AuditsController","onChangeDate","dateFormat","audits","today","getFullYear","getMonth","getDate","previousMonth","SocialRegisterController","providerLabel","SocialAuthController","$cookies","SocialService","getProviderSetting","getProviderURL","getCSRF","defaults","xsrfCookieName","socialService","jhSocial","label","providerSetting","providerURL","csrf","SettingsController","settingsAccount","copyAccount","RequestResetController","requestReset","errorEmailNotExists","resetAccount","ResetFinishController","finishReset","doNotMatch","confirmPassword","keyMissing","RegisterController","registerAccount","errorUserExists","errorEmailExists","passwordStrengthBar","iElement","strength","colors","mesureStrength","_force","_regex","_lowerLetters","test","_upperLetters","_numbers","_symbols","_flags","_passedMatches","grep","el","Math","min","getColor","s","idx","col","c","children","css","background-color","passwordToCheck","PasswordController","ActivationController","$templateCache","put"],"mappings":"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","file":"app/app-9830ecbef2.js","sourcesContent":["(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp', [\r\n            'ngStorage',\r\n            'ngResource',\r\n            'ngCookies',\r\n            'ngAria',\r\n            'ngCacheBuster',\r\n            'ngFileUpload',\r\n            'ui.bootstrap',\r\n            'ui.bootstrap.datetimepicker',\r\n            'ui.router',\r\n            'infinite-scroll',\r\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\r\n            'angular-loading-bar'\r\n        ])\r\n        .run(run);\r\n\r\n    run.$inject = ['stateHandler'];\r\n\r\n    function run(stateHandler) {\r\n        stateHandler.initialize();\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('User', User);\r\n\r\n    User.$inject = ['$resource'];\r\n\r\n    function User ($resource) {\r\n        var service = $resource('api/users/:login', {}, {\r\n            'query': {method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    data = angular.fromJson(data);\r\n                    return data;\r\n                }\r\n            },\r\n            'save': { method:'POST' },\r\n            'update': { method:'PUT' },\r\n            'delete':{ method:'DELETE'}\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('ProfileService', ProfileService);\r\n\r\n    ProfileService.$inject = ['$http'];\r\n\r\n    function ProfileService($http) {\r\n\r\n        var dataPromise;\r\n\r\n        var service = {\r\n            getProfileInfo : getProfileInfo\r\n        };\r\n\r\n        return service;\r\n\r\n        function getProfileInfo() {\r\n            if (angular.isUndefined(dataPromise)) {\r\n                dataPromise = $http.get('api/profile-info').then(function(result) {\r\n                    if (result.data.activeProfiles) {\r\n                        var response = {};\r\n                        response.activeProfiles = result.data.activeProfiles;\r\n                        response.ribbonEnv = result.data.ribbonEnv;\r\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\r\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\r\n                        return response;\r\n                    }\r\n                });\r\n            }\r\n            return dataPromise;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('pageRibbon', pageRibbon);\r\n\r\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\r\n\r\n    function pageRibbon(ProfileService, $rootScope) {\r\n        var directive = {\r\n            replace : true,\r\n            restrict : 'AE',\r\n            template : '<div class=\"ribbon hidden\"><a href=\"\">{{ribbonEnv}}</a></div>',\r\n            link : linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            ProfileService.getProfileInfo().then(function(response) {\r\n                if (response.ribbonEnv) {\r\n                    scope.ribbonEnv = response.ribbonEnv;\r\n                    element.addClass(response.ribbonEnv);\r\n                    element.removeClass('hidden');\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Register', Register);\r\n\r\n    Register.$inject = ['$resource'];\r\n\r\n    function Register ($resource) {\r\n        return $resource('api/register', {}, {});\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Principal', Principal);\r\n\r\n    Principal.$inject = ['$q', 'Account'];\r\n\r\n    function Principal ($q, Account) {\r\n        var _identity,\r\n            _authenticated = false;\r\n\r\n        var service = {\r\n            authenticate: authenticate,\r\n            hasAnyAuthority: hasAnyAuthority,\r\n            hasAuthority: hasAuthority,\r\n            identity: identity,\r\n            isAuthenticated: isAuthenticated,\r\n            isIdentityResolved: isIdentityResolved\r\n        };\r\n\r\n        return service;\r\n\r\n        function authenticate (identity) {\r\n            _identity = identity;\r\n            _authenticated = identity !== null;\r\n        }\r\n\r\n        function hasAnyAuthority (authorities) {\r\n            if (!_authenticated || !_identity || !_identity.authorities) {\r\n                return false;\r\n            }\r\n\r\n            for (var i = 0; i < authorities.length; i++) {\r\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function hasAuthority (authority) {\r\n            if (!_authenticated) {\r\n                return $q.when(false);\r\n            }\r\n\r\n            return this.identity().then(function(_id) {\r\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\r\n            }, function(){\r\n                return false;\r\n            });\r\n        }\r\n\r\n        function identity (force) {\r\n            var deferred = $q.defer();\r\n\r\n            if (force === true) {\r\n                _identity = undefined;\r\n            }\r\n\r\n            // check and see if we have retrieved the identity data from the server.\r\n            // if we have, reuse it by immediately resolving\r\n            if (angular.isDefined(_identity)) {\r\n                deferred.resolve(_identity);\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            // retrieve the identity data from the server, update the identity object, and then resolve.\r\n            Account.get().$promise\r\n                .then(getAccountThen)\r\n                .catch(getAccountCatch);\r\n\r\n            return deferred.promise;\r\n\r\n            function getAccountThen (account) {\r\n                _identity = account.data;\r\n                _authenticated = true;\r\n                deferred.resolve(_identity);\r\n            }\r\n\r\n            function getAccountCatch () {\r\n                _identity = null;\r\n                _authenticated = false;\r\n                deferred.resolve(_identity);\r\n            }\r\n        }\r\n\r\n        function isAuthenticated () {\r\n            return _authenticated;\r\n        }\r\n\r\n        function isIdentityResolved () {\r\n            return angular.isDefined(_identity);\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('PasswordResetInit', PasswordResetInit);\r\n\r\n    PasswordResetInit.$inject = ['$resource'];\r\n\r\n    function PasswordResetInit($resource) {\r\n        var service = $resource('api/account/reset_password/init', {}, {});\r\n\r\n        return service;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('PasswordResetFinish', PasswordResetFinish);\r\n\r\n    PasswordResetFinish.$inject = ['$resource'];\r\n\r\n    function PasswordResetFinish($resource) {\r\n        var service = $resource('api/account/reset_password/finish', {}, {});\r\n\r\n        return service;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Password', Password);\r\n\r\n    Password.$inject = ['$resource'];\r\n\r\n    function Password($resource) {\r\n        var service = $resource('api/account/change_password', {}, {});\r\n\r\n        return service;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('hasAuthority', hasAuthority);\r\n\r\n    hasAuthority.$inject = ['Principal'];\r\n\r\n    function hasAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    Principal.hasAuthority(authority)\r\n                        .then(function (result) {\r\n                            if (result) {\r\n                                setVisible();\r\n                            } else {\r\n                                setHidden();\r\n                            }\r\n                        });\r\n                };\r\n\r\n            if (authority.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function() {\r\n                    return Principal.isAuthenticated();\r\n                }, function() {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('hasAnyAuthority', hasAnyAuthority);\r\n\r\n    hasAnyAuthority.$inject = ['Principal'];\r\n\r\n    function hasAnyAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n                    var result;\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    result = Principal.hasAnyAuthority(authorities);\r\n                    if (result) {\r\n                        setVisible();\r\n                    } else {\r\n                        setHidden();\r\n                    }\r\n                };\r\n\r\n            if (authorities.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function() {\r\n                    return Principal.isAuthenticated();\r\n                }, function() {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Auth', Auth);\r\n\r\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\r\n\r\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\r\n        var service = {\r\n            activateAccount: activateAccount,\r\n            authorize: authorize,\r\n            changePassword: changePassword,\r\n            createAccount: createAccount,\r\n            getPreviousState: getPreviousState,\r\n            login: login,\r\n            logout: logout,\r\n            loginWithToken: loginWithToken,\r\n            resetPasswordFinish: resetPasswordFinish,\r\n            resetPasswordInit: resetPasswordInit,\r\n            resetPreviousState: resetPreviousState,\r\n            storePreviousState: storePreviousState,\r\n            updateAccount: updateAccount\r\n        };\r\n\r\n        return service;\r\n\r\n        function activateAccount (key, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Activate.get(key,\r\n                function (response) {\r\n                    return cb(response);\r\n                },\r\n                function (err) {\r\n                    return cb(err);\r\n                }.bind(this)).$promise;\r\n        }\r\n\r\n        function authorize (force) {\r\n            var authReturn = Principal.identity(force).then(authThen);\r\n\r\n            return authReturn;\r\n\r\n            function authThen () {\r\n                var isAuthenticated = Principal.isAuthenticated();\r\n\r\n                // an authenticated user can't access to login and register pages\r\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth')) {\r\n                    $state.go('home');\r\n                }\r\n\r\n                // recover and clear previousState after external login redirect (e.g. oauth2)\r\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\r\n                    var previousState = getPreviousState();\r\n                    resetPreviousState();\r\n                    $state.go(previousState.name, previousState.params);\r\n                }\r\n\r\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\r\n                    if (isAuthenticated) {\r\n                        // user is signed in but not authorized for desired state\r\n                        $state.go('accessdenied');\r\n                    }\r\n                    else {\r\n                        // user is not authenticated. stow the state they wanted before you\r\n                        // send them to the login service, so you can return them when you're done\r\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\r\n\r\n                        // now, send them to the signin state so they can log in\r\n                        $state.go('accessdenied').then(function() {\r\n                            LoginService.open();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function changePassword (newPassword, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Password.save(newPassword, function () {\r\n                return cb();\r\n            }, function (err) {\r\n                return cb(err);\r\n            }).$promise;\r\n        }\r\n\r\n        function createAccount (account, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Register.save(account,\r\n                function () {\r\n                    return cb(account);\r\n                },\r\n                function (err) {\r\n                    this.logout();\r\n                    return cb(err);\r\n                }.bind(this)).$promise;\r\n        }\r\n\r\n        function login (credentials, callback) {\r\n            var cb = callback || angular.noop;\r\n            var deferred = $q.defer();\r\n\r\n            AuthServerProvider.login(credentials)\r\n                .then(loginThen)\r\n                .catch(function (err) {\r\n                    this.logout();\r\n                    deferred.reject(err);\r\n                    return cb(err);\r\n                }.bind(this));\r\n\r\n            function loginThen (data) {\r\n                Principal.identity(true).then(function(account) {\r\n                    deferred.resolve(data);\r\n                });\r\n                return cb();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function loginWithToken(jwt, rememberMe) {\r\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\r\n        }\r\n\r\n        function logout () {\r\n            AuthServerProvider.logout();\r\n            Principal.authenticate(null);\r\n        }\r\n\r\n        function resetPasswordFinish (keyAndPassword, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return PasswordResetFinish.save(keyAndPassword, function () {\r\n                return cb();\r\n            }, function (err) {\r\n                return cb(err);\r\n            }).$promise;\r\n        }\r\n\r\n        function resetPasswordInit (mail, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return PasswordResetInit.save(mail, function() {\r\n                return cb();\r\n            }, function (err) {\r\n                return cb(err);\r\n            }).$promise;\r\n        }\r\n\r\n        function updateAccount (account, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Account.save(account,\r\n                function () {\r\n                    return cb(account);\r\n                },\r\n                function (err) {\r\n                    return cb(err);\r\n                }.bind(this)).$promise;\r\n        }\r\n\r\n        function getPreviousState() {\r\n            var previousState = $sessionStorage.previousState;\r\n            return previousState;\r\n        }\r\n\r\n        function resetPreviousState() {\r\n            delete $sessionStorage.previousState;\r\n        }\r\n\r\n        function storePreviousState(previousStateName, previousStateParams) {\r\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\r\n            $sessionStorage.previousState = previousState;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('AuthServerProvider', AuthServerProvider);\r\n\r\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\r\n\r\n    function AuthServerProvider ($http, $localStorage, $sessionStorage, $q) {\r\n        var service = {\r\n            getToken: getToken,\r\n            login: login,\r\n            loginWithToken: loginWithToken,\r\n            storeAuthenticationToken: storeAuthenticationToken,\r\n            logout: logout\r\n        };\r\n\r\n        return service;\r\n\r\n        function getToken () {\r\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\r\n        }\r\n\r\n        function login (credentials) {\r\n\r\n            var data = {\r\n                username: credentials.username,\r\n                password: credentials.password,\r\n                rememberMe: credentials.rememberMe\r\n            };\r\n            return $http.post('api/authenticate', data).success(authenticateSuccess);\r\n\r\n            function authenticateSuccess (data, status, headers) {\r\n                var bearerToken = headers('Authorization');\r\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\r\n                    var jwt = bearerToken.slice(7, bearerToken.length);\r\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\r\n                    return jwt;\r\n                }\r\n            }\r\n        }\r\n\r\n        function loginWithToken(jwt, rememberMe) {\r\n            var deferred = $q.defer();\r\n\r\n            if (angular.isDefined(jwt)) {\r\n                this.storeAuthenticationToken(jwt, rememberMe);\r\n                deferred.resolve(jwt);\r\n            } else {\r\n                deferred.reject();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function storeAuthenticationToken(jwt, rememberMe) {\r\n            if(rememberMe){\r\n                $localStorage.authenticationToken = jwt;\r\n            } else {\r\n                $sessionStorage.authenticationToken = jwt;\r\n            }\r\n        }\r\n\r\n        function logout () {\r\n            delete $localStorage.authenticationToken;\r\n            delete $sessionStorage.authenticationToken;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Activate', Activate);\r\n\r\n    Activate.$inject = ['$resource'];\r\n\r\n    function Activate ($resource) {\r\n        var service = $resource('api/activate', {}, {\r\n            'get': { method: 'GET', params: {}, isArray: false}\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Account', Account);\r\n\r\n    Account.$inject = ['$resource'];\r\n\r\n    function Account ($resource) {\r\n        var service = $resource('api/account', {}, {\r\n            'get': { method: 'GET', params: {}, isArray: false,\r\n                interceptor: {\r\n                    response: function(response) {\r\n                        // expose response\r\n                        return response;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NavbarController', NavbarController);\r\n\r\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\r\n\r\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\r\n        var vm = this;\r\n\r\n        vm.isNavbarCollapsed = true;\r\n        vm.isAuthenticated = Principal.isAuthenticated;\r\n\r\n        ProfileService.getProfileInfo().then(function(response) {\r\n            vm.inProduction = response.inProduction;\r\n            vm.swaggerEnabled = response.swaggerEnabled;\r\n        });\r\n\r\n        vm.login = login;\r\n        vm.logout = logout;\r\n        vm.toggleNavbar = toggleNavbar;\r\n        vm.collapseNavbar = collapseNavbar;\r\n        vm.$state = $state;\r\n\r\n        function login() {\r\n            collapseNavbar();\r\n            LoginService.open();\r\n        }\r\n\r\n        function logout() {\r\n            collapseNavbar();\r\n            Auth.logout();\r\n            $state.go('home');\r\n        }\r\n\r\n        function toggleNavbar() {\r\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\r\n        }\r\n\r\n        function collapseNavbar() {\r\n            vm.isNavbarCollapsed = true;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('error', {\r\n                parent: 'app',\r\n                url: '/error',\r\n                data: {\r\n                    authorities: [],\r\n                    pageTitle: 'Error page!'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/layouts/error/error.html'\r\n                    }\r\n                }\r\n            })\r\n            .state('accessdenied', {\r\n                parent: 'app',\r\n                url: '/accessdenied',\r\n                data: {\r\n                    authorities: []\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/layouts/error/accessdenied.html'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('home', {\r\n            parent: 'app',\r\n            url: '/',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/home/home.html',\r\n                    controller: 'HomeController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }            \r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('HomeController', HomeController);\r\n\r\n    HomeController.$inject = ['$scope', '$state', 'DataUtils', 'News', 'Match', 'Partner', 'LeagueTable', 'ParseLinks', 'AlertService'];\r\n\r\n    function HomeController($scope, $state, DataUtils, News, Match, Partner, LeagueTable, ParseLinks, AlertService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadLast3News();\r\n        function loadLast3News() {\r\n            News.query({\r\n                size: 3,\r\n                sort: ['id,desc']\r\n            }, onSuccess, onError);\r\n\r\n            function onSuccess(data, headers) {\r\n                vm.news = data;\r\n                $(document).ready(function () {\r\n                    $('.bxslider').bxSlider({\r\n                        auto: true,\r\n                        autoControls: true,\r\n                        pause: 3000,\r\n                        autoControls: false,\r\n                    });\r\n                });\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        loadLast3Matches();\r\n        function loadLast3Matches() {\r\n            Match.query({\r\n                size: 2,\r\n                sort: ['id,desc']\r\n            }, onSuccess, onError);\r\n\r\n            function onSuccess(data, headers) {\r\n                vm.matches = data;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }       \r\n\r\n        function orderLeagueTable(a, b) {\r\n            if (a.position < b.position)\r\n                return -1;\r\n            if (a.position > b.position)\r\n                return 1;\r\n            return 0;\r\n        }\r\n\r\n        $scope.setFontWeight = function (team) {\r\n            if (team.teamname == 'Politehnica București') {\r\n                return { fontWeight: \"bold\" }\r\n            }\r\n        }\r\n\r\n        loadLeagueTable();\r\n        function loadLeagueTable() {\r\n            LeagueTable.query({\r\n            }, onSuccess, onError);\r\n\r\n            function onSuccess(data, headers) {\r\n                data = data.sort(orderLeagueTable);\r\n                var list = [];\r\n                var position = -1;\r\n\r\n                for (var i = 0; i < data.length; i++) {\r\n                    if (data[i].teamname == 'Politehnica București')\r\n                        position = i;\r\n                }\r\n\r\n                if (position == 0) {\r\n                    list.push(data[position]);\r\n                    list.push(data[position + 1]);\r\n                    list.push(data[position + 2]);\r\n                } else if (position == data.length - 1) {\r\n                    list.push(data[position - 2]);\r\n                    list.push(data[position - 1]);\r\n                    list.push(data[position]);\r\n                } else\r\n                    if (position != -1) {\r\n                        list.push(data[position - 1]);\r\n                        list.push(data[position]);\r\n                        list.push(data[position + 1]);\r\n                    }\r\n\r\n                vm.leagueTables = list;\r\n\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('StaffDialogController', StaffDialogController);\r\n\r\n    StaffDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'Staff', 'Job'];\r\n\r\n    function StaffDialogController ($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, Staff, Job) {\r\n        var vm = this;\r\n\r\n        vm.staff = entity;\r\n        vm.clear = clear;\r\n        vm.datePickerOpenStatus = {};\r\n        vm.openCalendar = openCalendar;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.save = save;\r\n        vm.jobs = Job.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.staff.id !== null) {\r\n                Staff.update(vm.staff, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Staff.save(vm.staff, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:staffUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        vm.datePickerOpenStatus.dateofbirth = false;\r\n\r\n        vm.setImage = function ($file, staff) {\r\n            if ($file && $file.$error === 'pattern') {\r\n                return;\r\n            }\r\n            if ($file) {\r\n                DataUtils.toBase64($file, function(base64Data) {\r\n                    $scope.$apply(function() {\r\n                        staff.image = base64Data;\r\n                        staff.imageContentType = $file.type;\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n        function openCalendar (date) {\r\n            vm.datePickerOpenStatus[date] = true;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('StaffDetailController', StaffDetailController);\r\n\r\n    StaffDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'Staff', 'Job'];\r\n\r\n    function StaffDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, Staff, Job) {\r\n        var vm = this;\r\n\r\n        vm.staff = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:staffUpdate', function(event, result) {\r\n            vm.staff = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('StaffDeleteController',StaffDeleteController);\r\n\r\n    StaffDeleteController.$inject = ['$uibModalInstance', 'entity', 'Staff'];\r\n\r\n    function StaffDeleteController($uibModalInstance, entity, Staff) {\r\n        var vm = this;\r\n\r\n        vm.staff = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Staff.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('staff', {\r\n            parent: 'entity',\r\n            url: '/staff?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Staff'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/staff/staff.html',\r\n                    controller: 'StaffController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('staff-detail', {\r\n            parent: 'staff',\r\n            url: '/staff/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Staff'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/staff/staff-detail.html',\r\n                    controller: 'StaffDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Staff', function($stateParams, Staff) {\r\n                    return Staff.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'staff',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('staff-detail.edit', {\r\n            parent: 'staff-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\r\n                    controller: 'StaffDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Staff', function(Staff) {\r\n                            return Staff.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('staff.new', {\r\n            parent: 'staff',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\r\n                    controller: 'StaffDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                fullname: null,\r\n                                priority: null,\r\n                                placeofbirth: null,\r\n                                dateofbirth: null,\r\n                                previousclubs: null,\r\n                                image: null,\r\n                                imageContentType: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('staff', null, { reload: 'staff' });\r\n                }, function() {\r\n                    $state.go('staff');\r\n                });\r\n            }]\r\n        })\r\n        .state('staff.edit', {\r\n            parent: 'staff',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\r\n                    controller: 'StaffDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Staff', function(Staff) {\r\n                            return Staff.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('staff', null, { reload: 'staff' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('staff.delete', {\r\n            parent: 'staff',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/staff/staff-delete-dialog.html',\r\n                    controller: 'StaffDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Staff', function(Staff) {\r\n                            return Staff.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('staff', null, { reload: 'staff' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Staff', Staff);\r\n\r\n    Staff.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Staff ($resource, DateUtils) {\r\n        var resourceUrl =  'api/staff/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.dateofbirth = DateUtils.convertLocalDateFromServer(data.dateofbirth);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('StaffController', StaffController);\r\n\r\n    StaffController.$inject = ['$state', 'DataUtils', 'Staff', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function StaffController($state, DataUtils, Staff, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Staff.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.staff = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SeasonDialogController', SeasonDialogController);\r\n\r\n    SeasonDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Season'];\r\n\r\n    function SeasonDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Season) {\r\n        var vm = this;\r\n\r\n        vm.season = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.season.id !== null) {\r\n                Season.update(vm.season, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Season.save(vm.season, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:seasonUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SeasonDetailController', SeasonDetailController);\r\n\r\n    SeasonDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Season'];\r\n\r\n    function SeasonDetailController($scope, $rootScope, $stateParams, previousState, entity, Season) {\r\n        var vm = this;\r\n\r\n        vm.season = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:seasonUpdate', function(event, result) {\r\n            vm.season = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SeasonDeleteController',SeasonDeleteController);\r\n\r\n    SeasonDeleteController.$inject = ['$uibModalInstance', 'entity', 'Season'];\r\n\r\n    function SeasonDeleteController($uibModalInstance, entity, Season) {\r\n        var vm = this;\r\n\r\n        vm.season = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Season.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('season', {\r\n            parent: 'entity',\r\n            url: '/season?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Seasons'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/season/seasons.html',\r\n                    controller: 'SeasonController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('season-detail', {\r\n            parent: 'season',\r\n            url: '/season/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Season'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/season/season-detail.html',\r\n                    controller: 'SeasonDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Season', function($stateParams, Season) {\r\n                    return Season.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'season',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('season-detail.edit', {\r\n            parent: 'season-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/season/season-dialog.html',\r\n                    controller: 'SeasonDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Season', function(Season) {\r\n                            return Season.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('season.new', {\r\n            parent: 'season',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/season/season-dialog.html',\r\n                    controller: 'SeasonDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('season', null, { reload: 'season' });\r\n                }, function() {\r\n                    $state.go('season');\r\n                });\r\n            }]\r\n        })\r\n        .state('season.edit', {\r\n            parent: 'season',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/season/season-dialog.html',\r\n                    controller: 'SeasonDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Season', function(Season) {\r\n                            return Season.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('season', null, { reload: 'season' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('season.delete', {\r\n            parent: 'season',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/season/season-delete-dialog.html',\r\n                    controller: 'SeasonDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Season', function(Season) {\r\n                            return Season.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('season', null, { reload: 'season' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Season', Season);\r\n\r\n    Season.$inject = ['$resource'];\r\n\r\n    function Season ($resource) {\r\n        var resourceUrl =  'api/seasons/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SeasonController', SeasonController);\r\n\r\n    SeasonController.$inject = ['$state', 'Season', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function SeasonController($state, Season, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Season.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.seasons = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PositionDialogController', PositionDialogController);\r\n\r\n    PositionDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Position'];\r\n\r\n    function PositionDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Position) {\r\n        var vm = this;\r\n\r\n        vm.position = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.position.id !== null) {\r\n                Position.update(vm.position, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Position.save(vm.position, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:positionUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PositionDetailController', PositionDetailController);\r\n\r\n    PositionDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Position'];\r\n\r\n    function PositionDetailController($scope, $rootScope, $stateParams, previousState, entity, Position) {\r\n        var vm = this;\r\n\r\n        vm.position = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:positionUpdate', function(event, result) {\r\n            vm.position = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PositionDeleteController',PositionDeleteController);\r\n\r\n    PositionDeleteController.$inject = ['$uibModalInstance', 'entity', 'Position'];\r\n\r\n    function PositionDeleteController($uibModalInstance, entity, Position) {\r\n        var vm = this;\r\n\r\n        vm.position = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Position.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('position', {\r\n            parent: 'entity',\r\n            url: '/position?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Positions'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/position/positions.html',\r\n                    controller: 'PositionController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('position-detail', {\r\n            parent: 'position',\r\n            url: '/position/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Position'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/position/position-detail.html',\r\n                    controller: 'PositionDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Position', function($stateParams, Position) {\r\n                    return Position.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'position',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('position-detail.edit', {\r\n            parent: 'position-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/position/position-dialog.html',\r\n                    controller: 'PositionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Position', function(Position) {\r\n                            return Position.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('position.new', {\r\n            parent: 'position',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/position/position-dialog.html',\r\n                    controller: 'PositionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('position', null, { reload: 'position' });\r\n                }, function() {\r\n                    $state.go('position');\r\n                });\r\n            }]\r\n        })\r\n        .state('position.edit', {\r\n            parent: 'position',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/position/position-dialog.html',\r\n                    controller: 'PositionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Position', function(Position) {\r\n                            return Position.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('position', null, { reload: 'position' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('position.delete', {\r\n            parent: 'position',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/position/position-delete-dialog.html',\r\n                    controller: 'PositionDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Position', function(Position) {\r\n                            return Position.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('position', null, { reload: 'position' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Position', Position);\r\n\r\n    Position.$inject = ['$resource'];\r\n\r\n    function Position ($resource) {\r\n        var resourceUrl =  'api/positions/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PositionController', PositionController);\r\n\r\n    PositionController.$inject = ['$state', 'Position', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function PositionController($state, Position, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Position.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.positions = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PlayerDialogController', PlayerDialogController);\r\n\r\n    PlayerDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'Player', 'Position'];\r\n\r\n    function PlayerDialogController ($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, Player, Position) {\r\n        var vm = this;\r\n\r\n        vm.player = entity;\r\n        vm.clear = clear;\r\n        vm.datePickerOpenStatus = {};\r\n        vm.openCalendar = openCalendar;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.save = save;\r\n        vm.positions = Position.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.player.id !== null) {\r\n                Player.update(vm.player, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Player.save(vm.player, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:playerUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        vm.datePickerOpenStatus.dateofbirth = false;\r\n\r\n        vm.setImage = function ($file, player) {\r\n            if ($file && $file.$error === 'pattern') {\r\n                return;\r\n            }\r\n            if ($file) {\r\n                DataUtils.toBase64($file, function(base64Data) {\r\n                    $scope.$apply(function() {\r\n                        player.image = base64Data;\r\n                        player.imageContentType = $file.type;\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n        function openCalendar (date) {\r\n            vm.datePickerOpenStatus[date] = true;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PlayerDetailController', PlayerDetailController);\r\n\r\n    PlayerDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'Player', 'Position'];\r\n\r\n    function PlayerDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, Player, Position) {\r\n        var vm = this;\r\n\r\n        vm.player = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:playerUpdate', function(event, result) {\r\n            vm.player = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PlayerDeleteController',PlayerDeleteController);\r\n\r\n    PlayerDeleteController.$inject = ['$uibModalInstance', 'entity', 'Player'];\r\n\r\n    function PlayerDeleteController($uibModalInstance, entity, Player) {\r\n        var vm = this;\r\n\r\n        vm.player = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Player.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('player', {\r\n            parent: 'entity',\r\n            url: '/player?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Players'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/player/players.html',\r\n                    controller: 'PlayerController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('player-detail', {\r\n            parent: 'player',\r\n            url: '/player/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Player'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/player/player-detail.html',\r\n                    controller: 'PlayerDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Player', function($stateParams, Player) {\r\n                    return Player.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'player',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('player-detail.edit', {\r\n            parent: 'player-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/player/player-dialog.html',\r\n                    controller: 'PlayerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Player', function(Player) {\r\n                            return Player.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('player.new', {\r\n            parent: 'player',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/player/player-dialog.html',\r\n                    controller: 'PlayerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                fullname: null,\r\n                                priority: null,\r\n                                dateofbirth: null,\r\n                                shirtno: null,\r\n                                previousclubs: null,\r\n                                placeofbirth: null,\r\n                                image: null,\r\n                                imageContentType: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('player', null, { reload: 'player' });\r\n                }, function() {\r\n                    $state.go('player');\r\n                });\r\n            }]\r\n        })\r\n        .state('player.edit', {\r\n            parent: 'player',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/player/player-dialog.html',\r\n                    controller: 'PlayerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Player', function(Player) {\r\n                            return Player.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('player', null, { reload: 'player' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('player.delete', {\r\n            parent: 'player',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/player/player-delete-dialog.html',\r\n                    controller: 'PlayerDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Player', function(Player) {\r\n                            return Player.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('player', null, { reload: 'player' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Player', Player);\r\n\r\n    Player.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Player ($resource, DateUtils) {\r\n        var resourceUrl =  'api/players/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.dateofbirth = DateUtils.convertLocalDateFromServer(data.dateofbirth);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PlayerController', PlayerController);\r\n\r\n    PlayerController.$inject = ['$state', 'DataUtils', 'Player', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function PlayerController($state, DataUtils, Player, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Player.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.players = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PartnerDialogController', PartnerDialogController);\r\n\r\n    PartnerDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'Partner'];\r\n\r\n    function PartnerDialogController ($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, Partner) {\r\n        var vm = this;\r\n\r\n        vm.partner = entity;\r\n        vm.clear = clear;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.save = save;\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.partner.id !== null) {\r\n                Partner.update(vm.partner, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Partner.save(vm.partner, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:partnerUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n        vm.setImage = function ($file, partner) {\r\n            if ($file && $file.$error === 'pattern') {\r\n                return;\r\n            }\r\n            if ($file) {\r\n                DataUtils.toBase64($file, function(base64Data) {\r\n                    $scope.$apply(function() {\r\n                        partner.image = base64Data;\r\n                        partner.imageContentType = $file.type;\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PartnerDetailController', PartnerDetailController);\r\n\r\n    PartnerDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'Partner'];\r\n\r\n    function PartnerDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, Partner) {\r\n        var vm = this;\r\n\r\n        vm.partner = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:partnerUpdate', function(event, result) {\r\n            vm.partner = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PartnerDeleteController',PartnerDeleteController);\r\n\r\n    PartnerDeleteController.$inject = ['$uibModalInstance', 'entity', 'Partner'];\r\n\r\n    function PartnerDeleteController($uibModalInstance, entity, Partner) {\r\n        var vm = this;\r\n\r\n        vm.partner = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Partner.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('partner', {\r\n            parent: 'entity',\r\n            url: '/partner?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Partners'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/partner/partners.html',\r\n                    controller: 'PartnerController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('partner-detail', {\r\n            parent: 'partner',\r\n            url: '/partner/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Partner'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/partner/partner-detail.html',\r\n                    controller: 'PartnerDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Partner', function($stateParams, Partner) {\r\n                    return Partner.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'partner',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('partner-detail.edit', {\r\n            parent: 'partner-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/partner/partner-dialog.html',\r\n                    controller: 'PartnerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Partner', function(Partner) {\r\n                            return Partner.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('partner.new', {\r\n            parent: 'partner',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/partner/partner-dialog.html',\r\n                    controller: 'PartnerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                image: null,\r\n                                imageContentType: null,\r\n                                externalUrl: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('partner', null, { reload: 'partner' });\r\n                }, function() {\r\n                    $state.go('partner');\r\n                });\r\n            }]\r\n        })\r\n        .state('partner.edit', {\r\n            parent: 'partner',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/partner/partner-dialog.html',\r\n                    controller: 'PartnerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Partner', function(Partner) {\r\n                            return Partner.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('partner', null, { reload: 'partner' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('partner.delete', {\r\n            parent: 'partner',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/partner/partner-delete-dialog.html',\r\n                    controller: 'PartnerDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Partner', function(Partner) {\r\n                            return Partner.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('partner', null, { reload: 'partner' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Partner', Partner);\r\n\r\n    Partner.$inject = ['$resource'];\r\n\r\n    function Partner ($resource) {\r\n        var resourceUrl =  'api/partners/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PartnerController', PartnerController);\r\n\r\n    PartnerController.$inject = ['$state', 'DataUtils', 'Partner', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function PartnerController($state, DataUtils, Partner, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Partner.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.partners = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NewsDialogController', NewsDialogController);\r\n\r\n    NewsDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'News'];\r\n\r\n    function NewsDialogController($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, News) {\r\n        var vm = this;\r\n\r\n        vm.news = entity;\r\n        vm.clear = clear;\r\n        vm.datePickerOpenStatus = {};\r\n        vm.openCalendar = openCalendar;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.save = save;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save() {\r\n            vm.news.content = $('#summernote').summernote('code');\r\n            vm.isSaving = true;\r\n            if (vm.news.id !== null) {\r\n                News.update(vm.news, onSaveSuccess, onSaveError);\r\n            } else {\r\n                News.save(vm.news, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess(result) {\r\n            $scope.$emit('poliApp:newsUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError() {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n        vm.setImage = function ($file, news) {\r\n            if ($file && $file.$error === 'pattern') {\r\n                return;\r\n            }\r\n            if ($file) {\r\n                DataUtils.toBase64($file, function (base64Data) {\r\n                    $scope.$apply(function () {\r\n                        news.image = base64Data;\r\n                        news.imageContentType = $file.type;\r\n                    });\r\n                });\r\n            }\r\n        };\r\n        vm.datePickerOpenStatus.createdDate = false;\r\n\r\n        function openCalendar(date) {\r\n            vm.datePickerOpenStatus[date] = true;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NewsDetailController', NewsDetailController)\r\n        .filter('to_trusted', ['$sce', function ($sce) {\r\n            return function (text) {\r\n                return $sce.trustAsHtml(text);\r\n            };\r\n        }]);\r\n\r\n    NewsDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'News'];\r\n\r\n    function NewsDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, News) {\r\n        var vm = this;\r\n\r\n        vm.news = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:newsUpdate', function (event, result) {\r\n            vm.news = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NewsDeleteController',NewsDeleteController);\r\n\r\n    NewsDeleteController.$inject = ['$uibModalInstance', 'entity', 'News'];\r\n\r\n    function NewsDeleteController($uibModalInstance, entity, News) {\r\n        var vm = this;\r\n\r\n        vm.news = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            News.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('news', {\r\n            parent: 'entity',\r\n            url: '/news?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'News'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/news/news.html',\r\n                    controller: 'NewsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('news-detail', {\r\n            parent: 'news',\r\n            url: '/news/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'News'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/news/news-detail.html',\r\n                    controller: 'NewsDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'News', function($stateParams, News) {\r\n                    return News.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'news',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('news-detail.edit', {\r\n            parent: 'news-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/news/news-dialog.html',\r\n                    controller: 'NewsDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['News', function(News) {\r\n                            return News.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('news.new', {\r\n            parent: 'news',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/news/news-dialog.html',\r\n                    controller: 'NewsDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                title: null,\r\n                                image: null,\r\n                                imageContentType: null,\r\n                                videoUrl: null,\r\n                                externalUrl: null,\r\n                                createdDate: null,\r\n                                content: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('news', null, { reload: 'news' });\r\n                }, function() {\r\n                    $state.go('news');\r\n                });\r\n            }]\r\n        })\r\n        .state('news.edit', {\r\n            parent: 'news',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/news/news-dialog.html',\r\n                    controller: 'NewsDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['News', function(News) {\r\n                            return News.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('news', null, { reload: 'news' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('news.delete', {\r\n            parent: 'news',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/news/news-delete-dialog.html',\r\n                    controller: 'NewsDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['News', function(News) {\r\n                            return News.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('news', null, { reload: 'news' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('News', News);\r\n\r\n    News.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function News ($resource, DateUtils) {\r\n        var resourceUrl =  'api/news/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.createdDate = DateUtils.convertDateTimeFromServer(data.createdDate);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NewsController', NewsController);\r\n\r\n    NewsController.$inject = ['$state', 'DataUtils', 'News', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function NewsController($state, DataUtils, News, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            News.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.news = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('MatchDialogController', MatchDialogController);\r\n\r\n    MatchDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Match', 'Competition'];\r\n\r\n    function MatchDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Match, Competition) {\r\n        var vm = this;\r\n\r\n        vm.match = entity;\r\n        vm.clear = clear;\r\n        vm.datePickerOpenStatus = {};\r\n        vm.openCalendar = openCalendar;\r\n        vm.save = save;\r\n        vm.competitions = Competition.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.match.id !== null) {\r\n                Match.update(vm.match, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Match.save(vm.match, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:matchUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        vm.datePickerOpenStatus.matchdatetime = false;\r\n\r\n        function openCalendar (date) {\r\n            vm.datePickerOpenStatus[date] = true;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('MatchDetailController', MatchDetailController);\r\n\r\n    MatchDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Match', 'Competition'];\r\n\r\n    function MatchDetailController($scope, $rootScope, $stateParams, previousState, entity, Match, Competition) {\r\n        var vm = this;\r\n\r\n        vm.match = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:matchUpdate', function(event, result) {\r\n            vm.match = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('MatchDeleteController',MatchDeleteController);\r\n\r\n    MatchDeleteController.$inject = ['$uibModalInstance', 'entity', 'Match'];\r\n\r\n    function MatchDeleteController($uibModalInstance, entity, Match) {\r\n        var vm = this;\r\n\r\n        vm.match = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Match.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('match', {\r\n            parent: 'entity',\r\n            url: '/match?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Matches'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/match/matches.html',\r\n                    controller: 'MatchController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('match-detail', {\r\n            parent: 'match',\r\n            url: '/match/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Match'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/match/match-detail.html',\r\n                    controller: 'MatchDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Match', function($stateParams, Match) {\r\n                    return Match.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'match',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('match-detail.edit', {\r\n            parent: 'match-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/match/match-dialog.html',\r\n                    controller: 'MatchDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Match', function(Match) {\r\n                            return Match.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('match.new', {\r\n            parent: 'match',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/match/match-dialog.html',\r\n                    controller: 'MatchDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                hometeam: null,\r\n                                awayteam: null,\r\n                                homegoals: null,\r\n                                awaygoals: null,\r\n                                location: null,\r\n                                description: null,\r\n                                matchdatetime: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('match', null, { reload: 'match' });\r\n                }, function() {\r\n                    $state.go('match');\r\n                });\r\n            }]\r\n        })\r\n        .state('match.edit', {\r\n            parent: 'match',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/match/match-dialog.html',\r\n                    controller: 'MatchDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Match', function(Match) {\r\n                            return Match.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('match', null, { reload: 'match' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('match.delete', {\r\n            parent: 'match',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/match/match-delete-dialog.html',\r\n                    controller: 'MatchDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Match', function(Match) {\r\n                            return Match.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('match', null, { reload: 'match' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Match', Match);\r\n\r\n    Match.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Match ($resource, DateUtils) {\r\n        var resourceUrl =  'api/matches/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.matchdatetime = DateUtils.convertDateTimeFromServer(data.matchdatetime);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('MatchController', MatchController);\r\n\r\n    MatchController.$inject = ['$state', 'Match', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function MatchController($state, Match, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Match.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.matches = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LeagueTableDialogController', LeagueTableDialogController);\r\n\r\n    LeagueTableDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'LeagueTable', 'Competition'];\r\n\r\n    function LeagueTableDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, LeagueTable, Competition) {\r\n        var vm = this;\r\n\r\n        vm.leagueTable = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n        vm.competitions = Competition.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.leagueTable.id !== null) {\r\n                LeagueTable.update(vm.leagueTable, onSaveSuccess, onSaveError);\r\n            } else {\r\n                LeagueTable.save(vm.leagueTable, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:leagueTableUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LeagueTableDetailController', LeagueTableDetailController);\r\n\r\n    LeagueTableDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'LeagueTable', 'Competition'];\r\n\r\n    function LeagueTableDetailController($scope, $rootScope, $stateParams, previousState, entity, LeagueTable, Competition) {\r\n        var vm = this;\r\n\r\n        vm.leagueTable = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:leagueTableUpdate', function(event, result) {\r\n            vm.leagueTable = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LeagueTableDeleteController',LeagueTableDeleteController);\r\n\r\n    LeagueTableDeleteController.$inject = ['$uibModalInstance', 'entity', 'LeagueTable'];\r\n\r\n    function LeagueTableDeleteController($uibModalInstance, entity, LeagueTable) {\r\n        var vm = this;\r\n\r\n        vm.leagueTable = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            LeagueTable.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('league-table', {\r\n            parent: 'entity',\r\n            url: '/league-table?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'LeagueTables'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/league-table/league-tables.html',\r\n                    controller: 'LeagueTableController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('league-table-detail', {\r\n            parent: 'league-table',\r\n            url: '/league-table/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'LeagueTable'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/league-table/league-table-detail.html',\r\n                    controller: 'LeagueTableDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'LeagueTable', function($stateParams, LeagueTable) {\r\n                    return LeagueTable.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'league-table',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('league-table-detail.edit', {\r\n            parent: 'league-table-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/league-table/league-table-dialog.html',\r\n                    controller: 'LeagueTableDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['LeagueTable', function(LeagueTable) {\r\n                            return LeagueTable.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('league-table.new', {\r\n            parent: 'league-table',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/league-table/league-table-dialog.html',\r\n                    controller: 'LeagueTableDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                position: null,\r\n                                teamname: null,\r\n                                played: null,\r\n                                wins: null,\r\n                                draws: null,\r\n                                losses: null,\r\n                                goalsfor: null,\r\n                                goalsagainst: null,\r\n                                points: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('league-table', null, { reload: 'league-table' });\r\n                }, function() {\r\n                    $state.go('league-table');\r\n                });\r\n            }]\r\n        })\r\n        .state('league-table.edit', {\r\n            parent: 'league-table',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/league-table/league-table-dialog.html',\r\n                    controller: 'LeagueTableDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['LeagueTable', function(LeagueTable) {\r\n                            return LeagueTable.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('league-table', null, { reload: 'league-table' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('league-table.delete', {\r\n            parent: 'league-table',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/league-table/league-table-delete-dialog.html',\r\n                    controller: 'LeagueTableDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['LeagueTable', function(LeagueTable) {\r\n                            return LeagueTable.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('league-table', null, { reload: 'league-table' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('LeagueTable', LeagueTable);\r\n\r\n    LeagueTable.$inject = ['$resource'];\r\n\r\n    function LeagueTable ($resource) {\r\n        var resourceUrl =  'api/league-tables/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LeagueTableController', LeagueTableController);\r\n\r\n    LeagueTableController.$inject = ['$state', 'LeagueTable', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function LeagueTableController($state, LeagueTable, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            LeagueTable.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.leagueTables = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JobDialogController', JobDialogController);\r\n\r\n    JobDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Job'];\r\n\r\n    function JobDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Job) {\r\n        var vm = this;\r\n\r\n        vm.job = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.job.id !== null) {\r\n                Job.update(vm.job, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Job.save(vm.job, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:jobUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JobDetailController', JobDetailController);\r\n\r\n    JobDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Job'];\r\n\r\n    function JobDetailController($scope, $rootScope, $stateParams, previousState, entity, Job) {\r\n        var vm = this;\r\n\r\n        vm.job = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:jobUpdate', function(event, result) {\r\n            vm.job = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JobDeleteController',JobDeleteController);\r\n\r\n    JobDeleteController.$inject = ['$uibModalInstance', 'entity', 'Job'];\r\n\r\n    function JobDeleteController($uibModalInstance, entity, Job) {\r\n        var vm = this;\r\n\r\n        vm.job = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Job.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('job', {\r\n            parent: 'entity',\r\n            url: '/job?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Jobs'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/job/jobs.html',\r\n                    controller: 'JobController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('job-detail', {\r\n            parent: 'job',\r\n            url: '/job/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Job'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/job/job-detail.html',\r\n                    controller: 'JobDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Job', function($stateParams, Job) {\r\n                    return Job.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'job',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('job-detail.edit', {\r\n            parent: 'job-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/job/job-dialog.html',\r\n                    controller: 'JobDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Job', function(Job) {\r\n                            return Job.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('job.new', {\r\n            parent: 'job',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/job/job-dialog.html',\r\n                    controller: 'JobDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('job', null, { reload: 'job' });\r\n                }, function() {\r\n                    $state.go('job');\r\n                });\r\n            }]\r\n        })\r\n        .state('job.edit', {\r\n            parent: 'job',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/job/job-dialog.html',\r\n                    controller: 'JobDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Job', function(Job) {\r\n                            return Job.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('job', null, { reload: 'job' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('job.delete', {\r\n            parent: 'job',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/job/job-delete-dialog.html',\r\n                    controller: 'JobDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Job', function(Job) {\r\n                            return Job.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('job', null, { reload: 'job' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Job', Job);\r\n\r\n    Job.$inject = ['$resource'];\r\n\r\n    function Job ($resource) {\r\n        var resourceUrl =  'api/jobs/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JobController', JobController);\r\n\r\n    JobController.$inject = ['$state', 'Job', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function JobController($state, Job, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Job.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.jobs = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('entity', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('CompetitionDialogController', CompetitionDialogController);\r\n\r\n    CompetitionDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Competition', 'Season'];\r\n\r\n    function CompetitionDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Competition, Season) {\r\n        var vm = this;\r\n\r\n        vm.competition = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n        vm.seasons = Season.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.competition.id !== null) {\r\n                Competition.update(vm.competition, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Competition.save(vm.competition, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:competitionUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('CompetitionDetailController', CompetitionDetailController);\r\n\r\n    CompetitionDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Competition', 'Season'];\r\n\r\n    function CompetitionDetailController($scope, $rootScope, $stateParams, previousState, entity, Competition, Season) {\r\n        var vm = this;\r\n\r\n        vm.competition = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:competitionUpdate', function(event, result) {\r\n            vm.competition = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('CompetitionDeleteController',CompetitionDeleteController);\r\n\r\n    CompetitionDeleteController.$inject = ['$uibModalInstance', 'entity', 'Competition'];\r\n\r\n    function CompetitionDeleteController($uibModalInstance, entity, Competition) {\r\n        var vm = this;\r\n\r\n        vm.competition = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Competition.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('competition', {\r\n            parent: 'entity',\r\n            url: '/competition?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Competitions'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/competition/competitions.html',\r\n                    controller: 'CompetitionController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('competition-detail', {\r\n            parent: 'competition',\r\n            url: '/competition/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Competition'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/competition/competition-detail.html',\r\n                    controller: 'CompetitionDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Competition', function($stateParams, Competition) {\r\n                    return Competition.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'competition',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('competition-detail.edit', {\r\n            parent: 'competition-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/competition/competition-dialog.html',\r\n                    controller: 'CompetitionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Competition', function(Competition) {\r\n                            return Competition.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('competition.new', {\r\n            parent: 'competition',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/competition/competition-dialog.html',\r\n                    controller: 'CompetitionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('competition', null, { reload: 'competition' });\r\n                }, function() {\r\n                    $state.go('competition');\r\n                });\r\n            }]\r\n        })\r\n        .state('competition.edit', {\r\n            parent: 'competition',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/competition/competition-dialog.html',\r\n                    controller: 'CompetitionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Competition', function(Competition) {\r\n                            return Competition.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('competition', null, { reload: 'competition' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('competition.delete', {\r\n            parent: 'competition',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/competition/competition-delete-dialog.html',\r\n                    controller: 'CompetitionDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Competition', function(Competition) {\r\n                            return Competition.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('competition', null, { reload: 'competition' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Competition', Competition);\r\n\r\n    Competition.$inject = ['$resource'];\r\n\r\n    function Competition ($resource) {\r\n        var resourceUrl =  'api/competitions/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('CompetitionController', CompetitionController);\r\n\r\n    CompetitionController.$inject = ['$state', 'Competition', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function CompetitionController($state, Competition, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Competition.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.competitions = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .filter('words', words);\r\n\r\n    function words() {\r\n        return wordsFilter;\r\n\r\n        function wordsFilter(input, words) {\r\n            if (isNaN(words)) {\r\n                return input;\r\n            }\r\n            if (words <= 0) {\r\n                return '';\r\n            }\r\n            if (input) {\r\n                var inputWords = input.split(/\\s+/);\r\n                if (inputWords.length > words) {\r\n                    input = inputWords.slice(0, words).join(' ') + '...';\r\n                }\r\n            }\r\n            return input;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .filter('characters', characters);\r\n\r\n    function characters () {\r\n        return charactersFilter;\r\n\r\n        function charactersFilter(input, chars, breakOnWord) {\r\n            if (isNaN(chars)) {\r\n                return input;\r\n            }\r\n            if (chars <= 0) {\r\n                return '';\r\n            }\r\n            if (input && input.length > chars) {\r\n                input = input.substring(0, chars);\r\n\r\n                if (!breakOnWord) {\r\n                    var lastspace = input.lastIndexOf(' ');\r\n                    // Get last space\r\n                    if (lastspace !== -1) {\r\n                        input = input.substr(0, lastspace);\r\n                    }\r\n                } else {\r\n                    while (input.charAt(input.length-1) === ' ') {\r\n                        input = input.substr(0, input.length - 1);\r\n                    }\r\n                }\r\n                return input + '...';\r\n            }\r\n            return input;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('jhSortBy', jhSortBy);\r\n\r\n    function jhSortBy() {\r\n        var directive = {\r\n            restrict: 'A',\r\n            scope: false,\r\n            require: '^jhSort',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs, parentCtrl) {\r\n            element.bind('click', function () {\r\n                parentCtrl.sort(attrs.jhSortBy);\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('jhSort', jhSort);\r\n\r\n    function jhSort () {\r\n        var directive = {\r\n            restrict: 'A',\r\n            scope: {\r\n                predicate: '=jhSort',\r\n                ascending: '=',\r\n                callback: '&'\r\n            },\r\n            controller: SortController,\r\n            controllerAs: 'vm',\r\n            bindToController: true\r\n        };\r\n\r\n        return directive;\r\n    }\r\n\r\n    SortController.$inject = ['$scope', '$element'];\r\n\r\n    function SortController ($scope, $element) {\r\n        var vm = this;\r\n\r\n        vm.applyClass = applyClass;\r\n        vm.resetClasses = resetClasses;\r\n        vm.sort = sort;\r\n        vm.triggerApply = triggerApply;\r\n\r\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\r\n        vm.triggerApply();\r\n\r\n        function applyClass (element) {\r\n            var thisIcon = element.find('span.glyphicon'),\r\n                sortIcon = 'glyphicon-sort',\r\n                sortAsc = 'glyphicon-sort-by-attributes',\r\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\r\n                remove = sortIcon + ' ' + sortDesc,\r\n                add = sortAsc;\r\n            if (!vm.ascending) {\r\n                remove = sortIcon + ' ' + sortAsc;\r\n                add = sortDesc;\r\n            }\r\n            vm.resetClasses();\r\n            thisIcon.removeClass(remove);\r\n            thisIcon.addClass(add);\r\n        }\r\n\r\n        function resetClasses () {\r\n            var allThIcons = $element.find('span.glyphicon'),\r\n                sortIcon = 'glyphicon-sort',\r\n                sortAsc = 'glyphicon-sort-by-attributes',\r\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\r\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\r\n            allThIcons.addClass(sortIcon);\r\n        }\r\n\r\n        function sort (field) {\r\n            if (field !== vm.predicate) {\r\n                vm.ascending = true;\r\n            } else {\r\n                vm.ascending = !vm.ascending;\r\n            }\r\n            vm.predicate = field;\r\n            $scope.$apply();\r\n            vm.callback();\r\n        }\r\n\r\n        function triggerApply (values)  {\r\n            vm.resetClasses();\r\n            if (values && values[0] !== '_score') {\r\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function(){\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('ParseLinks', ParseLinks);\r\n\r\n    function ParseLinks () {\r\n\r\n        var service = {\r\n            parse : parse\r\n        };\r\n\r\n        return service;\r\n\r\n        function parse(header) {\r\n            if (header.length === 0) {\r\n                throw new Error('input must not be of zero length');\r\n            }\r\n\r\n            // Split parts by comma\r\n            var parts = header.split(',');\r\n            var links = {};\r\n            // Parse each part into a named link\r\n            angular.forEach(parts, function(p) {\r\n                var section = p.split('>;');\r\n                if (section.length !== 2) {\r\n                    throw new Error('section could not be split on \">;\"');\r\n                }\r\n                var url = section[0].replace(/<(.*)/, '$1').trim();\r\n                var queryString = {};\r\n                url.replace(\r\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\r\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\r\n                );\r\n                var page = queryString.page;\r\n                if (angular.isString(page)) {\r\n                    page = parseInt(page);\r\n                }\r\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\r\n                links[name] = page;\r\n            });\r\n            return links;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('PaginationUtil', PaginationUtil);\r\n\r\n    function PaginationUtil () {\r\n\r\n        var service = {\r\n            parseAscending : parseAscending,\r\n            parsePage : parsePage,\r\n            parsePredicate : parsePredicate\r\n        };\r\n\r\n        return service;\r\n\r\n        function parseAscending (sort) {\r\n            var sortArray = sort.split(',');\r\n            if (sortArray.length > 1){\r\n                return sort.split(',').slice(-1)[0] === 'asc';\r\n            } else {\r\n                // default to true if no sort defined\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // query params are strings, and need to be parsed\r\n        function parsePage (page) {\r\n            return parseInt(page);\r\n        }\r\n\r\n        // sort can be in the format `id,asc` or `id`\r\n        function parsePredicate (sort) {\r\n            var sortArray = sort.split(',');\r\n            if (sortArray.length > 1){\r\n                sortArray.pop();\r\n            }\r\n            return sortArray.join(',');\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    var jhiItemCount = {\r\n        template: '<div class=\"info\">' +\r\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) === 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\r\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\r\n                    'of {{$ctrl.queryCount}} items.' +\r\n                '</div>',\r\n        bindings: {\r\n            page: '<',\r\n            queryCount: '<total',\r\n            itemsPerPage: '<'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .component('jhiItemCount', jhiItemCount);\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('DateUtils', DateUtils);\r\n\r\n    DateUtils.$inject = ['$filter'];\r\n\r\n    function DateUtils($filter) {\r\n\r\n        var service = {\r\n            convertDateTimeFromServer: convertDateTimeFromServer,\r\n            convertLocalDateFromServer: convertLocalDateFromServer,\r\n            convertLocalDateToServer: convertLocalDateToServer,\r\n            dateformat: dateformat\r\n        };\r\n\r\n        return service;\r\n\r\n        function convertDateTimeFromServer(date) {\r\n            if (date) {\r\n                return new Date(date);\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        function convertLocalDateFromServer(date) {\r\n            if (date) {\r\n                var dateString = date.split('-');\r\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function convertLocalDateToServer(date) {\r\n            if (date) {\r\n                return $filter('date')(date, 'yyyy-MM-dd');\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        function dateformat() {\r\n            return 'yyyy-MM-dd';\r\n        }\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('DataUtils', DataUtils);\r\n\r\n    DataUtils.$inject = ['$window'];\r\n\r\n    function DataUtils ($window) {\r\n\r\n        var service = {\r\n            abbreviate: abbreviate,\r\n            byteSize: byteSize,\r\n            openFile: openFile,\r\n            toBase64: toBase64\r\n        };\r\n\r\n        return service;\r\n\r\n        function abbreviate (text) {\r\n            if (!angular.isString(text)) {\r\n                return '';\r\n            }\r\n            if (text.length < 30) {\r\n                return text;\r\n            }\r\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\r\n        }\r\n\r\n        function byteSize (base64String) {\r\n            if (!angular.isString(base64String)) {\r\n                return '';\r\n            }\r\n\r\n            function endsWith(suffix, str) {\r\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n            }\r\n\r\n            function paddingSize(base64String) {\r\n                if (endsWith('==', base64String)) {\r\n                    return 2;\r\n                }\r\n                if (endsWith('=', base64String)) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            function size(base64String) {\r\n                return base64String.length / 4 * 3 - paddingSize(base64String);\r\n            }\r\n\r\n            function formatAsBytes(size) {\r\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\r\n            }\r\n\r\n            return formatAsBytes(size(base64String));\r\n        }\r\n\r\n        function openFile (type, data) {\r\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\r\n        }\r\n\r\n        function toBase64 (file, cb) {\r\n            var fileReader = new FileReader();\r\n            fileReader.readAsDataURL(file);\r\n            fileReader.onload = function (e) {\r\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\r\n                cb(base64Data);\r\n            };\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .filter('capitalize', capitalize);\r\n\r\n    function capitalize() {\r\n        return capitalizeFilter;\r\n\r\n        function capitalizeFilter (input) {\r\n            if (input !== null) {\r\n                input = input.toLowerCase();\r\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\r\n            }\r\n            return input;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    /*jshint bitwise: false*/\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Base64', Base64);\r\n\r\n    function Base64 () {\r\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\r\n            'QRSTUVWXYZabcdef' +\r\n            'ghijklmnopqrstuv' +\r\n            'wxyz0123456789+/' +\r\n            '=';\r\n\r\n        var service = {\r\n            decode : decode,\r\n            encode : encode\r\n        };\r\n\r\n        return service;\r\n\r\n        function encode (input) {\r\n            var output = '',\r\n                chr1, chr2, chr3,\r\n                enc1, enc2, enc3, enc4,\r\n                i = 0;\r\n\r\n            while (i < input.length) {\r\n                chr1 = input.charCodeAt(i++);\r\n                chr2 = input.charCodeAt(i++);\r\n                chr3 = input.charCodeAt(i++);\r\n\r\n                enc1 = chr1 >> 2;\r\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n                enc4 = chr3 & 63;\r\n\r\n                if (isNaN(chr2)) {\r\n                    enc3 = enc4 = 64;\r\n                } else if (isNaN(chr3)) {\r\n                    enc4 = 64;\r\n                }\r\n\r\n                output = output +\r\n                    keyStr.charAt(enc1) +\r\n                    keyStr.charAt(enc2) +\r\n                    keyStr.charAt(enc3) +\r\n                    keyStr.charAt(enc4);\r\n            }\r\n\r\n            return output;\r\n        }\r\n\r\n        function decode (input) {\r\n            var output = '',\r\n                chr1, chr2, chr3,\r\n                enc1, enc2, enc3, enc4,\r\n                i = 0;\r\n\r\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\r\n\r\n            while (i < input.length) {\r\n                enc1 = keyStr.indexOf(input.charAt(i++));\r\n                enc2 = keyStr.indexOf(input.charAt(i++));\r\n                enc3 = keyStr.indexOf(input.charAt(i++));\r\n                enc4 = keyStr.indexOf(input.charAt(i++));\r\n\r\n                chr1 = (enc1 << 2) | (enc2 >> 4);\r\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n                chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n                output = output + String.fromCharCode(chr1);\r\n\r\n                if (enc3 !== 64) {\r\n                    output = output + String.fromCharCode(chr2);\r\n                }\r\n                if (enc4 !== 64) {\r\n                    output = output + String.fromCharCode(chr3);\r\n                }\r\n            }\r\n\r\n            return output;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('LoginService', LoginService);\r\n\r\n    LoginService.$inject = ['$uibModal'];\r\n\r\n    function LoginService ($uibModal) {\r\n        var service = {\r\n            open: open\r\n        };\r\n\r\n        var modalInstance = null;\r\n        var resetModal = function () {\r\n            modalInstance = null;\r\n        };\r\n\r\n        return service;\r\n\r\n        function open () {\r\n            if (modalInstance !== null) return;\r\n            modalInstance = $uibModal.open({\r\n                animation: true,\r\n                templateUrl: 'app/components/login/login.html',\r\n                controller: 'LoginController',\r\n                controllerAs: 'vm'\r\n            });\r\n            modalInstance.result.then(\r\n                resetModal,\r\n                resetModal\r\n            );\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LoginController', LoginController);\r\n\r\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\r\n\r\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\r\n        var vm = this;\r\n\r\n        vm.authenticationError = false;\r\n        vm.cancel = cancel;\r\n        vm.credentials = {};\r\n        vm.login = login;\r\n        vm.password = null;\r\n        vm.register = register;\r\n        vm.rememberMe = true;\r\n        vm.requestResetPassword = requestResetPassword;\r\n        vm.username = null;\r\n\r\n        $timeout(function (){angular.element('#username').focus();});\r\n\r\n        function cancel () {\r\n            vm.credentials = {\r\n                username: null,\r\n                password: null,\r\n                rememberMe: true\r\n            };\r\n            vm.authenticationError = false;\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function login (event) {\r\n            event.preventDefault();\r\n            Auth.login({\r\n                username: vm.username,\r\n                password: vm.password,\r\n                rememberMe: vm.rememberMe\r\n            }).then(function () {\r\n                vm.authenticationError = false;\r\n                $uibModalInstance.close();\r\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\r\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\r\n                    $state.go('home');\r\n                }\r\n\r\n                $rootScope.$broadcast('authenticationSuccess');\r\n\r\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\r\n                // since login is successful, go to stored previousState and clear previousState\r\n                if (Auth.getPreviousState()) {\r\n                    var previousState = Auth.getPreviousState();\r\n                    Auth.resetPreviousState();\r\n                    $state.go(previousState.name, previousState.params);\r\n                }\r\n            }).catch(function () {\r\n                vm.authenticationError = true;\r\n            });\r\n        }\r\n\r\n        function register () {\r\n            $uibModalInstance.dismiss('cancel');\r\n            $state.go('register');\r\n        }\r\n\r\n        function requestResetPassword () {\r\n            $uibModalInstance.dismiss('cancel');\r\n            $state.go('requestReset');\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('showValidation', showValidation);\r\n\r\n    function showValidation () {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: 'form',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc (scope, element, attrs, formCtrl) {\r\n            element.find('.form-group').each(function() {\r\n                var $formGroup = angular.element(this);\r\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\r\n\r\n                if ($inputs.length > 0) {\r\n                    $inputs.each(function() {\r\n                        var $input = angular.element(this);\r\n                        var inputName = $input.attr('name');\r\n                        scope.$watch(function() {\r\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\r\n                        }, function(isInvalid) {\r\n                            $formGroup.toggleClass('has-error', isInvalid);\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .constant('paginationConstants', {\r\n            'itemsPerPage': 20\r\n        });\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('minbytes', minbytes);\r\n\r\n    function minbytes () {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: '?ngModel',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc (scope, element, attrs, ngModel) {\r\n            if (!ngModel) {\r\n                return;\r\n            }\r\n\r\n            ngModel.$validators.minbytes = function (modelValue) {\r\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\r\n            };\r\n        }\r\n\r\n        function endsWith(suffix, str) {\r\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n        }\r\n\r\n        function paddingSize(base64String) {\r\n            if (endsWith('==', base64String)) {\r\n                return 2;\r\n            }\r\n            if (endsWith('=', base64String)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        function numberOfBytes(base64String) {\r\n            return base64String.length / 4 * 3 - paddingSize(base64String);\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('maxbytes', maxbytes);\r\n\r\n    function maxbytes () {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: '?ngModel',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc (scope, element, attrs, ngModel) {\r\n            if (!ngModel) {\r\n                return;\r\n            }\r\n\r\n            ngModel.$validators.maxbytes = function (modelValue) {\r\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\r\n            };\r\n        }\r\n\r\n        function endsWith(suffix, str) {\r\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n        }\r\n\r\n        function paddingSize(base64String) {\r\n            if (endsWith('==', base64String)) {\r\n                return 2;\r\n            }\r\n            if (endsWith('=', base64String)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        function numberOfBytes(base64String) {\r\n            return base64String.length / 4 * 3 - paddingSize(base64String);\r\n        }\r\n    }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    var jhiAlertError = {\r\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\r\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\r\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\r\n                        '</div>' +\r\n                  '</div>',\r\n        controller: jhiAlertErrorController\r\n    };\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .component('jhiAlertError', jhiAlertError);\r\n\r\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\r\n\r\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\r\n        var vm = this;\r\n\r\n        vm.alerts = [];\r\n\r\n        function addErrorAlert (message, key, data) {\r\n            vm.alerts.push(\r\n                AlertService.add(\r\n                    {\r\n                        type: 'danger',\r\n                        msg: message,\r\n                        timeout: 5000,\r\n                        toast: AlertService.isToast(),\r\n                        scoped: true\r\n                    },\r\n                    vm.alerts\r\n                )\r\n            );\r\n        }\r\n\r\n        var cleanHttpErrorListener = $rootScope.$on('poliApp.httpError', function (event, httpResponse) {\r\n            var i;\r\n            event.stopPropagation();\r\n            switch (httpResponse.status) {\r\n            // connection refused, server not reachable\r\n            case 0:\r\n                addErrorAlert('Server not reachable','error.server.not.reachable');\r\n                break;\r\n\r\n            case 400:\r\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\r\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\r\n                }).sort();\r\n                var errorHeader = httpResponse.headers(headers[0]);\r\n                var entityKey = httpResponse.headers(headers[1]);\r\n                if (angular.isString(errorHeader)) {\r\n                    var entityName = entityKey;\r\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\r\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\r\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\r\n                        var fieldError = httpResponse.data.fieldErrors[i];\r\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\r\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\r\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\r\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\r\n                    }\r\n                } else if (httpResponse.data && httpResponse.data.message) {\r\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\r\n                } else {\r\n                    addErrorAlert(httpResponse.data);\r\n                }\r\n                break;\r\n\r\n            case 404:\r\n                addErrorAlert('Not found','error.url.not.found');\r\n                break;\r\n\r\n            default:\r\n                if (httpResponse.data && httpResponse.data.message) {\r\n                    addErrorAlert(httpResponse.data.message);\r\n                } else {\r\n                    addErrorAlert(angular.toJson(httpResponse));\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.$on('$destroy', function () {\r\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\r\n                cleanHttpErrorListener();\r\n                vm.alerts = [];\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .provider('AlertService', AlertService);\r\n\r\n    function AlertService () {\r\n        this.toast = false;\r\n        /*jshint validthis: true */\r\n        this.$get = getService;\r\n\r\n        this.showAsToast = function(isToast) {\r\n            this.toast = isToast;\r\n        };\r\n\r\n        getService.$inject = ['$timeout', '$sce'];\r\n\r\n        function getService ($timeout, $sce) {\r\n            var toast = this.toast,\r\n                alertId = 0, // unique id for each alert. Starts from 0.\r\n                alerts = [],\r\n                timeout = 5000; // default timeout\r\n\r\n            return {\r\n                factory: factory,\r\n                isToast: isToast,\r\n                add: addAlert,\r\n                closeAlert: closeAlert,\r\n                closeAlertByIndex: closeAlertByIndex,\r\n                clear: clear,\r\n                get: get,\r\n                success: success,\r\n                error: error,\r\n                info: info,\r\n                warning : warning\r\n            };\r\n\r\n            function isToast() {\r\n                return toast;\r\n            }\r\n\r\n            function clear() {\r\n                alerts = [];\r\n            }\r\n\r\n            function get() {\r\n                return alerts;\r\n            }\r\n\r\n            function success(msg, params, position) {\r\n                return this.add({\r\n                    type: 'success',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: timeout,\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function error(msg, params, position) {\r\n                return this.add({\r\n                    type: 'danger',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: timeout,\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function warning(msg, params, position) {\r\n                return this.add({\r\n                    type: 'warning',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: timeout,\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function info(msg, params, position) {\r\n                return this.add({\r\n                    type: 'info',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: timeout,\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function factory(alertOptions) {\r\n                var alert = {\r\n                    type: alertOptions.type,\r\n                    msg: $sce.trustAsHtml(alertOptions.msg),\r\n                    id: alertOptions.alertId,\r\n                    timeout: alertOptions.timeout,\r\n                    toast: alertOptions.toast,\r\n                    position: alertOptions.position ? alertOptions.position : 'top right',\r\n                    scoped: alertOptions.scoped,\r\n                    close: function (alerts) {\r\n                        return closeAlert(this.id, alerts);\r\n                    }\r\n                };\r\n                if(!alert.scoped) {\r\n                    alerts.push(alert);\r\n                }\r\n                return alert;\r\n            }\r\n\r\n            function addAlert(alertOptions, extAlerts) {\r\n                alertOptions.alertId = alertId++;\r\n                var that = this;\r\n                var alert = this.factory(alertOptions);\r\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\r\n                    $timeout(function () {\r\n                        that.closeAlert(alertOptions.alertId, extAlerts);\r\n                    }, alertOptions.timeout);\r\n                }\r\n                return alert;\r\n            }\r\n\r\n            function closeAlert(id, extAlerts) {\r\n                var thisAlerts = extAlerts ? extAlerts : alerts;\r\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\r\n            }\r\n\r\n            function closeAlertByIndex(index, thisAlerts) {\r\n                return thisAlerts.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    var jhiAlert = {\r\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\r\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\r\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\r\n                        '</div>' +\r\n                  '</div>',\r\n        controller: jhiAlertController\r\n    };\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .component('jhiAlert', jhiAlert);\r\n\r\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\r\n\r\n    function jhiAlertController($scope, AlertService) {\r\n        var vm = this;\r\n\r\n        vm.alerts = AlertService.get();\r\n        $scope.$on('$destroy', function () {\r\n            vm.alerts = [];\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubTeam', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubStaff', {\r\n            parent: 'clubTeam',\r\n            url: '/clubStaff',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubTeam/clubStaff/clubStaff.html',\r\n                    controller: 'ClubStaffController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n             params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        });\r\n    }    \r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Staff', Staff);\r\n\r\n    Staff.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Staff ($resource, DateUtils) {\r\n        var resourceUrl =  'api/staff/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.dateofbirth = DateUtils.convertLocalDateFromServer(data.dateofbirth);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubStaffController', ClubStaffController);\r\n\r\n    ClubStaffController.$inject = ['$state', 'DataUtils', 'Staff', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubStaffController($state, DataUtils, Staff, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        vm.showStaffDetails = function(staff) {\r\n            vm.selectedPlayer = staff;\r\n            $('#staffDetailsModal').modal('show');\r\n        };\r\n\r\n        loadAll();\r\n        function loadAll () {\r\n            Staff.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.staff = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubPlayers', {\r\n            parent: 'clubTeam',\r\n            url: '/clubPlayers',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubTeam/clubPlayers/clubPlayers.html',\r\n                    controller: 'ClubPlayersController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        });\r\n    }    \r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Player', Player);\r\n\r\n    Player.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Player ($resource, DateUtils) {\r\n        var resourceUrl =  'api/players/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.dateofbirth = DateUtils.convertLocalDateFromServer(data.dateofbirth);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubPlayersController', ClubPlayersController);\r\n\r\n    ClubPlayersController.$inject = ['$state', 'DataUtils', 'Player', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubPlayersController($state, DataUtils, Player, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        vm.showPlayerDetails = function(player) {\r\n            vm.selectedPlayer = player;\r\n            $('#playerDetailsModal').modal('show');\r\n        };\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Player.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.players = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubSchedule', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubRanking', {\r\n            parent: 'clubSchedule',\r\n            url: '/clubRanking',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubSchedule/clubRanking/clubRanking.html',\r\n                    controller: 'ClubRankingController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        });\r\n    }    \r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('LeagueTable', LeagueTable);\r\n\r\n    LeagueTable.$inject = ['$resource'];\r\n\r\n    function LeagueTable ($resource) {\r\n        var resourceUrl =  'api/league-tables/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubRankingController', ClubRankingController);\r\n\r\n    ClubRankingController.$inject = ['$scope', '$state', 'LeagueTable', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubRankingController($scope, $state, LeagueTable, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll() {\r\n            LeagueTable.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                if (vm.predicate == \"id\")\r\n                    data.sort(function(x, y) { return x.position > y.position ? 1 : -1; });\r\n                vm.leagueTables = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        $scope.setFontWeight = function (team) {\r\n            if (team.teamname == 'Politehnica București') {\r\n                return { fontWeight: \"bold\" }\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubMatches', {\r\n            parent: 'clubSchedule',\r\n            url: '/clubMatches',\r\n            data: {\r\n                 authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubSchedule/clubMatches/clubMatches.html',\r\n                    controller: 'ClubMatchesController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Match', Match);\r\n\r\n    Match.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Match($resource, DateUtils) {\r\n        var resourceUrl = 'api/matches/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true },\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.matchdate = DateUtils.convertLocalDateFromServer(data.matchdate);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.matchdate = DateUtils.convertLocalDateToServer(copy.matchdate);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.matchdate = DateUtils.convertLocalDateToServer(copy.matchdate);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubMatchesController', ClubMatchesController);\r\n\r\n    ClubMatchesController.$inject = ['$state', 'Match', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubMatchesController($state, Match, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Match.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                console.log(data);\r\n                vm.matches = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubPartners', {\r\n            parent: 'app',\r\n            url: '/clubPartners',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubPartners/clubPartners.html',\r\n                    controller: 'ClubPartnersController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubPartnersController', ClubPartnersController);\r\n\r\n    ClubPartnersController.$inject = ['$state', 'DataUtils', 'Partner', 'ParseLinks', 'AlertService'];\r\n\r\n    function ClubPartnersController($state, DataUtils, Partner, ParseLinks, AlertService) {\r\n\r\n        var vm = this;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll() {\r\n            Partner.query({\r\n            }, onSuccess, onError);\r\n            function onSuccess(data, headers) {\r\n                vm.partners = data;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Partner', Partner);\r\n\r\n    Partner.$inject = ['$resource'];\r\n\r\n    function Partner ($resource) {\r\n        var resourceUrl =  'api/partners/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubNews', {\r\n            parent: 'app',\r\n            url: '/clubNews',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubNews/clubNews.html',\r\n                    controller: 'ClubNewsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n            .state('clubNews-detail', {\r\n                parent: 'clubNews',\r\n                url: '/clubNews/{id}',\r\n                data: {\r\n                    authorities: []\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/clubNews/clubNews-detail.html',\r\n                        controller: 'ClubNewsDetailController',\r\n                        controllerAs: 'vm'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    entity: ['$stateParams', 'News', function ($stateParams, News) {\r\n                        return News.get({ id: $stateParams.id }).$promise;\r\n                    }],\r\n                    previousState: [\"$state\", function ($state) {\r\n                        var currentStateData = {\r\n                            name: $state.current.name || 'clubNews',\r\n                            params: $state.params,\r\n                            url: $state.href($state.current.name, $state.params)\r\n                        };\r\n                        return currentStateData;\r\n                    }]\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('News', News);\r\n\r\n    News.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function News ($resource, DateUtils) {\r\n        var resourceUrl =  'api/news/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.createdDate = DateUtils.convertDateTimeFromServer(data.createdDate);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubNewsController', ClubNewsController);\r\n\r\n    ClubNewsController.$inject = ['$state', 'DataUtils', 'News', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubNewsController($state, DataUtils, News, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            News.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.news = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubNewsDetailController', ClubNewsDetailController);\r\n\r\n    ClubNewsDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'News'];\r\n\r\n    function ClubNewsDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, News) {\r\n        var vm = this;\r\n\r\n        vm.news = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubContact', {\r\n            parent: 'app',\r\n            url: '/clubContact',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubContact/clubContact.html',\r\n                    controller: 'ClubContactController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubContactController', ClubContactController);\r\n\r\n    ClubContactController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\r\n\r\n    function ClubContactController ($scope, Principal, LoginService, $state) {\r\n        var vm = this;\r\n\r\n        vm.account = null;\r\n        vm.isAuthenticated = null;\r\n        vm.login = LoginService.open;\r\n        vm.register = register;\r\n        $scope.$on('authenticationSuccess', function() {\r\n            getAccount();\r\n        });\r\n\r\n        getAccount();\r\n\r\n        function getAccount() {\r\n            Principal.identity().then(function(account) {\r\n                vm.account = account;\r\n                vm.isAuthenticated = Principal.isAuthenticated;\r\n            });\r\n        }\r\n        function register () {\r\n            $state.go('register');\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubStadium', {\r\n            parent: 'club',\r\n            url: '/clubStadium',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/club/clubStadium/clubStadium.html',\r\n                    controller: 'ClubStadiumController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }    \r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubStadiumController', ClubStadiumController);\r\n\r\n    ClubStadiumController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\r\n\r\n    function ClubStadiumController ($scope, Principal, LoginService, $state) {\r\n        var vm = this;\r\n\r\n        vm.account = null;\r\n        vm.isAuthenticated = null;\r\n        vm.login = LoginService.open;\r\n        vm.register = register;\r\n        $scope.$on('authenticationSuccess', function() {\r\n            getAccount();\r\n        });\r\n\r\n        getAccount();\r\n\r\n        function getAccount() {\r\n            Principal.identity().then(function(account) {\r\n                vm.account = account;\r\n                vm.isAuthenticated = Principal.isAuthenticated;\r\n            });\r\n        }\r\n        function register () {\r\n            $state.go('register');\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubHistory', {\r\n            parent: 'club',\r\n            url: '/clubHistory',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/club/clubHistory/clubHistory.html',\r\n                    controller: 'ClubHistoryController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }    \r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubHistoryController', ClubHistoryController);\r\n\r\n    ClubHistoryController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\r\n\r\n    function ClubHistoryController ($scope, Principal, LoginService, $state) {\r\n        var vm = this;\r\n\r\n        vm.account = null;\r\n        vm.isAuthenticated = null;\r\n        vm.login = LoginService.open;\r\n        vm.register = register;\r\n        $scope.$on('authenticationSuccess', function() {\r\n            getAccount();\r\n        });\r\n\r\n        getAccount();\r\n\r\n        function getAccount() {\r\n            Principal.identity().then(function(account) {\r\n                vm.account = account;\r\n                vm.isAuthenticated = Principal.isAuthenticated;\r\n            });\r\n        }\r\n        function register () {\r\n            $state.go('register');\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('club', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('notificationInterceptor', notificationInterceptor);\r\n\r\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\r\n\r\n    function notificationInterceptor ($q, AlertService) {\r\n        var service = {\r\n            response: response\r\n        };\r\n\r\n        return service;\r\n\r\n        function response (response) {\r\n            var headers = Object.keys(response.headers()).filter(function (header) {\r\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\r\n            }).sort();\r\n            var alertKey = response.headers(headers[0]);\r\n            if (angular.isString(alertKey)) {\r\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\r\n\r\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\r\n\r\n    function errorHandlerInterceptor ($q, $rootScope) {\r\n        var service = {\r\n            responseError: responseError\r\n        };\r\n\r\n        return service;\r\n\r\n        function responseError (response) {\r\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\r\n                $rootScope.$emit('poliApp.httpError', response);\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\r\n\r\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$localStorage', '$sessionStorage'];\r\n\r\n    function authExpiredInterceptor($rootScope, $q, $injector, $localStorage, $sessionStorage) {\r\n        var service = {\r\n            responseError: responseError\r\n        };\r\n\r\n        return service;\r\n\r\n        function responseError(response) {\r\n            if (response.status === 401) {\r\n                delete $localStorage.authenticationToken;\r\n                delete $sessionStorage.authenticationToken;\r\n                var Principal = $injector.get('Principal');\r\n                if (Principal.isAuthenticated()) {\r\n                    var Auth = $injector.get('Auth');\r\n                    Auth.authorize(true);\r\n                }\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('authInterceptor', authInterceptor);\r\n\r\n    authInterceptor.$inject = ['$rootScope', '$q', '$location', '$localStorage', '$sessionStorage'];\r\n\r\n    function authInterceptor ($rootScope, $q, $location, $localStorage, $sessionStorage) {\r\n        var service = {\r\n            request: request\r\n        };\r\n\r\n        return service;\r\n\r\n        function request (config) {\r\n            /*jshint camelcase: false */\r\n            config.headers = config.headers || {};\r\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\r\n            if (token) {\r\n                config.headers.Authorization = 'Bearer ' + token;\r\n            }\r\n            return config;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('stateHandler', stateHandler);\r\n\r\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\r\n        'Auth', 'Principal', 'VERSION'];\r\n\r\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\r\n        Auth, Principal, VERSION) {\r\n        return {\r\n            initialize: initialize\r\n        };\r\n\r\n        function initialize() {\r\n            $rootScope.VERSION = VERSION;\r\n\r\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\r\n                $rootScope.toState = toState;\r\n                $rootScope.toStateParams = toStateParams;\r\n                $rootScope.fromState = fromState;\r\n\r\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\r\n                if (toState.external) {\r\n                    event.preventDefault();\r\n                    $window.open(toState.url, '_self');\r\n                }\r\n\r\n                if (Principal.isIdentityResolved()) {\r\n                    Auth.authorize();\r\n                }\r\n\r\n            });\r\n\r\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\r\n                var titleKey = 'Politehnica București' ;\r\n\r\n                // Set the page title key to the one configured in state or use default one\r\n                if (toState.data.pageTitle) {\r\n                    titleKey = toState.data.pageTitle;\r\n                }\r\n                $window.document.title = titleKey;\r\n            });\r\n\r\n            $rootScope.$on('$destroy', function () {\r\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\r\n                    stateChangeStart();\r\n                }\r\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\r\n                    stateChangeSuccess();\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(paginationConfig);\r\n\r\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\r\n\r\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\r\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\r\n        uibPaginationConfig.maxSize = 5;\r\n        uibPaginationConfig.boundaryLinks = true;\r\n        uibPaginationConfig.firstText = 'Prima pagina';\r\n        uibPaginationConfig.previousText = 'Pagina anterioara';\r\n        uibPaginationConfig.nextText = 'Pagina următoare';\r\n        uibPaginationConfig.lastText = 'Ultima pagina';\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(pagerConfig);\r\n\r\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\r\n\r\n    function pagerConfig(uibPagerConfig, paginationConstants) {\r\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\r\n        uibPagerConfig.previousText = 'Pagina anterioara';\r\n        uibPagerConfig.nextText = 'Pagina următoare';\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(localStorageConfig);\r\n\r\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\r\n\r\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\r\n        $localStorageProvider.setKeyPrefix('jhi-');\r\n        $sessionStorageProvider.setKeyPrefix('jhi-');\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(httpConfig);\r\n\r\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\r\n\r\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\r\n        //Cache everything except rest api requests\r\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\r\n\r\n        $urlRouterProvider.otherwise('/');\r\n\r\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\r\n        $httpProvider.interceptors.push('authExpiredInterceptor');\r\n        $httpProvider.interceptors.push('authInterceptor');\r\n        $httpProvider.interceptors.push('notificationInterceptor');\r\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\r\n\r\n        $urlMatcherFactoryProvider.type('boolean', {\r\n            name : 'boolean',\r\n            decode: function(val) { return val === true || val === 'true'; },\r\n            encode: function(val) { return val ? 1 : 0; },\r\n            equals: function(a, b) { return this.is(a) && a === b; },\r\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\r\n            pattern: /bool|true|0|1/\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(compileServiceConfig);\r\n\r\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\r\n\r\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\r\n        // disable debug data on prod profile to improve performance\r\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\r\n\r\n        /*\r\n        If you wish to debug an application with this information\r\n        then you should open up a debug console in the browser\r\n        then call this method directly in this console:\r\n\r\n\t\tangular.reloadWithDebugInfo();\r\n\t\t*/\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(alertServiceConfig);\r\n\r\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\r\n\r\n    function alertServiceConfig(AlertServiceProvider) {\r\n        // set below to true to make alerts look like toast\r\n        AlertServiceProvider.showAsToast(false);\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('app', {\r\n            abstract: true,\r\n            views: {\r\n                'navbar@': {\r\n                    templateUrl: 'app/layouts/navbar/navbar.html',\r\n                    controller: 'NavbarController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                authorize: ['Auth',\r\n                    function (Auth) {\r\n                        return Auth.authorize();\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('poliApp')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('BUILD_TIMESTAMP', 1502049329010)\n;\n})();\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('UserManagementDialogController',UserManagementDialogController);\r\n\r\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\r\n\r\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\r\n        var vm = this;\r\n\r\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\r\n        vm.clear = clear;\r\n        vm.languages = null;\r\n        vm.save = save;\r\n        vm.user = entity;\r\n\r\n\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            vm.isSaving = false;\r\n            $uibModalInstance.close(result);\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.user.id !== null) {\r\n                User.update(vm.user, onSaveSuccess, onSaveError);\r\n            } else {\r\n                vm.user.langKey = 'en';\r\n                User.save(vm.user, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('UserManagementDetailController', UserManagementDetailController);\r\n\r\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\r\n\r\n    function UserManagementDetailController($stateParams, User) {\r\n        var vm = this;\r\n\r\n        vm.load = load;\r\n        vm.user = {};\r\n\r\n        vm.load($stateParams.login);\r\n\r\n        function load(login) {\r\n            User.get({login: login}, function(result) {\r\n                vm.user = result;\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\r\n\r\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\r\n\r\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\r\n        var vm = this;\r\n\r\n        vm.user = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (login) {\r\n            User.delete({login: login},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('user-management', {\r\n            parent: 'admin',\r\n            url: '/user-management?page&sort',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Users'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/user-management/user-management.html',\r\n                    controller: 'UserManagementController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                }\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\r\n                    };\r\n                }]\r\n            }        })\r\n        .state('user-management.new', {\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\r\n                    controller: 'UserManagementDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                id: null, login: null, firstName: null, lastName: null, email: null,\r\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\r\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\r\n                                resetKey: null, authorities: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('user-management', null, { reload: true });\r\n                }, function() {\r\n                    $state.go('user-management');\r\n                });\r\n            }]\r\n        })\r\n        .state('user-management.edit', {\r\n            url: '/{login}/edit',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\r\n                    controller: 'UserManagementDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['User', function(User) {\r\n                            return User.get({login : $stateParams.login});\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('user-management', null, { reload: true });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('user-management-detail', {\r\n            parent: 'user-management',\r\n            url: '/{login}',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Politehnica București'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\r\n                    controller: 'UserManagementDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        })\r\n        .state('user-management.delete', {\r\n            url: '/{login}/delete',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\r\n                    controller: 'UserManagementDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['User', function(User) {\r\n                            return User.get({login : $stateParams.login});\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('user-management', null, { reload: true });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('UserManagementController', UserManagementController);\r\n\r\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\r\n\r\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\r\n        var vm = this;\r\n\r\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\r\n        vm.currentAccount = null;\r\n        vm.languages = null;\r\n        vm.loadAll = loadAll;\r\n        vm.setActive = setActive;\r\n        vm.users = [];\r\n        vm.page = 1;\r\n        vm.totalItems = null;\r\n        vm.clear = clear;\r\n        vm.links = null;\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.transition = transition;\r\n\r\n        vm.loadAll();\r\n        Principal.identity().then(function(account) {\r\n            vm.currentAccount = account;\r\n        });\r\n\r\n        function setActive (user, isActivated) {\r\n            user.activated = isActivated;\r\n            User.update(user, function () {\r\n                vm.loadAll();\r\n                vm.clear();\r\n            });\r\n        }\r\n\r\n        function loadAll () {\r\n            User.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n        }\r\n\r\n        function onSuccess(data, headers) {\r\n            vm.links = ParseLinks.parse(headers('link'));\r\n            vm.totalItems = headers('X-Total-Count');\r\n            vm.queryCount = vm.totalItems;\r\n            vm.page = pagingParams.page;\r\n            vm.users = data;\r\n        }\r\n\r\n        function onError(error) {\r\n            AlertService.error(error.data.message);\r\n        }\r\n\r\n        function clear () {\r\n            vm.user = {\r\n                id: null, login: null, firstName: null, lastName: null, email: null,\r\n                activated: null, langKey: null, createdBy: null, createdDate: null,\r\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\r\n                resetKey: null, authorities: null\r\n            };\r\n        }\r\n\r\n        function sort () {\r\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n            if (vm.predicate !== 'id') {\r\n                result.push('id');\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function loadPage (page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition () {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('jhi-metrics', {\r\n            parent: 'admin',\r\n            url: '/metrics',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Application Metrics'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/metrics/metrics.html',\r\n                    controller: 'JhiMetricsMonitoringController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('JhiMetricsService', JhiMetricsService);\r\n\r\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\r\n\r\n    function JhiMetricsService ($rootScope, $http) {\r\n        var service = {\r\n            getMetrics: getMetrics,\r\n            threadDump: threadDump\r\n        };\r\n\r\n        return service;\r\n\r\n        function getMetrics () {\r\n            return $http.get('management/metrics').then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n\r\n        function threadDump () {\r\n            return $http.get('management/dump').then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\r\n\r\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\r\n\r\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\r\n        var vm = this;\r\n\r\n        vm.cancel = cancel;\r\n        vm.getLabelClass = getLabelClass;\r\n        vm.threadDump = threadDump;\r\n        vm.threadDumpAll = 0;\r\n        vm.threadDumpBlocked = 0;\r\n        vm.threadDumpRunnable = 0;\r\n        vm.threadDumpTimedWaiting = 0;\r\n        vm.threadDumpWaiting = 0;\r\n\r\n        angular.forEach(threadDump, function(value) {\r\n            if (value.threadState === 'RUNNABLE') {\r\n                vm.threadDumpRunnable += 1;\r\n            } else if (value.threadState === 'WAITING') {\r\n                vm.threadDumpWaiting += 1;\r\n            } else if (value.threadState === 'TIMED_WAITING') {\r\n                vm.threadDumpTimedWaiting += 1;\r\n            } else if (value.threadState === 'BLOCKED') {\r\n                vm.threadDumpBlocked += 1;\r\n            }\r\n        });\r\n\r\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\r\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\r\n\r\n        function cancel () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function getLabelClass (threadState) {\r\n            if (threadState === 'RUNNABLE') {\r\n                return 'label-success';\r\n            } else if (threadState === 'WAITING') {\r\n                return 'label-info';\r\n            } else if (threadState === 'TIMED_WAITING') {\r\n                return 'label-warning';\r\n            } else if (threadState === 'BLOCKED') {\r\n                return 'label-danger';\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\r\n\r\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\r\n\r\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\r\n        var vm = this;\r\n\r\n        vm.cachesStats = {};\r\n        vm.metrics = {};\r\n        vm.refresh = refresh;\r\n        vm.refreshThreadDumpData = refreshThreadDumpData;\r\n        vm.servicesStats = {};\r\n        vm.updatingMetrics = true;\r\n\r\n        vm.refresh();\r\n\r\n        $scope.$watch('vm.metrics', function (newValue) {\r\n            vm.servicesStats = {};\r\n            angular.forEach(newValue.timers, function (value, key) {\r\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\r\n                    vm.servicesStats[key] = value;\r\n                }\r\n            });\r\n\r\n            vm.cachesStats = {};\r\n            angular.forEach(newValue.gauges, function (value, key) {\r\n                if (key.indexOf('jcache.statistics') !== -1) {\r\n                    // remove gets or puts\r\n                    var index = key.lastIndexOf('.');\r\n                    var newKey = key.substr(0, index);\r\n\r\n                    // Keep the name of the domain\r\n                    vm.cachesStats[newKey] = {\r\n                        'name': newKey.substr(18),\r\n                        'value': value\r\n                    };\r\n                }\r\n            });\r\n        });\r\n\r\n        function refresh () {\r\n            vm.updatingMetrics = true;\r\n            JhiMetricsService.getMetrics().then(function (promise) {\r\n                vm.metrics = promise;\r\n                vm.updatingMetrics = false;\r\n            }, function (promise) {\r\n                vm.metrics = promise.data;\r\n                vm.updatingMetrics = false;\r\n            });\r\n        }\r\n\r\n        function refreshThreadDumpData () {\r\n            JhiMetricsService.threadDump().then(function(data) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\r\n                    controller: 'JhiMetricsMonitoringModalController',\r\n                    controllerAs: 'vm',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        threadDump: function() {\r\n                            return data;\r\n                        }\r\n\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('logs', {\r\n            parent: 'admin',\r\n            url: '/logs',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Logs'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/logs/logs.html',\r\n                    controller: 'LogsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('LogsService', LogsService);\r\n\r\n    LogsService.$inject = ['$resource'];\r\n\r\n    function LogsService ($resource) {\r\n        var service = $resource('management/logs', {}, {\r\n            'findAll': { method: 'GET', isArray: true},\r\n            'changeLevel': { method: 'PUT'}\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LogsController', LogsController);\r\n\r\n    LogsController.$inject = ['LogsService'];\r\n\r\n    function LogsController (LogsService) {\r\n        var vm = this;\r\n\r\n        vm.changeLevel = changeLevel;\r\n        vm.loggers = LogsService.findAll();\r\n\r\n        function changeLevel (name, level) {\r\n            LogsService.changeLevel({name: name, level: level}, function () {\r\n                vm.loggers = LogsService.findAll();\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('jhi-health', {\r\n            parent: 'admin',\r\n            url: '/health',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Health Checks'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/health/health.html',\r\n                    controller: 'JhiHealthCheckController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('JhiHealthService', JhiHealthService);\r\n\r\n    JhiHealthService.$inject = ['$rootScope', '$http'];\r\n\r\n    function JhiHealthService ($rootScope, $http) {\r\n        var separator = '.';\r\n        var service = {\r\n            checkHealth: checkHealth,\r\n            transformHealthData: transformHealthData,\r\n            getBaseName: getBaseName,\r\n            getSubSystemName: getSubSystemName\r\n        };\r\n\r\n        return service;\r\n\r\n        function checkHealth () {\r\n            return $http.get('management/health').then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n\r\n        function transformHealthData (data) {\r\n            var response = [];\r\n            flattenHealthData(response, null, data);\r\n            return response;\r\n        }\r\n\r\n        function getBaseName (name) {\r\n            if (name) {\r\n                var split = name.split('.');\r\n                return split[0];\r\n            }\r\n        }\r\n\r\n        function getSubSystemName (name) {\r\n            if (name) {\r\n                var split = name.split('.');\r\n                split.splice(0, 1);\r\n                var remainder = split.join('.');\r\n                return remainder ? ' - ' + remainder : '';\r\n            }\r\n        }\r\n\r\n        /* private methods */\r\n        function flattenHealthData (result, path, data) {\r\n            angular.forEach(data, function (value, key) {\r\n                if (isHealthObject(value)) {\r\n                    if (hasSubSystem(value)) {\r\n                        addHealthObject(result, false, value, getModuleName(path, key));\r\n                        flattenHealthData(result, getModuleName(path, key), value);\r\n                    } else {\r\n                        addHealthObject(result, true, value, getModuleName(path, key));\r\n                    }\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        function addHealthObject (result, isLeaf, healthObject, name) {\r\n\r\n            var healthData = {\r\n                'name': name\r\n            };\r\n            var details = {};\r\n            var hasDetails = false;\r\n\r\n            angular.forEach(healthObject, function (value, key) {\r\n                if (key === 'status' || key === 'error') {\r\n                    healthData[key] = value;\r\n                } else {\r\n                    if (!isHealthObject(value)) {\r\n                        details[key] = value;\r\n                        hasDetails = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Add the of the details\r\n            if (hasDetails) {\r\n                angular.extend(healthData, { 'details': details});\r\n            }\r\n\r\n            // Only add nodes if they provide additional information\r\n            if (isLeaf || hasDetails || healthData.error) {\r\n                result.push(healthData);\r\n            }\r\n            return healthData;\r\n        }\r\n\r\n        function getModuleName (path, name) {\r\n            var result;\r\n            if (path && name) {\r\n                result = path + separator + name;\r\n            }  else if (path) {\r\n                result = path;\r\n            } else if (name) {\r\n                result = name;\r\n            } else {\r\n                result = '';\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function hasSubSystem (healthObject) {\r\n            var result = false;\r\n            angular.forEach(healthObject, function (value) {\r\n                if (value && value.status) {\r\n                    result = true;\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        function isHealthObject (healthObject) {\r\n            var result = false;\r\n            angular.forEach(healthObject, function (value, key) {\r\n                if (key === 'status') {\r\n                    result = true;\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular.module('poliApp')\r\n        .controller('HealthModalController', HealthModalController);\r\n\r\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\r\n\r\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\r\n        var vm = this;\r\n\r\n        vm.cancel = cancel;\r\n        vm.currentHealth = currentHealth;\r\n        vm.baseName = baseName;\r\n        vm.subSystemName = subSystemName;\r\n\r\n        function cancel() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\r\n\r\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\r\n\r\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\r\n        var vm = this;\r\n\r\n        vm.updatingHealth = true;\r\n        vm.getLabelClass = getLabelClass;\r\n        vm.refresh = refresh;\r\n        vm.showHealth = showHealth;\r\n        vm.baseName = JhiHealthService.getBaseName;\r\n        vm.subSystemName = JhiHealthService.getSubSystemName;\r\n\r\n        vm.refresh();\r\n\r\n        function getLabelClass (statusState) {\r\n            if (statusState === 'UP') {\r\n                return 'label-success';\r\n            } else {\r\n                return 'label-danger';\r\n            }\r\n        }\r\n\r\n        function refresh () {\r\n            vm.updatingHealth = true;\r\n            JhiHealthService.checkHealth().then(function (response) {\r\n                vm.healthData = JhiHealthService.transformHealthData(response);\r\n                vm.updatingHealth = false;\r\n            }, function (response) {\r\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\r\n                vm.updatingHealth = false;\r\n            });\r\n        }\r\n\r\n        function showHealth (health) {\r\n            $uibModal.open({\r\n                templateUrl: 'app/admin/health/health.modal.html',\r\n                controller: 'HealthModalController',\r\n                controllerAs: 'vm',\r\n                size: 'lg',\r\n                resolve: {\r\n                    currentHealth: function() {\r\n                        return health;\r\n                    },\r\n                    baseName: function() {\r\n                        return vm.baseName;\r\n                    },\r\n                    subSystemName: function() {\r\n                        return vm.subSystemName;\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig ($stateProvider) {\r\n        $stateProvider.state('docs', {\r\n            parent: 'admin',\r\n            url: '/docs',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'API'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/docs/docs.html'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('jhi-configuration', {\r\n            parent: 'admin',\r\n            url: '/configuration',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Configuration'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/configuration/configuration.html',\r\n                    controller: 'JhiConfigurationController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('JhiConfigurationService', JhiConfigurationService);\r\n\r\n    JhiConfigurationService.$inject = ['$filter', '$http'];\r\n\r\n    function JhiConfigurationService ($filter, $http) {\r\n        var service = {\r\n            get: get,\r\n            getEnv: getEnv\r\n        };\r\n\r\n        return service;\r\n\r\n        function get () {\r\n            return $http.get('management/configprops').then(getConfigPropsComplete);\r\n\r\n            function getConfigPropsComplete (response) {\r\n                var properties = [];\r\n                angular.forEach(response.data, function (data) {\r\n                    properties.push(data);\r\n                });\r\n                var orderBy = $filter('orderBy');\r\n                return orderBy(properties, 'prefix');\r\n            }\r\n        }\r\n\r\n        function getEnv () {\r\n            return $http.get('management/env').then(getEnvComplete);\r\n\r\n            function getEnvComplete (response) {\r\n                var properties = {};\r\n                angular.forEach(response.data, function (val,key) {\r\n                    var vals = [];\r\n                    angular.forEach(val, function (v,k) {\r\n                        vals.push({ key:k, val:v });\r\n                    });\r\n                    properties[key] = vals;\r\n                });\r\n                return properties;\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JhiConfigurationController', JhiConfigurationController);\r\n\r\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\r\n\r\n    function JhiConfigurationController (filter,JhiConfigurationService) {\r\n        var vm = this;\r\n\r\n        vm.allConfiguration = null;\r\n        vm.configuration = null;\r\n\r\n        JhiConfigurationService.get().then(function(configuration) {\r\n            vm.configuration = configuration;\r\n        });\r\n        JhiConfigurationService.getEnv().then(function (configuration) {\r\n            vm.allConfiguration = configuration;\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('audits', {\r\n            parent: 'admin',\r\n            url: '/audits',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Audits'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/audits/audits.html',\r\n                    controller: 'AuditsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('AuditsService', AuditsService);\r\n\r\n    AuditsService.$inject = ['$resource'];\r\n\r\n    function AuditsService ($resource) {\r\n        var service = $resource('management/audits/:id', {}, {\r\n            'get': {\r\n                method: 'GET',\r\n                isArray: true\r\n            },\r\n            'query': {\r\n                method: 'GET',\r\n                isArray: true,\r\n                params: {fromDate: null, toDate: null}\r\n            }\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('AuditsController', AuditsController);\r\n\r\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\r\n\r\n    function AuditsController ($filter, AuditsService, ParseLinks) {\r\n        var vm = this;\r\n\r\n        vm.audits = null;\r\n        vm.fromDate = null;\r\n        vm.links = null;\r\n        vm.loadPage = loadPage;\r\n        vm.onChangeDate = onChangeDate;\r\n        vm.page = 1;\r\n        vm.previousMonth = previousMonth;\r\n        vm.toDate = null;\r\n        vm.today = today;\r\n        vm.totalItems = null;\r\n\r\n        vm.today();\r\n        vm.previousMonth();\r\n        vm.onChangeDate();\r\n\r\n        function onChangeDate () {\r\n            var dateFormat = 'yyyy-MM-dd';\r\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\r\n            var toDate = $filter('date')(vm.toDate, dateFormat);\r\n\r\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\r\n                vm.audits = result;\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n            });\r\n        }\r\n\r\n        // Date picker configuration\r\n        function today () {\r\n            // Today + 1 day - needed if the current day must be included\r\n            var today = new Date();\r\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\r\n        }\r\n\r\n        function previousMonth () {\r\n            var fromDate = new Date();\r\n            if (fromDate.getMonth() === 0) {\r\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\r\n            } else {\r\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\r\n            }\r\n\r\n            vm.fromDate = fromDate;\r\n        }\r\n\r\n        function loadPage (page) {\r\n            vm.page = page;\r\n            vm.onChangeDate();\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig ($stateProvider) {\r\n        $stateProvider.state('admin', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SocialRegisterController', SocialRegisterController);\r\n\r\n    SocialRegisterController.$inject = ['$filter', '$stateParams'];\r\n\r\n    function SocialRegisterController ($filter, $stateParams) {\r\n        var vm = this;\r\n\r\n        vm.success = $stateParams.success;\r\n        vm.error = !vm.success;\r\n        vm.provider = $stateParams.provider;\r\n        vm.providerLabel = $filter('capitalize')(vm.provider);\r\n        vm.success = $stateParams.success;\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SocialAuthController', SocialAuthController);\r\n\r\n    SocialAuthController.$inject = ['$state', '$cookies', 'Auth'];\r\n\r\n    function SocialAuthController($state, $cookies, Auth) {\r\n        var token = $cookies.get('social-authentication');\r\n\r\n        Auth.loginWithToken(token, false).then(function () {\r\n            $cookies.remove('social-authentication');\r\n            Auth.authorize(true);\r\n        }, function () {\r\n            $state.go('social-register', {'success': 'false'});\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('social-register', {\r\n            parent: 'account',\r\n            url: '/social-register/:provider?{success:boolean}',\r\n            data: {\r\n                authorities: [],\r\n                pageTitle: 'Register with {{ label }}'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/social/social-register.html',\r\n                    controller: 'SocialRegisterController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        })\r\n        .state('social-auth', {\r\n            parent: 'account',\r\n            url: '/social-auth',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    controller: 'SocialAuthController'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('SocialService', SocialService);\r\n\r\n    SocialService.$inject = ['$http', '$cookies'];\r\n\r\n    function SocialService ($http, $cookies) {\r\n        var socialService = {\r\n            getProviderSetting: getProviderSetting,\r\n            getProviderURL: getProviderURL,\r\n            getCSRF: getCSRF\r\n        };\r\n\r\n        return socialService;\r\n\r\n        function getProviderSetting (provider) {\r\n            switch(provider) {\r\n            case 'google': return 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email';\r\n            case 'facebook': return 'public_profile,email';\r\n            case 'twitter': return '';\r\n                // jhipster-needle-add-social-button\r\n            default: return 'Provider setting not defined';\r\n            }\r\n        }\r\n\r\n        function getProviderURL (provider) {\r\n            return 'signin/' + provider;\r\n        }\r\n\r\n        function getCSRF () {\r\n            return $cookies.get($http.defaults.xsrfCookieName);\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('jhSocial', jhSocial);\r\n\r\n    jhSocial.$inject = ['$filter', 'SocialService'];\r\n\r\n    function jhSocial($filter, SocialService) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            scope: {\r\n                provider: '@ngProvider'\r\n            },\r\n            templateUrl: 'app/account/social/directive/social.html',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        /* private helper methods */\r\n\r\n        function linkFunc(scope) {\r\n            \r\n            scope.label = $filter('capitalize')(scope.provider);\r\n            scope.providerSetting = SocialService.getProviderSetting(scope.provider);\r\n            scope.providerURL = SocialService.getProviderURL(scope.provider);\r\n            scope.csrf = SocialService.getCSRF();\r\n        }\r\n\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('settings', {\r\n            parent: 'account',\r\n            url: '/settings',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Settings'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/settings/settings.html',\r\n                    controller: 'SettingsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SettingsController', SettingsController);\r\n\r\n    SettingsController.$inject = ['Principal', 'Auth'];\r\n\r\n    function SettingsController (Principal, Auth) {\r\n        var vm = this;\r\n\r\n        vm.error = null;\r\n        vm.save = save;\r\n        vm.settingsAccount = null;\r\n        vm.success = null;\r\n\r\n        /**\r\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\r\n         */\r\n        var copyAccount = function (account) {\r\n            return {\r\n                activated: account.activated,\r\n                email: account.email,\r\n                firstName: account.firstName,\r\n                langKey: account.langKey,\r\n                lastName: account.lastName,\r\n                login: account.login\r\n            };\r\n        };\r\n\r\n        Principal.identity().then(function(account) {\r\n            vm.settingsAccount = copyAccount(account);\r\n        });\r\n\r\n        function save () {\r\n            Auth.updateAccount(vm.settingsAccount).then(function() {\r\n                vm.error = null;\r\n                vm.success = 'OK';\r\n                Principal.identity(true).then(function(account) {\r\n                    vm.settingsAccount = copyAccount(account);\r\n                });\r\n            }).catch(function() {\r\n                vm.success = null;\r\n                vm.error = 'ERROR';\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('requestReset', {\r\n            parent: 'account',\r\n            url: '/reset/request',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/reset/request/reset.request.html',\r\n                    controller: 'RequestResetController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('RequestResetController', RequestResetController);\r\n\r\n    RequestResetController.$inject = ['$timeout', 'Auth'];\r\n\r\n    function RequestResetController ($timeout, Auth) {\r\n        var vm = this;\r\n\r\n        vm.error = null;\r\n        vm.errorEmailNotExists = null;\r\n        vm.requestReset = requestReset;\r\n        vm.resetAccount = {};\r\n        vm.success = null;\r\n\r\n        $timeout(function (){angular.element('#email').focus();});\r\n\r\n        function requestReset () {\r\n\r\n            vm.error = null;\r\n            vm.errorEmailNotExists = null;\r\n\r\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\r\n                vm.success = 'OK';\r\n            }).catch(function (response) {\r\n                vm.success = null;\r\n                if (response.status === 400 && response.data === 'email address not registered') {\r\n                    vm.errorEmailNotExists = 'ERROR';\r\n                } else {\r\n                    vm.error = 'ERROR';\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('finishReset', {\r\n            parent: 'account',\r\n            url: '/reset/finish?key',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\r\n                    controller: 'ResetFinishController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ResetFinishController', ResetFinishController);\r\n\r\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\r\n\r\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\r\n        var vm = this;\r\n\r\n        vm.keyMissing = angular.isUndefined($stateParams.key);\r\n        vm.confirmPassword = null;\r\n        vm.doNotMatch = null;\r\n        vm.error = null;\r\n        vm.finishReset = finishReset;\r\n        vm.login = LoginService.open;\r\n        vm.resetAccount = {};\r\n        vm.success = null;\r\n\r\n        $timeout(function (){angular.element('#password').focus();});\r\n\r\n        function finishReset() {\r\n            vm.doNotMatch = null;\r\n            vm.error = null;\r\n            if (vm.resetAccount.password !== vm.confirmPassword) {\r\n                vm.doNotMatch = 'ERROR';\r\n            } else {\r\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\r\n                    vm.success = 'OK';\r\n                }).catch(function () {\r\n                    vm.success = null;\r\n                    vm.error = 'ERROR';\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('register', {\r\n            parent: 'account',\r\n            url: '/register',\r\n            data: {\r\n                authorities: [],\r\n                pageTitle: 'Registration'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/register/register.html',\r\n                    controller: 'RegisterController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('RegisterController', RegisterController);\r\n\r\n\r\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\r\n\r\n    function RegisterController ($timeout, Auth, LoginService) {\r\n        var vm = this;\r\n\r\n        vm.doNotMatch = null;\r\n        vm.error = null;\r\n        vm.errorUserExists = null;\r\n        vm.login = LoginService.open;\r\n        vm.register = register;\r\n        vm.registerAccount = {};\r\n        vm.success = null;\r\n\r\n        $timeout(function (){angular.element('#login').focus();});\r\n\r\n        function register () {\r\n            if (vm.registerAccount.password !== vm.confirmPassword) {\r\n                vm.doNotMatch = 'ERROR';\r\n            } else {\r\n                vm.registerAccount.langKey =  'en' ;\r\n                vm.doNotMatch = null;\r\n                vm.error = null;\r\n                vm.errorUserExists = null;\r\n                vm.errorEmailExists = null;\r\n\r\n                Auth.createAccount(vm.registerAccount).then(function () {\r\n                    vm.success = 'OK';\r\n                }).catch(function (response) {\r\n                    vm.success = null;\r\n                    if (response.status === 400 && response.data === 'login already in use') {\r\n                        vm.errorUserExists = 'ERROR';\r\n                    } else if (response.status === 400 && response.data === 'email address already in use') {\r\n                        vm.errorEmailExists = 'ERROR';\r\n                    } else {\r\n                        vm.error = 'ERROR';\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","/* globals $ */\r\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('passwordStrengthBar', passwordStrengthBar);\r\n\r\n    function passwordStrengthBar () {\r\n        var directive = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            template: '<div id=\"strength\">' +\r\n                '<small>Password strength:</small>' +\r\n                '<ul id=\"strengthBar\">' +\r\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\r\n                '</ul>' +\r\n                '</div>',\r\n            scope: {\r\n                passwordToCheck: '='\r\n            },\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        /* private helper methods*/\r\n\r\n        function linkFunc(scope, iElement) {\r\n            var strength = {\r\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\r\n                mesureStrength: function (p) {\r\n\r\n                    var _force = 0;\r\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\r\n\r\n                    var _lowerLetters = /[a-z]+/.test(p);\r\n                    var _upperLetters = /[A-Z]+/.test(p);\r\n                    var _numbers = /[0-9]+/.test(p);\r\n                    var _symbols = _regex.test(p);\r\n\r\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\r\n                    var _passedMatches = $.grep(_flags, function (el) {\r\n                        return el === true;\r\n                    }).length;\r\n\r\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\r\n                    _force += _passedMatches * 10;\r\n\r\n                    // penalty (short password)\r\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\r\n\r\n                    // penalty (poor variety of characters)\r\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\r\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\r\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\r\n\r\n                    return _force;\r\n\r\n                },\r\n                getColor: function (s) {\r\n\r\n                    var idx;\r\n                    if (s <= 10) {\r\n                        idx = 0;\r\n                    }\r\n                    else if (s <= 20) {\r\n                        idx = 1;\r\n                    }\r\n                    else if (s <= 30) {\r\n                        idx = 2;\r\n                    }\r\n                    else if (s <= 40) {\r\n                        idx = 3;\r\n                    }\r\n                    else {\r\n                        idx = 4;\r\n                    }\r\n\r\n                    return { idx: idx + 1, col: this.colors[idx] };\r\n                }\r\n            };\r\n            scope.$watch('passwordToCheck', function (password) {\r\n                if (password) {\r\n                    var c = strength.getColor(strength.mesureStrength(password));\r\n                    iElement.removeClass('ng-hide');\r\n                    iElement.find('ul').children('li')\r\n                        .css({ 'background-color': '#DDD' })\r\n                        .slice(0, c.idx)\r\n                        .css({ 'background-color': c.col });\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('password', {\r\n            parent: 'account',\r\n            url: '/password',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Password'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/password/password.html',\r\n                    controller: 'PasswordController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PasswordController', PasswordController);\r\n\r\n    PasswordController.$inject = ['Auth', 'Principal'];\r\n\r\n    function PasswordController (Auth, Principal) {\r\n        var vm = this;\r\n\r\n        vm.changePassword = changePassword;\r\n        vm.doNotMatch = null;\r\n        vm.error = null;\r\n        vm.success = null;\r\n\r\n        Principal.identity().then(function(account) {\r\n            vm.account = account;\r\n        });\r\n\r\n        function changePassword () {\r\n            if (vm.password !== vm.confirmPassword) {\r\n                vm.error = null;\r\n                vm.success = null;\r\n                vm.doNotMatch = 'ERROR';\r\n            } else {\r\n                vm.doNotMatch = null;\r\n                Auth.changePassword(vm.password).then(function () {\r\n                    vm.error = null;\r\n                    vm.success = 'OK';\r\n                }).catch(function () {\r\n                    vm.success = null;\r\n                    vm.error = 'ERROR';\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('activate', {\r\n            parent: 'account',\r\n            url: '/activate?key',\r\n            data: {\r\n                authorities: [],\r\n                pageTitle: 'Activation'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/activate/activate.html',\r\n                    controller: 'ActivationController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ActivationController', ActivationController);\r\n\r\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\r\n\r\n    function ActivationController ($stateParams, Auth, LoginService) {\r\n        var vm = this;\r\n\r\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\r\n            vm.error = null;\r\n            vm.success = 'OK';\r\n        }).catch(function () {\r\n            vm.success = null;\r\n            vm.error = 'ERROR';\r\n        });\r\n\r\n        vm.login = LoginService.open;\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('account', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp', [\r\n            'ngStorage',\r\n            'ngResource',\r\n            'ngCookies',\r\n            'ngAria',\r\n            'ngCacheBuster',\r\n            'ngFileUpload',\r\n            'ui.bootstrap',\r\n            'ui.bootstrap.datetimepicker',\r\n            'ui.router',\r\n            'infinite-scroll',\r\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\r\n            'angular-loading-bar'\r\n        ])\r\n        .run(run);\r\n\r\n    run.$inject = ['stateHandler'];\r\n\r\n    function run(stateHandler) {\r\n        stateHandler.initialize();\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('User', User);\r\n\r\n    User.$inject = ['$resource'];\r\n\r\n    function User ($resource) {\r\n        var service = $resource('api/users/:login', {}, {\r\n            'query': {method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    data = angular.fromJson(data);\r\n                    return data;\r\n                }\r\n            },\r\n            'save': { method:'POST' },\r\n            'update': { method:'PUT' },\r\n            'delete':{ method:'DELETE'}\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('ProfileService', ProfileService);\r\n\r\n    ProfileService.$inject = ['$http'];\r\n\r\n    function ProfileService($http) {\r\n\r\n        var dataPromise;\r\n\r\n        var service = {\r\n            getProfileInfo : getProfileInfo\r\n        };\r\n\r\n        return service;\r\n\r\n        function getProfileInfo() {\r\n            if (angular.isUndefined(dataPromise)) {\r\n                dataPromise = $http.get('api/profile-info').then(function(result) {\r\n                    if (result.data.activeProfiles) {\r\n                        var response = {};\r\n                        response.activeProfiles = result.data.activeProfiles;\r\n                        response.ribbonEnv = result.data.ribbonEnv;\r\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\r\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\r\n                        return response;\r\n                    }\r\n                });\r\n            }\r\n            return dataPromise;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('pageRibbon', pageRibbon);\r\n\r\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\r\n\r\n    function pageRibbon(ProfileService, $rootScope) {\r\n        var directive = {\r\n            replace : true,\r\n            restrict : 'AE',\r\n            template : '<div class=\"ribbon hidden\"><a href=\"\">{{ribbonEnv}}</a></div>',\r\n            link : linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            ProfileService.getProfileInfo().then(function(response) {\r\n                if (response.ribbonEnv) {\r\n                    scope.ribbonEnv = response.ribbonEnv;\r\n                    element.addClass(response.ribbonEnv);\r\n                    element.removeClass('hidden');\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Register', Register);\r\n\r\n    Register.$inject = ['$resource'];\r\n\r\n    function Register ($resource) {\r\n        return $resource('api/register', {}, {});\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Principal', Principal);\r\n\r\n    Principal.$inject = ['$q', 'Account'];\r\n\r\n    function Principal ($q, Account) {\r\n        var _identity,\r\n            _authenticated = false;\r\n\r\n        var service = {\r\n            authenticate: authenticate,\r\n            hasAnyAuthority: hasAnyAuthority,\r\n            hasAuthority: hasAuthority,\r\n            identity: identity,\r\n            isAuthenticated: isAuthenticated,\r\n            isIdentityResolved: isIdentityResolved\r\n        };\r\n\r\n        return service;\r\n\r\n        function authenticate (identity) {\r\n            _identity = identity;\r\n            _authenticated = identity !== null;\r\n        }\r\n\r\n        function hasAnyAuthority (authorities) {\r\n            if (!_authenticated || !_identity || !_identity.authorities) {\r\n                return false;\r\n            }\r\n\r\n            for (var i = 0; i < authorities.length; i++) {\r\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function hasAuthority (authority) {\r\n            if (!_authenticated) {\r\n                return $q.when(false);\r\n            }\r\n\r\n            return this.identity().then(function(_id) {\r\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\r\n            }, function(){\r\n                return false;\r\n            });\r\n        }\r\n\r\n        function identity (force) {\r\n            var deferred = $q.defer();\r\n\r\n            if (force === true) {\r\n                _identity = undefined;\r\n            }\r\n\r\n            // check and see if we have retrieved the identity data from the server.\r\n            // if we have, reuse it by immediately resolving\r\n            if (angular.isDefined(_identity)) {\r\n                deferred.resolve(_identity);\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            // retrieve the identity data from the server, update the identity object, and then resolve.\r\n            Account.get().$promise\r\n                .then(getAccountThen)\r\n                .catch(getAccountCatch);\r\n\r\n            return deferred.promise;\r\n\r\n            function getAccountThen (account) {\r\n                _identity = account.data;\r\n                _authenticated = true;\r\n                deferred.resolve(_identity);\r\n            }\r\n\r\n            function getAccountCatch () {\r\n                _identity = null;\r\n                _authenticated = false;\r\n                deferred.resolve(_identity);\r\n            }\r\n        }\r\n\r\n        function isAuthenticated () {\r\n            return _authenticated;\r\n        }\r\n\r\n        function isIdentityResolved () {\r\n            return angular.isDefined(_identity);\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('PasswordResetInit', PasswordResetInit);\r\n\r\n    PasswordResetInit.$inject = ['$resource'];\r\n\r\n    function PasswordResetInit($resource) {\r\n        var service = $resource('api/account/reset_password/init', {}, {});\r\n\r\n        return service;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('PasswordResetFinish', PasswordResetFinish);\r\n\r\n    PasswordResetFinish.$inject = ['$resource'];\r\n\r\n    function PasswordResetFinish($resource) {\r\n        var service = $resource('api/account/reset_password/finish', {}, {});\r\n\r\n        return service;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Password', Password);\r\n\r\n    Password.$inject = ['$resource'];\r\n\r\n    function Password($resource) {\r\n        var service = $resource('api/account/change_password', {}, {});\r\n\r\n        return service;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('hasAuthority', hasAuthority);\r\n\r\n    hasAuthority.$inject = ['Principal'];\r\n\r\n    function hasAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    Principal.hasAuthority(authority)\r\n                        .then(function (result) {\r\n                            if (result) {\r\n                                setVisible();\r\n                            } else {\r\n                                setHidden();\r\n                            }\r\n                        });\r\n                };\r\n\r\n            if (authority.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function() {\r\n                    return Principal.isAuthenticated();\r\n                }, function() {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('hasAnyAuthority', hasAnyAuthority);\r\n\r\n    hasAnyAuthority.$inject = ['Principal'];\r\n\r\n    function hasAnyAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n                    var result;\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    result = Principal.hasAnyAuthority(authorities);\r\n                    if (result) {\r\n                        setVisible();\r\n                    } else {\r\n                        setHidden();\r\n                    }\r\n                };\r\n\r\n            if (authorities.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function() {\r\n                    return Principal.isAuthenticated();\r\n                }, function() {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Auth', Auth);\r\n\r\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\r\n\r\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\r\n        var service = {\r\n            activateAccount: activateAccount,\r\n            authorize: authorize,\r\n            changePassword: changePassword,\r\n            createAccount: createAccount,\r\n            getPreviousState: getPreviousState,\r\n            login: login,\r\n            logout: logout,\r\n            loginWithToken: loginWithToken,\r\n            resetPasswordFinish: resetPasswordFinish,\r\n            resetPasswordInit: resetPasswordInit,\r\n            resetPreviousState: resetPreviousState,\r\n            storePreviousState: storePreviousState,\r\n            updateAccount: updateAccount\r\n        };\r\n\r\n        return service;\r\n\r\n        function activateAccount (key, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Activate.get(key,\r\n                function (response) {\r\n                    return cb(response);\r\n                },\r\n                function (err) {\r\n                    return cb(err);\r\n                }.bind(this)).$promise;\r\n        }\r\n\r\n        function authorize (force) {\r\n            var authReturn = Principal.identity(force).then(authThen);\r\n\r\n            return authReturn;\r\n\r\n            function authThen () {\r\n                var isAuthenticated = Principal.isAuthenticated();\r\n\r\n                // an authenticated user can't access to login and register pages\r\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth')) {\r\n                    $state.go('home');\r\n                }\r\n\r\n                // recover and clear previousState after external login redirect (e.g. oauth2)\r\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\r\n                    var previousState = getPreviousState();\r\n                    resetPreviousState();\r\n                    $state.go(previousState.name, previousState.params);\r\n                }\r\n\r\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\r\n                    if (isAuthenticated) {\r\n                        // user is signed in but not authorized for desired state\r\n                        $state.go('accessdenied');\r\n                    }\r\n                    else {\r\n                        // user is not authenticated. stow the state they wanted before you\r\n                        // send them to the login service, so you can return them when you're done\r\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\r\n\r\n                        // now, send them to the signin state so they can log in\r\n                        $state.go('accessdenied').then(function() {\r\n                            LoginService.open();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function changePassword (newPassword, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Password.save(newPassword, function () {\r\n                return cb();\r\n            }, function (err) {\r\n                return cb(err);\r\n            }).$promise;\r\n        }\r\n\r\n        function createAccount (account, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Register.save(account,\r\n                function () {\r\n                    return cb(account);\r\n                },\r\n                function (err) {\r\n                    this.logout();\r\n                    return cb(err);\r\n                }.bind(this)).$promise;\r\n        }\r\n\r\n        function login (credentials, callback) {\r\n            var cb = callback || angular.noop;\r\n            var deferred = $q.defer();\r\n\r\n            AuthServerProvider.login(credentials)\r\n                .then(loginThen)\r\n                .catch(function (err) {\r\n                    this.logout();\r\n                    deferred.reject(err);\r\n                    return cb(err);\r\n                }.bind(this));\r\n\r\n            function loginThen (data) {\r\n                Principal.identity(true).then(function(account) {\r\n                    deferred.resolve(data);\r\n                });\r\n                return cb();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function loginWithToken(jwt, rememberMe) {\r\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\r\n        }\r\n\r\n        function logout () {\r\n            AuthServerProvider.logout();\r\n            Principal.authenticate(null);\r\n        }\r\n\r\n        function resetPasswordFinish (keyAndPassword, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return PasswordResetFinish.save(keyAndPassword, function () {\r\n                return cb();\r\n            }, function (err) {\r\n                return cb(err);\r\n            }).$promise;\r\n        }\r\n\r\n        function resetPasswordInit (mail, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return PasswordResetInit.save(mail, function() {\r\n                return cb();\r\n            }, function (err) {\r\n                return cb(err);\r\n            }).$promise;\r\n        }\r\n\r\n        function updateAccount (account, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Account.save(account,\r\n                function () {\r\n                    return cb(account);\r\n                },\r\n                function (err) {\r\n                    return cb(err);\r\n                }.bind(this)).$promise;\r\n        }\r\n\r\n        function getPreviousState() {\r\n            var previousState = $sessionStorage.previousState;\r\n            return previousState;\r\n        }\r\n\r\n        function resetPreviousState() {\r\n            delete $sessionStorage.previousState;\r\n        }\r\n\r\n        function storePreviousState(previousStateName, previousStateParams) {\r\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\r\n            $sessionStorage.previousState = previousState;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('AuthServerProvider', AuthServerProvider);\r\n\r\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\r\n\r\n    function AuthServerProvider ($http, $localStorage, $sessionStorage, $q) {\r\n        var service = {\r\n            getToken: getToken,\r\n            login: login,\r\n            loginWithToken: loginWithToken,\r\n            storeAuthenticationToken: storeAuthenticationToken,\r\n            logout: logout\r\n        };\r\n\r\n        return service;\r\n\r\n        function getToken () {\r\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\r\n        }\r\n\r\n        function login (credentials) {\r\n\r\n            var data = {\r\n                username: credentials.username,\r\n                password: credentials.password,\r\n                rememberMe: credentials.rememberMe\r\n            };\r\n            return $http.post('api/authenticate', data).success(authenticateSuccess);\r\n\r\n            function authenticateSuccess (data, status, headers) {\r\n                var bearerToken = headers('Authorization');\r\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\r\n                    var jwt = bearerToken.slice(7, bearerToken.length);\r\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\r\n                    return jwt;\r\n                }\r\n            }\r\n        }\r\n\r\n        function loginWithToken(jwt, rememberMe) {\r\n            var deferred = $q.defer();\r\n\r\n            if (angular.isDefined(jwt)) {\r\n                this.storeAuthenticationToken(jwt, rememberMe);\r\n                deferred.resolve(jwt);\r\n            } else {\r\n                deferred.reject();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function storeAuthenticationToken(jwt, rememberMe) {\r\n            if(rememberMe){\r\n                $localStorage.authenticationToken = jwt;\r\n            } else {\r\n                $sessionStorage.authenticationToken = jwt;\r\n            }\r\n        }\r\n\r\n        function logout () {\r\n            delete $localStorage.authenticationToken;\r\n            delete $sessionStorage.authenticationToken;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Activate', Activate);\r\n\r\n    Activate.$inject = ['$resource'];\r\n\r\n    function Activate ($resource) {\r\n        var service = $resource('api/activate', {}, {\r\n            'get': { method: 'GET', params: {}, isArray: false}\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Account', Account);\r\n\r\n    Account.$inject = ['$resource'];\r\n\r\n    function Account ($resource) {\r\n        var service = $resource('api/account', {}, {\r\n            'get': { method: 'GET', params: {}, isArray: false,\r\n                interceptor: {\r\n                    response: function(response) {\r\n                        // expose response\r\n                        return response;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NavbarController', NavbarController);\r\n\r\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\r\n\r\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\r\n        var vm = this;\r\n\r\n        vm.isNavbarCollapsed = true;\r\n        vm.isAuthenticated = Principal.isAuthenticated;\r\n\r\n        ProfileService.getProfileInfo().then(function(response) {\r\n            vm.inProduction = response.inProduction;\r\n            vm.swaggerEnabled = response.swaggerEnabled;\r\n        });\r\n\r\n        vm.login = login;\r\n        vm.logout = logout;\r\n        vm.toggleNavbar = toggleNavbar;\r\n        vm.collapseNavbar = collapseNavbar;\r\n        vm.$state = $state;\r\n\r\n        function login() {\r\n            collapseNavbar();\r\n            LoginService.open();\r\n        }\r\n\r\n        function logout() {\r\n            collapseNavbar();\r\n            Auth.logout();\r\n            $state.go('home');\r\n        }\r\n\r\n        function toggleNavbar() {\r\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\r\n        }\r\n\r\n        function collapseNavbar() {\r\n            vm.isNavbarCollapsed = true;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('error', {\r\n                parent: 'app',\r\n                url: '/error',\r\n                data: {\r\n                    authorities: [],\r\n                    pageTitle: 'Error page!'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/layouts/error/error.html'\r\n                    }\r\n                }\r\n            })\r\n            .state('accessdenied', {\r\n                parent: 'app',\r\n                url: '/accessdenied',\r\n                data: {\r\n                    authorities: []\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/layouts/error/accessdenied.html'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('home', {\r\n            parent: 'app',\r\n            url: '/',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/home/home.html',\r\n                    controller: 'HomeController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }            \r\n        });\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('HomeController', HomeController);\r\n\r\n    HomeController.$inject = ['$scope', '$state', 'DataUtils', 'News', 'Match', 'Partner', 'LeagueTable', 'ParseLinks', 'AlertService'];\r\n\r\n    function HomeController($scope, $state, DataUtils, News, Match, Partner, LeagueTable, ParseLinks, AlertService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadLast3News();\r\n        function loadLast3News() {\r\n            News.query({\r\n                size: 3,\r\n                sort: ['id,desc']\r\n            }, onSuccess, onError);\r\n\r\n            function onSuccess(data, headers) {\r\n                vm.news = data;\r\n                $(document).ready(function () {\r\n                    $('.bxslider').bxSlider({\r\n                        auto: true,\r\n                        autoControls: true,\r\n                        pause: 3000,\r\n                        autoControls: false,\r\n                    });\r\n                });\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        loadLast3Matches();\r\n        function loadLast3Matches() {\r\n            Match.query({\r\n                size: 2,\r\n                sort: ['id,desc']\r\n            }, onSuccess, onError);\r\n\r\n            function onSuccess(data, headers) {\r\n                vm.matches = data;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }       \r\n\r\n        function orderLeagueTable(a, b) {\r\n            if (a.position < b.position)\r\n                return -1;\r\n            if (a.position > b.position)\r\n                return 1;\r\n            return 0;\r\n        }\r\n\r\n        $scope.setFontWeight = function (team) {\r\n            if (team.teamname == 'Politehnica București') {\r\n                return { fontWeight: \"bold\" }\r\n            }\r\n        }\r\n\r\n        loadLeagueTable();\r\n        function loadLeagueTable() {\r\n            LeagueTable.query({\r\n            }, onSuccess, onError);\r\n\r\n            function onSuccess(data, headers) {\r\n                data = data.sort(orderLeagueTable);\r\n                var list = [];\r\n                var position = -1;\r\n\r\n                for (var i = 0; i < data.length; i++) {\r\n                    if (data[i].teamname == 'Politehnica București')\r\n                        position = i;\r\n                }\r\n\r\n                if (position == 0) {\r\n                    list.push(data[position]);\r\n                    list.push(data[position + 1]);\r\n                    list.push(data[position + 2]);\r\n                } else if (position == data.length - 1) {\r\n                    list.push(data[position - 2]);\r\n                    list.push(data[position - 1]);\r\n                    list.push(data[position]);\r\n                } else\r\n                    if (position != -1) {\r\n                        list.push(data[position - 1]);\r\n                        list.push(data[position]);\r\n                        list.push(data[position + 1]);\r\n                    }\r\n\r\n                vm.leagueTables = list;\r\n\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('StaffDialogController', StaffDialogController);\r\n\r\n    StaffDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'Staff', 'Job'];\r\n\r\n    function StaffDialogController ($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, Staff, Job) {\r\n        var vm = this;\r\n\r\n        vm.staff = entity;\r\n        vm.clear = clear;\r\n        vm.datePickerOpenStatus = {};\r\n        vm.openCalendar = openCalendar;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.save = save;\r\n        vm.jobs = Job.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.staff.id !== null) {\r\n                Staff.update(vm.staff, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Staff.save(vm.staff, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:staffUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        vm.datePickerOpenStatus.dateofbirth = false;\r\n\r\n        vm.setImage = function ($file, staff) {\r\n            if ($file && $file.$error === 'pattern') {\r\n                return;\r\n            }\r\n            if ($file) {\r\n                DataUtils.toBase64($file, function(base64Data) {\r\n                    $scope.$apply(function() {\r\n                        staff.image = base64Data;\r\n                        staff.imageContentType = $file.type;\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n        function openCalendar (date) {\r\n            vm.datePickerOpenStatus[date] = true;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('StaffDetailController', StaffDetailController);\r\n\r\n    StaffDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'Staff', 'Job'];\r\n\r\n    function StaffDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, Staff, Job) {\r\n        var vm = this;\r\n\r\n        vm.staff = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:staffUpdate', function(event, result) {\r\n            vm.staff = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('StaffDeleteController',StaffDeleteController);\r\n\r\n    StaffDeleteController.$inject = ['$uibModalInstance', 'entity', 'Staff'];\r\n\r\n    function StaffDeleteController($uibModalInstance, entity, Staff) {\r\n        var vm = this;\r\n\r\n        vm.staff = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Staff.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('staff', {\r\n            parent: 'entity',\r\n            url: '/staff?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Staff'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/staff/staff.html',\r\n                    controller: 'StaffController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('staff-detail', {\r\n            parent: 'staff',\r\n            url: '/staff/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Staff'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/staff/staff-detail.html',\r\n                    controller: 'StaffDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Staff', function($stateParams, Staff) {\r\n                    return Staff.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'staff',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('staff-detail.edit', {\r\n            parent: 'staff-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\r\n                    controller: 'StaffDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Staff', function(Staff) {\r\n                            return Staff.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('staff.new', {\r\n            parent: 'staff',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\r\n                    controller: 'StaffDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                fullname: null,\r\n                                priority: null,\r\n                                placeofbirth: null,\r\n                                dateofbirth: null,\r\n                                previousclubs: null,\r\n                                image: null,\r\n                                imageContentType: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('staff', null, { reload: 'staff' });\r\n                }, function() {\r\n                    $state.go('staff');\r\n                });\r\n            }]\r\n        })\r\n        .state('staff.edit', {\r\n            parent: 'staff',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\r\n                    controller: 'StaffDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Staff', function(Staff) {\r\n                            return Staff.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('staff', null, { reload: 'staff' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('staff.delete', {\r\n            parent: 'staff',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/staff/staff-delete-dialog.html',\r\n                    controller: 'StaffDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Staff', function(Staff) {\r\n                            return Staff.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('staff', null, { reload: 'staff' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Staff', Staff);\r\n\r\n    Staff.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Staff ($resource, DateUtils) {\r\n        var resourceUrl =  'api/staff/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.dateofbirth = DateUtils.convertLocalDateFromServer(data.dateofbirth);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('StaffController', StaffController);\r\n\r\n    StaffController.$inject = ['$state', 'DataUtils', 'Staff', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function StaffController($state, DataUtils, Staff, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Staff.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.staff = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SeasonDialogController', SeasonDialogController);\r\n\r\n    SeasonDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Season'];\r\n\r\n    function SeasonDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Season) {\r\n        var vm = this;\r\n\r\n        vm.season = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.season.id !== null) {\r\n                Season.update(vm.season, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Season.save(vm.season, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:seasonUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SeasonDetailController', SeasonDetailController);\r\n\r\n    SeasonDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Season'];\r\n\r\n    function SeasonDetailController($scope, $rootScope, $stateParams, previousState, entity, Season) {\r\n        var vm = this;\r\n\r\n        vm.season = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:seasonUpdate', function(event, result) {\r\n            vm.season = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SeasonDeleteController',SeasonDeleteController);\r\n\r\n    SeasonDeleteController.$inject = ['$uibModalInstance', 'entity', 'Season'];\r\n\r\n    function SeasonDeleteController($uibModalInstance, entity, Season) {\r\n        var vm = this;\r\n\r\n        vm.season = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Season.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('season', {\r\n            parent: 'entity',\r\n            url: '/season?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Seasons'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/season/seasons.html',\r\n                    controller: 'SeasonController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('season-detail', {\r\n            parent: 'season',\r\n            url: '/season/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Season'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/season/season-detail.html',\r\n                    controller: 'SeasonDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Season', function($stateParams, Season) {\r\n                    return Season.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'season',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('season-detail.edit', {\r\n            parent: 'season-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/season/season-dialog.html',\r\n                    controller: 'SeasonDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Season', function(Season) {\r\n                            return Season.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('season.new', {\r\n            parent: 'season',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/season/season-dialog.html',\r\n                    controller: 'SeasonDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('season', null, { reload: 'season' });\r\n                }, function() {\r\n                    $state.go('season');\r\n                });\r\n            }]\r\n        })\r\n        .state('season.edit', {\r\n            parent: 'season',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/season/season-dialog.html',\r\n                    controller: 'SeasonDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Season', function(Season) {\r\n                            return Season.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('season', null, { reload: 'season' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('season.delete', {\r\n            parent: 'season',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/season/season-delete-dialog.html',\r\n                    controller: 'SeasonDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Season', function(Season) {\r\n                            return Season.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('season', null, { reload: 'season' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Season', Season);\r\n\r\n    Season.$inject = ['$resource'];\r\n\r\n    function Season ($resource) {\r\n        var resourceUrl =  'api/seasons/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SeasonController', SeasonController);\r\n\r\n    SeasonController.$inject = ['$state', 'Season', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function SeasonController($state, Season, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Season.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.seasons = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PositionDialogController', PositionDialogController);\r\n\r\n    PositionDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Position'];\r\n\r\n    function PositionDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Position) {\r\n        var vm = this;\r\n\r\n        vm.position = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.position.id !== null) {\r\n                Position.update(vm.position, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Position.save(vm.position, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:positionUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PositionDetailController', PositionDetailController);\r\n\r\n    PositionDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Position'];\r\n\r\n    function PositionDetailController($scope, $rootScope, $stateParams, previousState, entity, Position) {\r\n        var vm = this;\r\n\r\n        vm.position = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:positionUpdate', function(event, result) {\r\n            vm.position = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PositionDeleteController',PositionDeleteController);\r\n\r\n    PositionDeleteController.$inject = ['$uibModalInstance', 'entity', 'Position'];\r\n\r\n    function PositionDeleteController($uibModalInstance, entity, Position) {\r\n        var vm = this;\r\n\r\n        vm.position = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Position.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('position', {\r\n            parent: 'entity',\r\n            url: '/position?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Positions'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/position/positions.html',\r\n                    controller: 'PositionController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('position-detail', {\r\n            parent: 'position',\r\n            url: '/position/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Position'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/position/position-detail.html',\r\n                    controller: 'PositionDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Position', function($stateParams, Position) {\r\n                    return Position.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'position',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('position-detail.edit', {\r\n            parent: 'position-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/position/position-dialog.html',\r\n                    controller: 'PositionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Position', function(Position) {\r\n                            return Position.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('position.new', {\r\n            parent: 'position',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/position/position-dialog.html',\r\n                    controller: 'PositionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('position', null, { reload: 'position' });\r\n                }, function() {\r\n                    $state.go('position');\r\n                });\r\n            }]\r\n        })\r\n        .state('position.edit', {\r\n            parent: 'position',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/position/position-dialog.html',\r\n                    controller: 'PositionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Position', function(Position) {\r\n                            return Position.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('position', null, { reload: 'position' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('position.delete', {\r\n            parent: 'position',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/position/position-delete-dialog.html',\r\n                    controller: 'PositionDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Position', function(Position) {\r\n                            return Position.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('position', null, { reload: 'position' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Position', Position);\r\n\r\n    Position.$inject = ['$resource'];\r\n\r\n    function Position ($resource) {\r\n        var resourceUrl =  'api/positions/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PositionController', PositionController);\r\n\r\n    PositionController.$inject = ['$state', 'Position', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function PositionController($state, Position, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Position.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.positions = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PlayerDialogController', PlayerDialogController);\r\n\r\n    PlayerDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'Player', 'Position'];\r\n\r\n    function PlayerDialogController ($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, Player, Position) {\r\n        var vm = this;\r\n\r\n        vm.player = entity;\r\n        vm.clear = clear;\r\n        vm.datePickerOpenStatus = {};\r\n        vm.openCalendar = openCalendar;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.save = save;\r\n        vm.positions = Position.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.player.id !== null) {\r\n                Player.update(vm.player, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Player.save(vm.player, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:playerUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        vm.datePickerOpenStatus.dateofbirth = false;\r\n\r\n        vm.setImage = function ($file, player) {\r\n            if ($file && $file.$error === 'pattern') {\r\n                return;\r\n            }\r\n            if ($file) {\r\n                DataUtils.toBase64($file, function(base64Data) {\r\n                    $scope.$apply(function() {\r\n                        player.image = base64Data;\r\n                        player.imageContentType = $file.type;\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n        function openCalendar (date) {\r\n            vm.datePickerOpenStatus[date] = true;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PlayerDetailController', PlayerDetailController);\r\n\r\n    PlayerDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'Player', 'Position'];\r\n\r\n    function PlayerDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, Player, Position) {\r\n        var vm = this;\r\n\r\n        vm.player = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:playerUpdate', function(event, result) {\r\n            vm.player = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PlayerDeleteController',PlayerDeleteController);\r\n\r\n    PlayerDeleteController.$inject = ['$uibModalInstance', 'entity', 'Player'];\r\n\r\n    function PlayerDeleteController($uibModalInstance, entity, Player) {\r\n        var vm = this;\r\n\r\n        vm.player = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Player.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('player', {\r\n            parent: 'entity',\r\n            url: '/player?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Players'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/player/players.html',\r\n                    controller: 'PlayerController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('player-detail', {\r\n            parent: 'player',\r\n            url: '/player/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Player'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/player/player-detail.html',\r\n                    controller: 'PlayerDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Player', function($stateParams, Player) {\r\n                    return Player.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'player',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('player-detail.edit', {\r\n            parent: 'player-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/player/player-dialog.html',\r\n                    controller: 'PlayerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Player', function(Player) {\r\n                            return Player.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('player.new', {\r\n            parent: 'player',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/player/player-dialog.html',\r\n                    controller: 'PlayerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                fullname: null,\r\n                                priority: null,\r\n                                dateofbirth: null,\r\n                                shirtno: null,\r\n                                previousclubs: null,\r\n                                placeofbirth: null,\r\n                                image: null,\r\n                                imageContentType: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('player', null, { reload: 'player' });\r\n                }, function() {\r\n                    $state.go('player');\r\n                });\r\n            }]\r\n        })\r\n        .state('player.edit', {\r\n            parent: 'player',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/player/player-dialog.html',\r\n                    controller: 'PlayerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Player', function(Player) {\r\n                            return Player.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('player', null, { reload: 'player' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('player.delete', {\r\n            parent: 'player',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/player/player-delete-dialog.html',\r\n                    controller: 'PlayerDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Player', function(Player) {\r\n                            return Player.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('player', null, { reload: 'player' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Player', Player);\r\n\r\n    Player.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Player ($resource, DateUtils) {\r\n        var resourceUrl =  'api/players/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.dateofbirth = DateUtils.convertLocalDateFromServer(data.dateofbirth);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PlayerController', PlayerController);\r\n\r\n    PlayerController.$inject = ['$state', 'DataUtils', 'Player', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function PlayerController($state, DataUtils, Player, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Player.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.players = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PartnerDialogController', PartnerDialogController);\r\n\r\n    PartnerDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'Partner'];\r\n\r\n    function PartnerDialogController ($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, Partner) {\r\n        var vm = this;\r\n\r\n        vm.partner = entity;\r\n        vm.clear = clear;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.save = save;\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.partner.id !== null) {\r\n                Partner.update(vm.partner, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Partner.save(vm.partner, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:partnerUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n        vm.setImage = function ($file, partner) {\r\n            if ($file && $file.$error === 'pattern') {\r\n                return;\r\n            }\r\n            if ($file) {\r\n                DataUtils.toBase64($file, function(base64Data) {\r\n                    $scope.$apply(function() {\r\n                        partner.image = base64Data;\r\n                        partner.imageContentType = $file.type;\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PartnerDetailController', PartnerDetailController);\r\n\r\n    PartnerDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'Partner'];\r\n\r\n    function PartnerDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, Partner) {\r\n        var vm = this;\r\n\r\n        vm.partner = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:partnerUpdate', function(event, result) {\r\n            vm.partner = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PartnerDeleteController',PartnerDeleteController);\r\n\r\n    PartnerDeleteController.$inject = ['$uibModalInstance', 'entity', 'Partner'];\r\n\r\n    function PartnerDeleteController($uibModalInstance, entity, Partner) {\r\n        var vm = this;\r\n\r\n        vm.partner = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Partner.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('partner', {\r\n            parent: 'entity',\r\n            url: '/partner?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Partners'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/partner/partners.html',\r\n                    controller: 'PartnerController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('partner-detail', {\r\n            parent: 'partner',\r\n            url: '/partner/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Partner'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/partner/partner-detail.html',\r\n                    controller: 'PartnerDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Partner', function($stateParams, Partner) {\r\n                    return Partner.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'partner',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('partner-detail.edit', {\r\n            parent: 'partner-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/partner/partner-dialog.html',\r\n                    controller: 'PartnerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Partner', function(Partner) {\r\n                            return Partner.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('partner.new', {\r\n            parent: 'partner',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/partner/partner-dialog.html',\r\n                    controller: 'PartnerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                image: null,\r\n                                imageContentType: null,\r\n                                externalUrl: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('partner', null, { reload: 'partner' });\r\n                }, function() {\r\n                    $state.go('partner');\r\n                });\r\n            }]\r\n        })\r\n        .state('partner.edit', {\r\n            parent: 'partner',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/partner/partner-dialog.html',\r\n                    controller: 'PartnerDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Partner', function(Partner) {\r\n                            return Partner.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('partner', null, { reload: 'partner' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('partner.delete', {\r\n            parent: 'partner',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/partner/partner-delete-dialog.html',\r\n                    controller: 'PartnerDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Partner', function(Partner) {\r\n                            return Partner.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('partner', null, { reload: 'partner' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Partner', Partner);\r\n\r\n    Partner.$inject = ['$resource'];\r\n\r\n    function Partner ($resource) {\r\n        var resourceUrl =  'api/partners/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PartnerController', PartnerController);\r\n\r\n    PartnerController.$inject = ['$state', 'DataUtils', 'Partner', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function PartnerController($state, DataUtils, Partner, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Partner.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.partners = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NewsDialogController', NewsDialogController);\r\n\r\n    NewsDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'News'];\r\n\r\n    function NewsDialogController($timeout, $scope, $stateParams, $uibModalInstance, DataUtils, entity, News) {\r\n        var vm = this;\r\n\r\n        vm.news = entity;\r\n        vm.clear = clear;\r\n        vm.datePickerOpenStatus = {};\r\n        vm.openCalendar = openCalendar;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.save = save;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save() {\r\n            vm.news.content = $('#summernote').summernote('code');\r\n            vm.isSaving = true;\r\n            if (vm.news.id !== null) {\r\n                News.update(vm.news, onSaveSuccess, onSaveError);\r\n            } else {\r\n                News.save(vm.news, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess(result) {\r\n            $scope.$emit('poliApp:newsUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError() {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n        vm.setImage = function ($file, news) {\r\n            if ($file && $file.$error === 'pattern') {\r\n                return;\r\n            }\r\n            if ($file) {\r\n                DataUtils.toBase64($file, function (base64Data) {\r\n                    $scope.$apply(function () {\r\n                        news.image = base64Data;\r\n                        news.imageContentType = $file.type;\r\n                    });\r\n                });\r\n            }\r\n        };\r\n        vm.datePickerOpenStatus.createdDate = false;\r\n\r\n        function openCalendar(date) {\r\n            vm.datePickerOpenStatus[date] = true;\r\n        }\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NewsDetailController', NewsDetailController)\r\n        .filter('to_trusted', ['$sce', function ($sce) {\r\n            return function (text) {\r\n                return $sce.trustAsHtml(text);\r\n            };\r\n        }]);\r\n\r\n    NewsDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'News'];\r\n\r\n    function NewsDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, News) {\r\n        var vm = this;\r\n\r\n        vm.news = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:newsUpdate', function (event, result) {\r\n            vm.news = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NewsDeleteController',NewsDeleteController);\r\n\r\n    NewsDeleteController.$inject = ['$uibModalInstance', 'entity', 'News'];\r\n\r\n    function NewsDeleteController($uibModalInstance, entity, News) {\r\n        var vm = this;\r\n\r\n        vm.news = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            News.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('news', {\r\n            parent: 'entity',\r\n            url: '/news?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'News'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/news/news.html',\r\n                    controller: 'NewsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('news-detail', {\r\n            parent: 'news',\r\n            url: '/news/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'News'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/news/news-detail.html',\r\n                    controller: 'NewsDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'News', function($stateParams, News) {\r\n                    return News.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'news',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('news-detail.edit', {\r\n            parent: 'news-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/news/news-dialog.html',\r\n                    controller: 'NewsDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['News', function(News) {\r\n                            return News.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('news.new', {\r\n            parent: 'news',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/news/news-dialog.html',\r\n                    controller: 'NewsDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                title: null,\r\n                                image: null,\r\n                                imageContentType: null,\r\n                                videoUrl: null,\r\n                                externalUrl: null,\r\n                                createdDate: null,\r\n                                content: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('news', null, { reload: 'news' });\r\n                }, function() {\r\n                    $state.go('news');\r\n                });\r\n            }]\r\n        })\r\n        .state('news.edit', {\r\n            parent: 'news',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/news/news-dialog.html',\r\n                    controller: 'NewsDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['News', function(News) {\r\n                            return News.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('news', null, { reload: 'news' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('news.delete', {\r\n            parent: 'news',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/news/news-delete-dialog.html',\r\n                    controller: 'NewsDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['News', function(News) {\r\n                            return News.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('news', null, { reload: 'news' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('News', News);\r\n\r\n    News.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function News ($resource, DateUtils) {\r\n        var resourceUrl =  'api/news/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.createdDate = DateUtils.convertDateTimeFromServer(data.createdDate);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('NewsController', NewsController);\r\n\r\n    NewsController.$inject = ['$state', 'DataUtils', 'News', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function NewsController($state, DataUtils, News, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            News.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.news = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('MatchDialogController', MatchDialogController);\r\n\r\n    MatchDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Match', 'Competition'];\r\n\r\n    function MatchDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Match, Competition) {\r\n        var vm = this;\r\n\r\n        vm.match = entity;\r\n        vm.clear = clear;\r\n        vm.datePickerOpenStatus = {};\r\n        vm.openCalendar = openCalendar;\r\n        vm.save = save;\r\n        vm.competitions = Competition.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.match.id !== null) {\r\n                Match.update(vm.match, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Match.save(vm.match, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:matchUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        vm.datePickerOpenStatus.matchdatetime = false;\r\n\r\n        function openCalendar (date) {\r\n            vm.datePickerOpenStatus[date] = true;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('MatchDetailController', MatchDetailController);\r\n\r\n    MatchDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Match', 'Competition'];\r\n\r\n    function MatchDetailController($scope, $rootScope, $stateParams, previousState, entity, Match, Competition) {\r\n        var vm = this;\r\n\r\n        vm.match = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:matchUpdate', function(event, result) {\r\n            vm.match = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('MatchDeleteController',MatchDeleteController);\r\n\r\n    MatchDeleteController.$inject = ['$uibModalInstance', 'entity', 'Match'];\r\n\r\n    function MatchDeleteController($uibModalInstance, entity, Match) {\r\n        var vm = this;\r\n\r\n        vm.match = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Match.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('match', {\r\n            parent: 'entity',\r\n            url: '/match?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Matches'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/match/matches.html',\r\n                    controller: 'MatchController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('match-detail', {\r\n            parent: 'match',\r\n            url: '/match/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Match'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/match/match-detail.html',\r\n                    controller: 'MatchDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Match', function($stateParams, Match) {\r\n                    return Match.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'match',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('match-detail.edit', {\r\n            parent: 'match-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/match/match-dialog.html',\r\n                    controller: 'MatchDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Match', function(Match) {\r\n                            return Match.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('match.new', {\r\n            parent: 'match',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/match/match-dialog.html',\r\n                    controller: 'MatchDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                hometeam: null,\r\n                                awayteam: null,\r\n                                homegoals: null,\r\n                                awaygoals: null,\r\n                                location: null,\r\n                                description: null,\r\n                                matchdatetime: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('match', null, { reload: 'match' });\r\n                }, function() {\r\n                    $state.go('match');\r\n                });\r\n            }]\r\n        })\r\n        .state('match.edit', {\r\n            parent: 'match',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/match/match-dialog.html',\r\n                    controller: 'MatchDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Match', function(Match) {\r\n                            return Match.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('match', null, { reload: 'match' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('match.delete', {\r\n            parent: 'match',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/match/match-delete-dialog.html',\r\n                    controller: 'MatchDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Match', function(Match) {\r\n                            return Match.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('match', null, { reload: 'match' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Match', Match);\r\n\r\n    Match.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Match ($resource, DateUtils) {\r\n        var resourceUrl =  'api/matches/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.matchdatetime = DateUtils.convertDateTimeFromServer(data.matchdatetime);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('MatchController', MatchController);\r\n\r\n    MatchController.$inject = ['$state', 'Match', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function MatchController($state, Match, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Match.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.matches = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LeagueTableDialogController', LeagueTableDialogController);\r\n\r\n    LeagueTableDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'LeagueTable', 'Competition'];\r\n\r\n    function LeagueTableDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, LeagueTable, Competition) {\r\n        var vm = this;\r\n\r\n        vm.leagueTable = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n        vm.competitions = Competition.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.leagueTable.id !== null) {\r\n                LeagueTable.update(vm.leagueTable, onSaveSuccess, onSaveError);\r\n            } else {\r\n                LeagueTable.save(vm.leagueTable, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:leagueTableUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LeagueTableDetailController', LeagueTableDetailController);\r\n\r\n    LeagueTableDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'LeagueTable', 'Competition'];\r\n\r\n    function LeagueTableDetailController($scope, $rootScope, $stateParams, previousState, entity, LeagueTable, Competition) {\r\n        var vm = this;\r\n\r\n        vm.leagueTable = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:leagueTableUpdate', function(event, result) {\r\n            vm.leagueTable = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LeagueTableDeleteController',LeagueTableDeleteController);\r\n\r\n    LeagueTableDeleteController.$inject = ['$uibModalInstance', 'entity', 'LeagueTable'];\r\n\r\n    function LeagueTableDeleteController($uibModalInstance, entity, LeagueTable) {\r\n        var vm = this;\r\n\r\n        vm.leagueTable = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            LeagueTable.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('league-table', {\r\n            parent: 'entity',\r\n            url: '/league-table?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'LeagueTables'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/league-table/league-tables.html',\r\n                    controller: 'LeagueTableController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('league-table-detail', {\r\n            parent: 'league-table',\r\n            url: '/league-table/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'LeagueTable'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/league-table/league-table-detail.html',\r\n                    controller: 'LeagueTableDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'LeagueTable', function($stateParams, LeagueTable) {\r\n                    return LeagueTable.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'league-table',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('league-table-detail.edit', {\r\n            parent: 'league-table-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/league-table/league-table-dialog.html',\r\n                    controller: 'LeagueTableDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['LeagueTable', function(LeagueTable) {\r\n                            return LeagueTable.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('league-table.new', {\r\n            parent: 'league-table',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/league-table/league-table-dialog.html',\r\n                    controller: 'LeagueTableDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                position: null,\r\n                                teamname: null,\r\n                                played: null,\r\n                                wins: null,\r\n                                draws: null,\r\n                                losses: null,\r\n                                goalsfor: null,\r\n                                goalsagainst: null,\r\n                                points: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('league-table', null, { reload: 'league-table' });\r\n                }, function() {\r\n                    $state.go('league-table');\r\n                });\r\n            }]\r\n        })\r\n        .state('league-table.edit', {\r\n            parent: 'league-table',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/league-table/league-table-dialog.html',\r\n                    controller: 'LeagueTableDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['LeagueTable', function(LeagueTable) {\r\n                            return LeagueTable.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('league-table', null, { reload: 'league-table' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('league-table.delete', {\r\n            parent: 'league-table',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/league-table/league-table-delete-dialog.html',\r\n                    controller: 'LeagueTableDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['LeagueTable', function(LeagueTable) {\r\n                            return LeagueTable.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('league-table', null, { reload: 'league-table' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('LeagueTable', LeagueTable);\r\n\r\n    LeagueTable.$inject = ['$resource'];\r\n\r\n    function LeagueTable ($resource) {\r\n        var resourceUrl =  'api/league-tables/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LeagueTableController', LeagueTableController);\r\n\r\n    LeagueTableController.$inject = ['$state', 'LeagueTable', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function LeagueTableController($state, LeagueTable, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            LeagueTable.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.leagueTables = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JobDialogController', JobDialogController);\r\n\r\n    JobDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Job'];\r\n\r\n    function JobDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Job) {\r\n        var vm = this;\r\n\r\n        vm.job = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.job.id !== null) {\r\n                Job.update(vm.job, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Job.save(vm.job, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:jobUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JobDetailController', JobDetailController);\r\n\r\n    JobDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Job'];\r\n\r\n    function JobDetailController($scope, $rootScope, $stateParams, previousState, entity, Job) {\r\n        var vm = this;\r\n\r\n        vm.job = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:jobUpdate', function(event, result) {\r\n            vm.job = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JobDeleteController',JobDeleteController);\r\n\r\n    JobDeleteController.$inject = ['$uibModalInstance', 'entity', 'Job'];\r\n\r\n    function JobDeleteController($uibModalInstance, entity, Job) {\r\n        var vm = this;\r\n\r\n        vm.job = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Job.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('job', {\r\n            parent: 'entity',\r\n            url: '/job?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Jobs'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/job/jobs.html',\r\n                    controller: 'JobController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('job-detail', {\r\n            parent: 'job',\r\n            url: '/job/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Job'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/job/job-detail.html',\r\n                    controller: 'JobDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Job', function($stateParams, Job) {\r\n                    return Job.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'job',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('job-detail.edit', {\r\n            parent: 'job-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/job/job-dialog.html',\r\n                    controller: 'JobDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Job', function(Job) {\r\n                            return Job.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('job.new', {\r\n            parent: 'job',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/job/job-dialog.html',\r\n                    controller: 'JobDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('job', null, { reload: 'job' });\r\n                }, function() {\r\n                    $state.go('job');\r\n                });\r\n            }]\r\n        })\r\n        .state('job.edit', {\r\n            parent: 'job',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/job/job-dialog.html',\r\n                    controller: 'JobDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Job', function(Job) {\r\n                            return Job.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('job', null, { reload: 'job' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('job.delete', {\r\n            parent: 'job',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/job/job-delete-dialog.html',\r\n                    controller: 'JobDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Job', function(Job) {\r\n                            return Job.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('job', null, { reload: 'job' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Job', Job);\r\n\r\n    Job.$inject = ['$resource'];\r\n\r\n    function Job ($resource) {\r\n        var resourceUrl =  'api/jobs/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JobController', JobController);\r\n\r\n    JobController.$inject = ['$state', 'Job', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function JobController($state, Job, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Job.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.jobs = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('entity', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('CompetitionDialogController', CompetitionDialogController);\r\n\r\n    CompetitionDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Competition', 'Season'];\r\n\r\n    function CompetitionDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Competition, Season) {\r\n        var vm = this;\r\n\r\n        vm.competition = entity;\r\n        vm.clear = clear;\r\n        vm.save = save;\r\n        vm.seasons = Season.query();\r\n\r\n        $timeout(function (){\r\n            angular.element('.form-group:eq(1)>input').focus();\r\n        });\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.competition.id !== null) {\r\n                Competition.update(vm.competition, onSaveSuccess, onSaveError);\r\n            } else {\r\n                Competition.save(vm.competition, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            $scope.$emit('poliApp:competitionUpdate', result);\r\n            $uibModalInstance.close(result);\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('CompetitionDetailController', CompetitionDetailController);\r\n\r\n    CompetitionDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Competition', 'Season'];\r\n\r\n    function CompetitionDetailController($scope, $rootScope, $stateParams, previousState, entity, Competition, Season) {\r\n        var vm = this;\r\n\r\n        vm.competition = entity;\r\n        vm.previousState = previousState.name;\r\n\r\n        var unsubscribe = $rootScope.$on('poliApp:competitionUpdate', function(event, result) {\r\n            vm.competition = result;\r\n        });\r\n        $scope.$on('$destroy', unsubscribe);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('CompetitionDeleteController',CompetitionDeleteController);\r\n\r\n    CompetitionDeleteController.$inject = ['$uibModalInstance', 'entity', 'Competition'];\r\n\r\n    function CompetitionDeleteController($uibModalInstance, entity, Competition) {\r\n        var vm = this;\r\n\r\n        vm.competition = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (id) {\r\n            Competition.delete({id: id},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('competition', {\r\n            parent: 'entity',\r\n            url: '/competition?page&sort&search',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Competitions'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/competition/competitions.html',\r\n                    controller: 'CompetitionController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n        .state('competition-detail', {\r\n            parent: 'competition',\r\n            url: '/competition/{id}',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Competition'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/entities/competition/competition-detail.html',\r\n                    controller: 'CompetitionDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                entity: ['$stateParams', 'Competition', function($stateParams, Competition) {\r\n                    return Competition.get({id : $stateParams.id}).$promise;\r\n                }],\r\n                previousState: [\"$state\", function ($state) {\r\n                    var currentStateData = {\r\n                        name: $state.current.name || 'competition',\r\n                        params: $state.params,\r\n                        url: $state.href($state.current.name, $state.params)\r\n                    };\r\n                    return currentStateData;\r\n                }]\r\n            }\r\n        })\r\n        .state('competition-detail.edit', {\r\n            parent: 'competition-detail',\r\n            url: '/detail/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/competition/competition-dialog.html',\r\n                    controller: 'CompetitionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Competition', function(Competition) {\r\n                            return Competition.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('^', {}, { reload: false });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('competition.new', {\r\n            parent: 'competition',\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/competition/competition-dialog.html',\r\n                    controller: 'CompetitionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                name: null,\r\n                                id: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('competition', null, { reload: 'competition' });\r\n                }, function() {\r\n                    $state.go('competition');\r\n                });\r\n            }]\r\n        })\r\n        .state('competition.edit', {\r\n            parent: 'competition',\r\n            url: '/{id}/edit',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/competition/competition-dialog.html',\r\n                    controller: 'CompetitionDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['Competition', function(Competition) {\r\n                            return Competition.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('competition', null, { reload: 'competition' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('competition.delete', {\r\n            parent: 'competition',\r\n            url: '/{id}/delete',\r\n            data: {\r\n                authorities: ['ROLE_USER']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/entities/competition/competition-delete-dialog.html',\r\n                    controller: 'CompetitionDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['Competition', function(Competition) {\r\n                            return Competition.get({id : $stateParams.id}).$promise;\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('competition', null, { reload: 'competition' });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Competition', Competition);\r\n\r\n    Competition.$inject = ['$resource'];\r\n\r\n    function Competition ($resource) {\r\n        var resourceUrl =  'api/competitions/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('CompetitionController', CompetitionController);\r\n\r\n    CompetitionController.$inject = ['$state', 'Competition', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function CompetitionController($state, Competition, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Competition.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.competitions = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .filter('words', words);\r\n\r\n    function words() {\r\n        return wordsFilter;\r\n\r\n        function wordsFilter(input, words) {\r\n            if (isNaN(words)) {\r\n                return input;\r\n            }\r\n            if (words <= 0) {\r\n                return '';\r\n            }\r\n            if (input) {\r\n                var inputWords = input.split(/\\s+/);\r\n                if (inputWords.length > words) {\r\n                    input = inputWords.slice(0, words).join(' ') + '...';\r\n                }\r\n            }\r\n            return input;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .filter('characters', characters);\r\n\r\n    function characters () {\r\n        return charactersFilter;\r\n\r\n        function charactersFilter(input, chars, breakOnWord) {\r\n            if (isNaN(chars)) {\r\n                return input;\r\n            }\r\n            if (chars <= 0) {\r\n                return '';\r\n            }\r\n            if (input && input.length > chars) {\r\n                input = input.substring(0, chars);\r\n\r\n                if (!breakOnWord) {\r\n                    var lastspace = input.lastIndexOf(' ');\r\n                    // Get last space\r\n                    if (lastspace !== -1) {\r\n                        input = input.substr(0, lastspace);\r\n                    }\r\n                } else {\r\n                    while (input.charAt(input.length-1) === ' ') {\r\n                        input = input.substr(0, input.length - 1);\r\n                    }\r\n                }\r\n                return input + '...';\r\n            }\r\n            return input;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('jhSortBy', jhSortBy);\r\n\r\n    function jhSortBy() {\r\n        var directive = {\r\n            restrict: 'A',\r\n            scope: false,\r\n            require: '^jhSort',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs, parentCtrl) {\r\n            element.bind('click', function () {\r\n                parentCtrl.sort(attrs.jhSortBy);\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('jhSort', jhSort);\r\n\r\n    function jhSort () {\r\n        var directive = {\r\n            restrict: 'A',\r\n            scope: {\r\n                predicate: '=jhSort',\r\n                ascending: '=',\r\n                callback: '&'\r\n            },\r\n            controller: SortController,\r\n            controllerAs: 'vm',\r\n            bindToController: true\r\n        };\r\n\r\n        return directive;\r\n    }\r\n\r\n    SortController.$inject = ['$scope', '$element'];\r\n\r\n    function SortController ($scope, $element) {\r\n        var vm = this;\r\n\r\n        vm.applyClass = applyClass;\r\n        vm.resetClasses = resetClasses;\r\n        vm.sort = sort;\r\n        vm.triggerApply = triggerApply;\r\n\r\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\r\n        vm.triggerApply();\r\n\r\n        function applyClass (element) {\r\n            var thisIcon = element.find('span.glyphicon'),\r\n                sortIcon = 'glyphicon-sort',\r\n                sortAsc = 'glyphicon-sort-by-attributes',\r\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\r\n                remove = sortIcon + ' ' + sortDesc,\r\n                add = sortAsc;\r\n            if (!vm.ascending) {\r\n                remove = sortIcon + ' ' + sortAsc;\r\n                add = sortDesc;\r\n            }\r\n            vm.resetClasses();\r\n            thisIcon.removeClass(remove);\r\n            thisIcon.addClass(add);\r\n        }\r\n\r\n        function resetClasses () {\r\n            var allThIcons = $element.find('span.glyphicon'),\r\n                sortIcon = 'glyphicon-sort',\r\n                sortAsc = 'glyphicon-sort-by-attributes',\r\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\r\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\r\n            allThIcons.addClass(sortIcon);\r\n        }\r\n\r\n        function sort (field) {\r\n            if (field !== vm.predicate) {\r\n                vm.ascending = true;\r\n            } else {\r\n                vm.ascending = !vm.ascending;\r\n            }\r\n            vm.predicate = field;\r\n            $scope.$apply();\r\n            vm.callback();\r\n        }\r\n\r\n        function triggerApply (values)  {\r\n            vm.resetClasses();\r\n            if (values && values[0] !== '_score') {\r\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n(function(){\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('ParseLinks', ParseLinks);\r\n\r\n    function ParseLinks () {\r\n\r\n        var service = {\r\n            parse : parse\r\n        };\r\n\r\n        return service;\r\n\r\n        function parse(header) {\r\n            if (header.length === 0) {\r\n                throw new Error('input must not be of zero length');\r\n            }\r\n\r\n            // Split parts by comma\r\n            var parts = header.split(',');\r\n            var links = {};\r\n            // Parse each part into a named link\r\n            angular.forEach(parts, function(p) {\r\n                var section = p.split('>;');\r\n                if (section.length !== 2) {\r\n                    throw new Error('section could not be split on \">;\"');\r\n                }\r\n                var url = section[0].replace(/<(.*)/, '$1').trim();\r\n                var queryString = {};\r\n                url.replace(\r\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\r\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\r\n                );\r\n                var page = queryString.page;\r\n                if (angular.isString(page)) {\r\n                    page = parseInt(page);\r\n                }\r\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\r\n                links[name] = page;\r\n            });\r\n            return links;\r\n        }\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('PaginationUtil', PaginationUtil);\r\n\r\n    function PaginationUtil () {\r\n\r\n        var service = {\r\n            parseAscending : parseAscending,\r\n            parsePage : parsePage,\r\n            parsePredicate : parsePredicate\r\n        };\r\n\r\n        return service;\r\n\r\n        function parseAscending (sort) {\r\n            var sortArray = sort.split(',');\r\n            if (sortArray.length > 1){\r\n                return sort.split(',').slice(-1)[0] === 'asc';\r\n            } else {\r\n                // default to true if no sort defined\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // query params are strings, and need to be parsed\r\n        function parsePage (page) {\r\n            return parseInt(page);\r\n        }\r\n\r\n        // sort can be in the format `id,asc` or `id`\r\n        function parsePredicate (sort) {\r\n            var sortArray = sort.split(',');\r\n            if (sortArray.length > 1){\r\n                sortArray.pop();\r\n            }\r\n            return sortArray.join(',');\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    var jhiItemCount = {\r\n        template: '<div class=\"info\">' +\r\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) === 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\r\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\r\n                    'of {{$ctrl.queryCount}} items.' +\r\n                '</div>',\r\n        bindings: {\r\n            page: '<',\r\n            queryCount: '<total',\r\n            itemsPerPage: '<'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .component('jhiItemCount', jhiItemCount);\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('DateUtils', DateUtils);\r\n\r\n    DateUtils.$inject = ['$filter'];\r\n\r\n    function DateUtils($filter) {\r\n\r\n        var service = {\r\n            convertDateTimeFromServer: convertDateTimeFromServer,\r\n            convertLocalDateFromServer: convertLocalDateFromServer,\r\n            convertLocalDateToServer: convertLocalDateToServer,\r\n            dateformat: dateformat\r\n        };\r\n\r\n        return service;\r\n\r\n        function convertDateTimeFromServer(date) {\r\n            if (date) {\r\n                return new Date(date);\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        function convertLocalDateFromServer(date) {\r\n            if (date) {\r\n                var dateString = date.split('-');\r\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function convertLocalDateToServer(date) {\r\n            if (date) {\r\n                return $filter('date')(date, 'yyyy-MM-dd');\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        function dateformat() {\r\n            return 'yyyy-MM-dd';\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('DataUtils', DataUtils);\r\n\r\n    DataUtils.$inject = ['$window'];\r\n\r\n    function DataUtils ($window) {\r\n\r\n        var service = {\r\n            abbreviate: abbreviate,\r\n            byteSize: byteSize,\r\n            openFile: openFile,\r\n            toBase64: toBase64\r\n        };\r\n\r\n        return service;\r\n\r\n        function abbreviate (text) {\r\n            if (!angular.isString(text)) {\r\n                return '';\r\n            }\r\n            if (text.length < 30) {\r\n                return text;\r\n            }\r\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\r\n        }\r\n\r\n        function byteSize (base64String) {\r\n            if (!angular.isString(base64String)) {\r\n                return '';\r\n            }\r\n\r\n            function endsWith(suffix, str) {\r\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n            }\r\n\r\n            function paddingSize(base64String) {\r\n                if (endsWith('==', base64String)) {\r\n                    return 2;\r\n                }\r\n                if (endsWith('=', base64String)) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            function size(base64String) {\r\n                return base64String.length / 4 * 3 - paddingSize(base64String);\r\n            }\r\n\r\n            function formatAsBytes(size) {\r\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\r\n            }\r\n\r\n            return formatAsBytes(size(base64String));\r\n        }\r\n\r\n        function openFile (type, data) {\r\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\r\n        }\r\n\r\n        function toBase64 (file, cb) {\r\n            var fileReader = new FileReader();\r\n            fileReader.readAsDataURL(file);\r\n            fileReader.onload = function (e) {\r\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\r\n                cb(base64Data);\r\n            };\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .filter('capitalize', capitalize);\r\n\r\n    function capitalize() {\r\n        return capitalizeFilter;\r\n\r\n        function capitalizeFilter (input) {\r\n            if (input !== null) {\r\n                input = input.toLowerCase();\r\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\r\n            }\r\n            return input;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    /*jshint bitwise: false*/\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Base64', Base64);\r\n\r\n    function Base64 () {\r\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\r\n            'QRSTUVWXYZabcdef' +\r\n            'ghijklmnopqrstuv' +\r\n            'wxyz0123456789+/' +\r\n            '=';\r\n\r\n        var service = {\r\n            decode : decode,\r\n            encode : encode\r\n        };\r\n\r\n        return service;\r\n\r\n        function encode (input) {\r\n            var output = '',\r\n                chr1, chr2, chr3,\r\n                enc1, enc2, enc3, enc4,\r\n                i = 0;\r\n\r\n            while (i < input.length) {\r\n                chr1 = input.charCodeAt(i++);\r\n                chr2 = input.charCodeAt(i++);\r\n                chr3 = input.charCodeAt(i++);\r\n\r\n                enc1 = chr1 >> 2;\r\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n                enc4 = chr3 & 63;\r\n\r\n                if (isNaN(chr2)) {\r\n                    enc3 = enc4 = 64;\r\n                } else if (isNaN(chr3)) {\r\n                    enc4 = 64;\r\n                }\r\n\r\n                output = output +\r\n                    keyStr.charAt(enc1) +\r\n                    keyStr.charAt(enc2) +\r\n                    keyStr.charAt(enc3) +\r\n                    keyStr.charAt(enc4);\r\n            }\r\n\r\n            return output;\r\n        }\r\n\r\n        function decode (input) {\r\n            var output = '',\r\n                chr1, chr2, chr3,\r\n                enc1, enc2, enc3, enc4,\r\n                i = 0;\r\n\r\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\r\n\r\n            while (i < input.length) {\r\n                enc1 = keyStr.indexOf(input.charAt(i++));\r\n                enc2 = keyStr.indexOf(input.charAt(i++));\r\n                enc3 = keyStr.indexOf(input.charAt(i++));\r\n                enc4 = keyStr.indexOf(input.charAt(i++));\r\n\r\n                chr1 = (enc1 << 2) | (enc2 >> 4);\r\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n                chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n                output = output + String.fromCharCode(chr1);\r\n\r\n                if (enc3 !== 64) {\r\n                    output = output + String.fromCharCode(chr2);\r\n                }\r\n                if (enc4 !== 64) {\r\n                    output = output + String.fromCharCode(chr3);\r\n                }\r\n            }\r\n\r\n            return output;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('LoginService', LoginService);\r\n\r\n    LoginService.$inject = ['$uibModal'];\r\n\r\n    function LoginService ($uibModal) {\r\n        var service = {\r\n            open: open\r\n        };\r\n\r\n        var modalInstance = null;\r\n        var resetModal = function () {\r\n            modalInstance = null;\r\n        };\r\n\r\n        return service;\r\n\r\n        function open () {\r\n            if (modalInstance !== null) return;\r\n            modalInstance = $uibModal.open({\r\n                animation: true,\r\n                templateUrl: 'app/components/login/login.html',\r\n                controller: 'LoginController',\r\n                controllerAs: 'vm'\r\n            });\r\n            modalInstance.result.then(\r\n                resetModal,\r\n                resetModal\r\n            );\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LoginController', LoginController);\r\n\r\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\r\n\r\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\r\n        var vm = this;\r\n\r\n        vm.authenticationError = false;\r\n        vm.cancel = cancel;\r\n        vm.credentials = {};\r\n        vm.login = login;\r\n        vm.password = null;\r\n        vm.register = register;\r\n        vm.rememberMe = true;\r\n        vm.requestResetPassword = requestResetPassword;\r\n        vm.username = null;\r\n\r\n        $timeout(function (){angular.element('#username').focus();});\r\n\r\n        function cancel () {\r\n            vm.credentials = {\r\n                username: null,\r\n                password: null,\r\n                rememberMe: true\r\n            };\r\n            vm.authenticationError = false;\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function login (event) {\r\n            event.preventDefault();\r\n            Auth.login({\r\n                username: vm.username,\r\n                password: vm.password,\r\n                rememberMe: vm.rememberMe\r\n            }).then(function () {\r\n                vm.authenticationError = false;\r\n                $uibModalInstance.close();\r\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\r\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\r\n                    $state.go('home');\r\n                }\r\n\r\n                $rootScope.$broadcast('authenticationSuccess');\r\n\r\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\r\n                // since login is successful, go to stored previousState and clear previousState\r\n                if (Auth.getPreviousState()) {\r\n                    var previousState = Auth.getPreviousState();\r\n                    Auth.resetPreviousState();\r\n                    $state.go(previousState.name, previousState.params);\r\n                }\r\n            }).catch(function () {\r\n                vm.authenticationError = true;\r\n            });\r\n        }\r\n\r\n        function register () {\r\n            $uibModalInstance.dismiss('cancel');\r\n            $state.go('register');\r\n        }\r\n\r\n        function requestResetPassword () {\r\n            $uibModalInstance.dismiss('cancel');\r\n            $state.go('requestReset');\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('showValidation', showValidation);\r\n\r\n    function showValidation () {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: 'form',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc (scope, element, attrs, formCtrl) {\r\n            element.find('.form-group').each(function() {\r\n                var $formGroup = angular.element(this);\r\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\r\n\r\n                if ($inputs.length > 0) {\r\n                    $inputs.each(function() {\r\n                        var $input = angular.element(this);\r\n                        var inputName = $input.attr('name');\r\n                        scope.$watch(function() {\r\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\r\n                        }, function(isInvalid) {\r\n                            $formGroup.toggleClass('has-error', isInvalid);\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .constant('paginationConstants', {\r\n            'itemsPerPage': 20\r\n        });\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('minbytes', minbytes);\r\n\r\n    function minbytes () {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: '?ngModel',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc (scope, element, attrs, ngModel) {\r\n            if (!ngModel) {\r\n                return;\r\n            }\r\n\r\n            ngModel.$validators.minbytes = function (modelValue) {\r\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\r\n            };\r\n        }\r\n\r\n        function endsWith(suffix, str) {\r\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n        }\r\n\r\n        function paddingSize(base64String) {\r\n            if (endsWith('==', base64String)) {\r\n                return 2;\r\n            }\r\n            if (endsWith('=', base64String)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        function numberOfBytes(base64String) {\r\n            return base64String.length / 4 * 3 - paddingSize(base64String);\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('maxbytes', maxbytes);\r\n\r\n    function maxbytes () {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: '?ngModel',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc (scope, element, attrs, ngModel) {\r\n            if (!ngModel) {\r\n                return;\r\n            }\r\n\r\n            ngModel.$validators.maxbytes = function (modelValue) {\r\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\r\n            };\r\n        }\r\n\r\n        function endsWith(suffix, str) {\r\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n        }\r\n\r\n        function paddingSize(base64String) {\r\n            if (endsWith('==', base64String)) {\r\n                return 2;\r\n            }\r\n            if (endsWith('=', base64String)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        function numberOfBytes(base64String) {\r\n            return base64String.length / 4 * 3 - paddingSize(base64String);\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    var jhiAlertError = {\r\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\r\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\r\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\r\n                        '</div>' +\r\n                  '</div>',\r\n        controller: jhiAlertErrorController\r\n    };\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .component('jhiAlertError', jhiAlertError);\r\n\r\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\r\n\r\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\r\n        var vm = this;\r\n\r\n        vm.alerts = [];\r\n\r\n        function addErrorAlert (message, key, data) {\r\n            vm.alerts.push(\r\n                AlertService.add(\r\n                    {\r\n                        type: 'danger',\r\n                        msg: message,\r\n                        timeout: 5000,\r\n                        toast: AlertService.isToast(),\r\n                        scoped: true\r\n                    },\r\n                    vm.alerts\r\n                )\r\n            );\r\n        }\r\n\r\n        var cleanHttpErrorListener = $rootScope.$on('poliApp.httpError', function (event, httpResponse) {\r\n            var i;\r\n            event.stopPropagation();\r\n            switch (httpResponse.status) {\r\n            // connection refused, server not reachable\r\n            case 0:\r\n                addErrorAlert('Server not reachable','error.server.not.reachable');\r\n                break;\r\n\r\n            case 400:\r\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\r\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\r\n                }).sort();\r\n                var errorHeader = httpResponse.headers(headers[0]);\r\n                var entityKey = httpResponse.headers(headers[1]);\r\n                if (angular.isString(errorHeader)) {\r\n                    var entityName = entityKey;\r\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\r\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\r\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\r\n                        var fieldError = httpResponse.data.fieldErrors[i];\r\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\r\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\r\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\r\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\r\n                    }\r\n                } else if (httpResponse.data && httpResponse.data.message) {\r\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\r\n                } else {\r\n                    addErrorAlert(httpResponse.data);\r\n                }\r\n                break;\r\n\r\n            case 404:\r\n                addErrorAlert('Not found','error.url.not.found');\r\n                break;\r\n\r\n            default:\r\n                if (httpResponse.data && httpResponse.data.message) {\r\n                    addErrorAlert(httpResponse.data.message);\r\n                } else {\r\n                    addErrorAlert(angular.toJson(httpResponse));\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.$on('$destroy', function () {\r\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\r\n                cleanHttpErrorListener();\r\n                vm.alerts = [];\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .provider('AlertService', AlertService);\r\n\r\n    function AlertService () {\r\n        this.toast = false;\r\n        /*jshint validthis: true */\r\n        this.$get = getService;\r\n\r\n        this.showAsToast = function(isToast) {\r\n            this.toast = isToast;\r\n        };\r\n\r\n        getService.$inject = ['$timeout', '$sce'];\r\n\r\n        function getService ($timeout, $sce) {\r\n            var toast = this.toast,\r\n                alertId = 0, // unique id for each alert. Starts from 0.\r\n                alerts = [],\r\n                timeout = 5000; // default timeout\r\n\r\n            return {\r\n                factory: factory,\r\n                isToast: isToast,\r\n                add: addAlert,\r\n                closeAlert: closeAlert,\r\n                closeAlertByIndex: closeAlertByIndex,\r\n                clear: clear,\r\n                get: get,\r\n                success: success,\r\n                error: error,\r\n                info: info,\r\n                warning : warning\r\n            };\r\n\r\n            function isToast() {\r\n                return toast;\r\n            }\r\n\r\n            function clear() {\r\n                alerts = [];\r\n            }\r\n\r\n            function get() {\r\n                return alerts;\r\n            }\r\n\r\n            function success(msg, params, position) {\r\n                return this.add({\r\n                    type: 'success',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: timeout,\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function error(msg, params, position) {\r\n                return this.add({\r\n                    type: 'danger',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: timeout,\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function warning(msg, params, position) {\r\n                return this.add({\r\n                    type: 'warning',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: timeout,\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function info(msg, params, position) {\r\n                return this.add({\r\n                    type: 'info',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: timeout,\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function factory(alertOptions) {\r\n                var alert = {\r\n                    type: alertOptions.type,\r\n                    msg: $sce.trustAsHtml(alertOptions.msg),\r\n                    id: alertOptions.alertId,\r\n                    timeout: alertOptions.timeout,\r\n                    toast: alertOptions.toast,\r\n                    position: alertOptions.position ? alertOptions.position : 'top right',\r\n                    scoped: alertOptions.scoped,\r\n                    close: function (alerts) {\r\n                        return closeAlert(this.id, alerts);\r\n                    }\r\n                };\r\n                if(!alert.scoped) {\r\n                    alerts.push(alert);\r\n                }\r\n                return alert;\r\n            }\r\n\r\n            function addAlert(alertOptions, extAlerts) {\r\n                alertOptions.alertId = alertId++;\r\n                var that = this;\r\n                var alert = this.factory(alertOptions);\r\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\r\n                    $timeout(function () {\r\n                        that.closeAlert(alertOptions.alertId, extAlerts);\r\n                    }, alertOptions.timeout);\r\n                }\r\n                return alert;\r\n            }\r\n\r\n            function closeAlert(id, extAlerts) {\r\n                var thisAlerts = extAlerts ? extAlerts : alerts;\r\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\r\n            }\r\n\r\n            function closeAlertByIndex(index, thisAlerts) {\r\n                return thisAlerts.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    var jhiAlert = {\r\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\r\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\r\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\r\n                        '</div>' +\r\n                  '</div>',\r\n        controller: jhiAlertController\r\n    };\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .component('jhiAlert', jhiAlert);\r\n\r\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\r\n\r\n    function jhiAlertController($scope, AlertService) {\r\n        var vm = this;\r\n\r\n        vm.alerts = AlertService.get();\r\n        $scope.$on('$destroy', function () {\r\n            vm.alerts = [];\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubTeam', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubStaff', {\r\n            parent: 'clubTeam',\r\n            url: '/clubStaff',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubTeam/clubStaff/clubStaff.html',\r\n                    controller: 'ClubStaffController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n             params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        });\r\n    }    \r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Staff', Staff);\r\n\r\n    Staff.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Staff ($resource, DateUtils) {\r\n        var resourceUrl =  'api/staff/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.dateofbirth = DateUtils.convertLocalDateFromServer(data.dateofbirth);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubStaffController', ClubStaffController);\r\n\r\n    ClubStaffController.$inject = ['$state', 'DataUtils', 'Staff', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubStaffController($state, DataUtils, Staff, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        vm.showStaffDetails = function(staff) {\r\n            vm.selectedPlayer = staff;\r\n            $('#staffDetailsModal').modal('show');\r\n        };\r\n\r\n        loadAll();\r\n        function loadAll () {\r\n            Staff.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.staff = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubPlayers', {\r\n            parent: 'clubTeam',\r\n            url: '/clubPlayers',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubTeam/clubPlayers/clubPlayers.html',\r\n                    controller: 'ClubPlayersController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        });\r\n    }    \r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Player', Player);\r\n\r\n    Player.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Player ($resource, DateUtils) {\r\n        var resourceUrl =  'api/players/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.dateofbirth = DateUtils.convertLocalDateFromServer(data.dateofbirth);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.dateofbirth = DateUtils.convertLocalDateToServer(copy.dateofbirth);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubPlayersController', ClubPlayersController);\r\n\r\n    ClubPlayersController.$inject = ['$state', 'DataUtils', 'Player', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubPlayersController($state, DataUtils, Player, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        vm.showPlayerDetails = function(player) {\r\n            vm.selectedPlayer = player;\r\n            $('#playerDetailsModal').modal('show');\r\n        };\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Player.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.players = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubSchedule', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubRanking', {\r\n            parent: 'clubSchedule',\r\n            url: '/clubRanking',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubSchedule/clubRanking/clubRanking.html',\r\n                    controller: 'ClubRankingController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        });\r\n    }    \r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('LeagueTable', LeagueTable);\r\n\r\n    LeagueTable.$inject = ['$resource'];\r\n\r\n    function LeagueTable ($resource) {\r\n        var resourceUrl =  'api/league-tables/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubRankingController', ClubRankingController);\r\n\r\n    ClubRankingController.$inject = ['$scope', '$state', 'LeagueTable', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubRankingController($scope, $state, LeagueTable, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll() {\r\n            LeagueTable.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                if (vm.predicate == \"id\")\r\n                    data.sort(function(x, y) { return x.position > y.position ? 1 : -1; });\r\n                vm.leagueTables = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        $scope.setFontWeight = function (team) {\r\n            if (team.teamname == 'Politehnica București') {\r\n                return { fontWeight: \"bold\" }\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubMatches', {\r\n            parent: 'clubSchedule',\r\n            url: '/clubMatches',\r\n            data: {\r\n                 authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubSchedule/clubMatches/clubMatches.html',\r\n                    controller: 'ClubMatchesController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Match', Match);\r\n\r\n    Match.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function Match($resource, DateUtils) {\r\n        var resourceUrl = 'api/matches/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true },\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.matchdate = DateUtils.convertLocalDateFromServer(data.matchdate);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': {\r\n                method: 'PUT',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.matchdate = DateUtils.convertLocalDateToServer(copy.matchdate);\r\n                    return angular.toJson(copy);\r\n                }\r\n            },\r\n            'save': {\r\n                method: 'POST',\r\n                transformRequest: function (data) {\r\n                    var copy = angular.copy(data);\r\n                    copy.matchdate = DateUtils.convertLocalDateToServer(copy.matchdate);\r\n                    return angular.toJson(copy);\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubMatchesController', ClubMatchesController);\r\n\r\n    ClubMatchesController.$inject = ['$state', 'Match', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubMatchesController($state, Match, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            Match.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                console.log(data);\r\n                vm.matches = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubPartners', {\r\n            parent: 'app',\r\n            url: '/clubPartners',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubPartners/clubPartners.html',\r\n                    controller: 'ClubPartnersController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubPartnersController', ClubPartnersController);\r\n\r\n    ClubPartnersController.$inject = ['$state', 'DataUtils', 'Partner', 'ParseLinks', 'AlertService'];\r\n\r\n    function ClubPartnersController($state, DataUtils, Partner, ParseLinks, AlertService) {\r\n\r\n        var vm = this;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll() {\r\n            Partner.query({\r\n            }, onSuccess, onError);\r\n            function onSuccess(data, headers) {\r\n                vm.partners = data;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('Partner', Partner);\r\n\r\n    Partner.$inject = ['$resource'];\r\n\r\n    function Partner ($resource) {\r\n        var resourceUrl =  'api/partners/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubNews', {\r\n            parent: 'app',\r\n            url: '/clubNews',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubNews/clubNews.html',\r\n                    controller: 'ClubNewsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                },\r\n                search: null\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\r\n                        search: $stateParams.search\r\n                    };\r\n                }]\r\n            }\r\n        })\r\n            .state('clubNews-detail', {\r\n                parent: 'clubNews',\r\n                url: '/clubNews/{id}',\r\n                data: {\r\n                    authorities: []\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/clubNews/clubNews-detail.html',\r\n                        controller: 'ClubNewsDetailController',\r\n                        controllerAs: 'vm'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    entity: ['$stateParams', 'News', function ($stateParams, News) {\r\n                        return News.get({ id: $stateParams.id }).$promise;\r\n                    }],\r\n                    previousState: [\"$state\", function ($state) {\r\n                        var currentStateData = {\r\n                            name: $state.current.name || 'clubNews',\r\n                            params: $state.params,\r\n                            url: $state.href($state.current.name, $state.params)\r\n                        };\r\n                        return currentStateData;\r\n                    }]\r\n                }\r\n            });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n    angular\r\n        .module('poliApp')\r\n        .factory('News', News);\r\n\r\n    News.$inject = ['$resource', 'DateUtils'];\r\n\r\n    function News ($resource, DateUtils) {\r\n        var resourceUrl =  'api/news/:id';\r\n\r\n        return $resource(resourceUrl, {}, {\r\n            'query': { method: 'GET', isArray: true},\r\n            'get': {\r\n                method: 'GET',\r\n                transformResponse: function (data) {\r\n                    if (data) {\r\n                        data = angular.fromJson(data);\r\n                        data.createdDate = DateUtils.convertDateTimeFromServer(data.createdDate);\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            'update': { method:'PUT' }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubNewsController', ClubNewsController);\r\n\r\n    ClubNewsController.$inject = ['$state', 'DataUtils', 'News', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\r\n\r\n    function ClubNewsController($state, DataUtils, News, ParseLinks, AlertService, paginationConstants, pagingParams) {\r\n\r\n        var vm = this;\r\n\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.transition = transition;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.openFile = DataUtils.openFile;\r\n        vm.byteSize = DataUtils.byteSize;\r\n\r\n        loadAll();\r\n\r\n        function loadAll () {\r\n            News.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n            function sort() {\r\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n                if (vm.predicate !== 'id') {\r\n                    result.push('id');\r\n                }\r\n                return result;\r\n            }\r\n            function onSuccess(data, headers) {\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n                vm.queryCount = vm.totalItems;\r\n                vm.news = data;\r\n                vm.page = pagingParams.page;\r\n            }\r\n            function onError(error) {\r\n                AlertService.error(error.data.message);\r\n            }\r\n        }\r\n\r\n        function loadPage(page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition() {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubNewsDetailController', ClubNewsDetailController);\r\n\r\n    ClubNewsDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'DataUtils', 'entity', 'News'];\r\n\r\n    function ClubNewsDetailController($scope, $rootScope, $stateParams, previousState, DataUtils, entity, News) {\r\n        var vm = this;\r\n\r\n        vm.news = entity;\r\n        vm.previousState = previousState.name;\r\n        vm.byteSize = DataUtils.byteSize;\r\n        vm.openFile = DataUtils.openFile;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubContact', {\r\n            parent: 'app',\r\n            url: '/clubContact',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/clubContact/clubContact.html',\r\n                    controller: 'ClubContactController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubContactController', ClubContactController);\r\n\r\n    ClubContactController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\r\n\r\n    function ClubContactController ($scope, Principal, LoginService, $state) {\r\n        var vm = this;\r\n\r\n        vm.account = null;\r\n        vm.isAuthenticated = null;\r\n        vm.login = LoginService.open;\r\n        vm.register = register;\r\n        $scope.$on('authenticationSuccess', function() {\r\n            getAccount();\r\n        });\r\n\r\n        getAccount();\r\n\r\n        function getAccount() {\r\n            Principal.identity().then(function(account) {\r\n                vm.account = account;\r\n                vm.isAuthenticated = Principal.isAuthenticated;\r\n            });\r\n        }\r\n        function register () {\r\n            $state.go('register');\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubStadium', {\r\n            parent: 'club',\r\n            url: '/clubStadium',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/club/clubStadium/clubStadium.html',\r\n                    controller: 'ClubStadiumController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }    \r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubStadiumController', ClubStadiumController);\r\n\r\n    ClubStadiumController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\r\n\r\n    function ClubStadiumController ($scope, Principal, LoginService, $state) {\r\n        var vm = this;\r\n\r\n        vm.account = null;\r\n        vm.isAuthenticated = null;\r\n        vm.login = LoginService.open;\r\n        vm.register = register;\r\n        $scope.$on('authenticationSuccess', function() {\r\n            getAccount();\r\n        });\r\n\r\n        getAccount();\r\n\r\n        function getAccount() {\r\n            Principal.identity().then(function(account) {\r\n                vm.account = account;\r\n                vm.isAuthenticated = Principal.isAuthenticated;\r\n            });\r\n        }\r\n        function register () {\r\n            $state.go('register');\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('clubHistory', {\r\n            parent: 'club',\r\n            url: '/clubHistory',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/club/clubHistory/clubHistory.html',\r\n                    controller: 'ClubHistoryController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }    \r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ClubHistoryController', ClubHistoryController);\r\n\r\n    ClubHistoryController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\r\n\r\n    function ClubHistoryController ($scope, Principal, LoginService, $state) {\r\n        var vm = this;\r\n\r\n        vm.account = null;\r\n        vm.isAuthenticated = null;\r\n        vm.login = LoginService.open;\r\n        vm.register = register;\r\n        $scope.$on('authenticationSuccess', function() {\r\n            getAccount();\r\n        });\r\n\r\n        getAccount();\r\n\r\n        function getAccount() {\r\n            Principal.identity().then(function(account) {\r\n                vm.account = account;\r\n                vm.isAuthenticated = Principal.isAuthenticated;\r\n            });\r\n        }\r\n        function register () {\r\n            $state.go('register');\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('club', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('notificationInterceptor', notificationInterceptor);\r\n\r\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\r\n\r\n    function notificationInterceptor ($q, AlertService) {\r\n        var service = {\r\n            response: response\r\n        };\r\n\r\n        return service;\r\n\r\n        function response (response) {\r\n            var headers = Object.keys(response.headers()).filter(function (header) {\r\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\r\n            }).sort();\r\n            var alertKey = response.headers(headers[0]);\r\n            if (angular.isString(alertKey)) {\r\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\r\n\r\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\r\n\r\n    function errorHandlerInterceptor ($q, $rootScope) {\r\n        var service = {\r\n            responseError: responseError\r\n        };\r\n\r\n        return service;\r\n\r\n        function responseError (response) {\r\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\r\n                $rootScope.$emit('poliApp.httpError', response);\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\r\n\r\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$localStorage', '$sessionStorage'];\r\n\r\n    function authExpiredInterceptor($rootScope, $q, $injector, $localStorage, $sessionStorage) {\r\n        var service = {\r\n            responseError: responseError\r\n        };\r\n\r\n        return service;\r\n\r\n        function responseError(response) {\r\n            if (response.status === 401) {\r\n                delete $localStorage.authenticationToken;\r\n                delete $sessionStorage.authenticationToken;\r\n                var Principal = $injector.get('Principal');\r\n                if (Principal.isAuthenticated()) {\r\n                    var Auth = $injector.get('Auth');\r\n                    Auth.authorize(true);\r\n                }\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('authInterceptor', authInterceptor);\r\n\r\n    authInterceptor.$inject = ['$rootScope', '$q', '$location', '$localStorage', '$sessionStorage'];\r\n\r\n    function authInterceptor ($rootScope, $q, $location, $localStorage, $sessionStorage) {\r\n        var service = {\r\n            request: request\r\n        };\r\n\r\n        return service;\r\n\r\n        function request (config) {\r\n            /*jshint camelcase: false */\r\n            config.headers = config.headers || {};\r\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\r\n            if (token) {\r\n                config.headers.Authorization = 'Bearer ' + token;\r\n            }\r\n            return config;\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('stateHandler', stateHandler);\r\n\r\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\r\n        'Auth', 'Principal', 'VERSION'];\r\n\r\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\r\n        Auth, Principal, VERSION) {\r\n        return {\r\n            initialize: initialize\r\n        };\r\n\r\n        function initialize() {\r\n            $rootScope.VERSION = VERSION;\r\n\r\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\r\n                $rootScope.toState = toState;\r\n                $rootScope.toStateParams = toStateParams;\r\n                $rootScope.fromState = fromState;\r\n\r\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\r\n                if (toState.external) {\r\n                    event.preventDefault();\r\n                    $window.open(toState.url, '_self');\r\n                }\r\n\r\n                if (Principal.isIdentityResolved()) {\r\n                    Auth.authorize();\r\n                }\r\n\r\n            });\r\n\r\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\r\n                var titleKey = 'Politehnica București' ;\r\n\r\n                // Set the page title key to the one configured in state or use default one\r\n                if (toState.data.pageTitle) {\r\n                    titleKey = toState.data.pageTitle;\r\n                }\r\n                $window.document.title = titleKey;\r\n            });\r\n\r\n            $rootScope.$on('$destroy', function () {\r\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\r\n                    stateChangeStart();\r\n                }\r\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\r\n                    stateChangeSuccess();\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(paginationConfig);\r\n\r\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\r\n\r\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\r\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\r\n        uibPaginationConfig.maxSize = 5;\r\n        uibPaginationConfig.boundaryLinks = true;\r\n        uibPaginationConfig.firstText = 'Prima pagina';\r\n        uibPaginationConfig.previousText = 'Pagina anterioara';\r\n        uibPaginationConfig.nextText = 'Pagina următoare';\r\n        uibPaginationConfig.lastText = 'Ultima pagina';\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(pagerConfig);\r\n\r\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\r\n\r\n    function pagerConfig(uibPagerConfig, paginationConstants) {\r\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\r\n        uibPagerConfig.previousText = 'Pagina anterioara';\r\n        uibPagerConfig.nextText = 'Pagina următoare';\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(localStorageConfig);\r\n\r\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\r\n\r\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\r\n        $localStorageProvider.setKeyPrefix('jhi-');\r\n        $sessionStorageProvider.setKeyPrefix('jhi-');\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(httpConfig);\r\n\r\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\r\n\r\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\r\n        //Cache everything except rest api requests\r\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\r\n\r\n        $urlRouterProvider.otherwise('/');\r\n\r\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\r\n        $httpProvider.interceptors.push('authExpiredInterceptor');\r\n        $httpProvider.interceptors.push('authInterceptor');\r\n        $httpProvider.interceptors.push('notificationInterceptor');\r\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\r\n\r\n        $urlMatcherFactoryProvider.type('boolean', {\r\n            name : 'boolean',\r\n            decode: function(val) { return val === true || val === 'true'; },\r\n            encode: function(val) { return val ? 1 : 0; },\r\n            equals: function(a, b) { return this.is(a) && a === b; },\r\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\r\n            pattern: /bool|true|0|1/\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(compileServiceConfig);\r\n\r\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\r\n\r\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\r\n        // disable debug data on prod profile to improve performance\r\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\r\n\r\n        /*\r\n        If you wish to debug an application with this information\r\n        then you should open up a debug console in the browser\r\n        then call this method directly in this console:\r\n\r\n\t\tangular.reloadWithDebugInfo();\r\n\t\t*/\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(alertServiceConfig);\r\n\r\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\r\n\r\n    function alertServiceConfig(AlertServiceProvider) {\r\n        // set below to true to make alerts look like toast\r\n        AlertServiceProvider.showAsToast(false);\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('app', {\r\n            abstract: true,\r\n            views: {\r\n                'navbar@': {\r\n                    templateUrl: 'app/layouts/navbar/navbar.html',\r\n                    controller: 'NavbarController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                authorize: ['Auth',\r\n                    function (Auth) {\r\n                        return Auth.authorize();\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('poliApp')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('BUILD_TIMESTAMP', 1502049329010)\n;\n})();\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('UserManagementDialogController',UserManagementDialogController);\r\n\r\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\r\n\r\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\r\n        var vm = this;\r\n\r\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\r\n        vm.clear = clear;\r\n        vm.languages = null;\r\n        vm.save = save;\r\n        vm.user = entity;\r\n\r\n\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function onSaveSuccess (result) {\r\n            vm.isSaving = false;\r\n            $uibModalInstance.close(result);\r\n        }\r\n\r\n        function onSaveError () {\r\n            vm.isSaving = false;\r\n        }\r\n\r\n        function save () {\r\n            vm.isSaving = true;\r\n            if (vm.user.id !== null) {\r\n                User.update(vm.user, onSaveSuccess, onSaveError);\r\n            } else {\r\n                vm.user.langKey = 'en';\r\n                User.save(vm.user, onSaveSuccess, onSaveError);\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('UserManagementDetailController', UserManagementDetailController);\r\n\r\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\r\n\r\n    function UserManagementDetailController($stateParams, User) {\r\n        var vm = this;\r\n\r\n        vm.load = load;\r\n        vm.user = {};\r\n\r\n        vm.load($stateParams.login);\r\n\r\n        function load(login) {\r\n            User.get({login: login}, function(result) {\r\n                vm.user = result;\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\r\n\r\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\r\n\r\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\r\n        var vm = this;\r\n\r\n        vm.user = entity;\r\n        vm.clear = clear;\r\n        vm.confirmDelete = confirmDelete;\r\n\r\n        function clear () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmDelete (login) {\r\n            User.delete({login: login},\r\n                function () {\r\n                    $uibModalInstance.close(true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        .state('user-management', {\r\n            parent: 'admin',\r\n            url: '/user-management?page&sort',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Users'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/user-management/user-management.html',\r\n                    controller: 'UserManagementController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },            params: {\r\n                page: {\r\n                    value: '1',\r\n                    squash: true\r\n                },\r\n                sort: {\r\n                    value: 'id,asc',\r\n                    squash: true\r\n                }\r\n            },\r\n            resolve: {\r\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\r\n                    return {\r\n                        page: PaginationUtil.parsePage($stateParams.page),\r\n                        sort: $stateParams.sort,\r\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\r\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\r\n                    };\r\n                }]\r\n            }        })\r\n        .state('user-management.new', {\r\n            url: '/new',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\r\n                    controller: 'UserManagementDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: function () {\r\n                            return {\r\n                                id: null, login: null, firstName: null, lastName: null, email: null,\r\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\r\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\r\n                                resetKey: null, authorities: null\r\n                            };\r\n                        }\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('user-management', null, { reload: true });\r\n                }, function() {\r\n                    $state.go('user-management');\r\n                });\r\n            }]\r\n        })\r\n        .state('user-management.edit', {\r\n            url: '/{login}/edit',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\r\n                    controller: 'UserManagementDialogController',\r\n                    controllerAs: 'vm',\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        entity: ['User', function(User) {\r\n                            return User.get({login : $stateParams.login});\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('user-management', null, { reload: true });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        })\r\n        .state('user-management-detail', {\r\n            parent: 'user-management',\r\n            url: '/{login}',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Politehnica București'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\r\n                    controller: 'UserManagementDetailController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        })\r\n        .state('user-management.delete', {\r\n            url: '/{login}/delete',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\r\n                    controller: 'UserManagementDeleteController',\r\n                    controllerAs: 'vm',\r\n                    size: 'md',\r\n                    resolve: {\r\n                        entity: ['User', function(User) {\r\n                            return User.get({login : $stateParams.login});\r\n                        }]\r\n                    }\r\n                }).result.then(function() {\r\n                    $state.go('user-management', null, { reload: true });\r\n                }, function() {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('UserManagementController', UserManagementController);\r\n\r\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\r\n\r\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\r\n        var vm = this;\r\n\r\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\r\n        vm.currentAccount = null;\r\n        vm.languages = null;\r\n        vm.loadAll = loadAll;\r\n        vm.setActive = setActive;\r\n        vm.users = [];\r\n        vm.page = 1;\r\n        vm.totalItems = null;\r\n        vm.clear = clear;\r\n        vm.links = null;\r\n        vm.loadPage = loadPage;\r\n        vm.predicate = pagingParams.predicate;\r\n        vm.reverse = pagingParams.ascending;\r\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\r\n        vm.transition = transition;\r\n\r\n        vm.loadAll();\r\n        Principal.identity().then(function(account) {\r\n            vm.currentAccount = account;\r\n        });\r\n\r\n        function setActive (user, isActivated) {\r\n            user.activated = isActivated;\r\n            User.update(user, function () {\r\n                vm.loadAll();\r\n                vm.clear();\r\n            });\r\n        }\r\n\r\n        function loadAll () {\r\n            User.query({\r\n                page: pagingParams.page - 1,\r\n                size: vm.itemsPerPage,\r\n                sort: sort()\r\n            }, onSuccess, onError);\r\n        }\r\n\r\n        function onSuccess(data, headers) {\r\n            vm.links = ParseLinks.parse(headers('link'));\r\n            vm.totalItems = headers('X-Total-Count');\r\n            vm.queryCount = vm.totalItems;\r\n            vm.page = pagingParams.page;\r\n            vm.users = data;\r\n        }\r\n\r\n        function onError(error) {\r\n            AlertService.error(error.data.message);\r\n        }\r\n\r\n        function clear () {\r\n            vm.user = {\r\n                id: null, login: null, firstName: null, lastName: null, email: null,\r\n                activated: null, langKey: null, createdBy: null, createdDate: null,\r\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\r\n                resetKey: null, authorities: null\r\n            };\r\n        }\r\n\r\n        function sort () {\r\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\r\n            if (vm.predicate !== 'id') {\r\n                result.push('id');\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function loadPage (page) {\r\n            vm.page = page;\r\n            vm.transition();\r\n        }\r\n\r\n        function transition () {\r\n            $state.transitionTo($state.$current, {\r\n                page: vm.page,\r\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\r\n                search: vm.currentSearch\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('jhi-metrics', {\r\n            parent: 'admin',\r\n            url: '/metrics',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Application Metrics'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/metrics/metrics.html',\r\n                    controller: 'JhiMetricsMonitoringController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('JhiMetricsService', JhiMetricsService);\r\n\r\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\r\n\r\n    function JhiMetricsService ($rootScope, $http) {\r\n        var service = {\r\n            getMetrics: getMetrics,\r\n            threadDump: threadDump\r\n        };\r\n\r\n        return service;\r\n\r\n        function getMetrics () {\r\n            return $http.get('management/metrics').then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n\r\n        function threadDump () {\r\n            return $http.get('management/dump').then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\r\n\r\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\r\n\r\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\r\n        var vm = this;\r\n\r\n        vm.cancel = cancel;\r\n        vm.getLabelClass = getLabelClass;\r\n        vm.threadDump = threadDump;\r\n        vm.threadDumpAll = 0;\r\n        vm.threadDumpBlocked = 0;\r\n        vm.threadDumpRunnable = 0;\r\n        vm.threadDumpTimedWaiting = 0;\r\n        vm.threadDumpWaiting = 0;\r\n\r\n        angular.forEach(threadDump, function(value) {\r\n            if (value.threadState === 'RUNNABLE') {\r\n                vm.threadDumpRunnable += 1;\r\n            } else if (value.threadState === 'WAITING') {\r\n                vm.threadDumpWaiting += 1;\r\n            } else if (value.threadState === 'TIMED_WAITING') {\r\n                vm.threadDumpTimedWaiting += 1;\r\n            } else if (value.threadState === 'BLOCKED') {\r\n                vm.threadDumpBlocked += 1;\r\n            }\r\n        });\r\n\r\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\r\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\r\n\r\n        function cancel () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function getLabelClass (threadState) {\r\n            if (threadState === 'RUNNABLE') {\r\n                return 'label-success';\r\n            } else if (threadState === 'WAITING') {\r\n                return 'label-info';\r\n            } else if (threadState === 'TIMED_WAITING') {\r\n                return 'label-warning';\r\n            } else if (threadState === 'BLOCKED') {\r\n                return 'label-danger';\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\r\n\r\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\r\n\r\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\r\n        var vm = this;\r\n\r\n        vm.cachesStats = {};\r\n        vm.metrics = {};\r\n        vm.refresh = refresh;\r\n        vm.refreshThreadDumpData = refreshThreadDumpData;\r\n        vm.servicesStats = {};\r\n        vm.updatingMetrics = true;\r\n\r\n        vm.refresh();\r\n\r\n        $scope.$watch('vm.metrics', function (newValue) {\r\n            vm.servicesStats = {};\r\n            angular.forEach(newValue.timers, function (value, key) {\r\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\r\n                    vm.servicesStats[key] = value;\r\n                }\r\n            });\r\n\r\n            vm.cachesStats = {};\r\n            angular.forEach(newValue.gauges, function (value, key) {\r\n                if (key.indexOf('jcache.statistics') !== -1) {\r\n                    // remove gets or puts\r\n                    var index = key.lastIndexOf('.');\r\n                    var newKey = key.substr(0, index);\r\n\r\n                    // Keep the name of the domain\r\n                    vm.cachesStats[newKey] = {\r\n                        'name': newKey.substr(18),\r\n                        'value': value\r\n                    };\r\n                }\r\n            });\r\n        });\r\n\r\n        function refresh () {\r\n            vm.updatingMetrics = true;\r\n            JhiMetricsService.getMetrics().then(function (promise) {\r\n                vm.metrics = promise;\r\n                vm.updatingMetrics = false;\r\n            }, function (promise) {\r\n                vm.metrics = promise.data;\r\n                vm.updatingMetrics = false;\r\n            });\r\n        }\r\n\r\n        function refreshThreadDumpData () {\r\n            JhiMetricsService.threadDump().then(function(data) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\r\n                    controller: 'JhiMetricsMonitoringModalController',\r\n                    controllerAs: 'vm',\r\n                    size: 'lg',\r\n                    resolve: {\r\n                        threadDump: function() {\r\n                            return data;\r\n                        }\r\n\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('logs', {\r\n            parent: 'admin',\r\n            url: '/logs',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Logs'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/logs/logs.html',\r\n                    controller: 'LogsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('LogsService', LogsService);\r\n\r\n    LogsService.$inject = ['$resource'];\r\n\r\n    function LogsService ($resource) {\r\n        var service = $resource('management/logs', {}, {\r\n            'findAll': { method: 'GET', isArray: true},\r\n            'changeLevel': { method: 'PUT'}\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('LogsController', LogsController);\r\n\r\n    LogsController.$inject = ['LogsService'];\r\n\r\n    function LogsController (LogsService) {\r\n        var vm = this;\r\n\r\n        vm.changeLevel = changeLevel;\r\n        vm.loggers = LogsService.findAll();\r\n\r\n        function changeLevel (name, level) {\r\n            LogsService.changeLevel({name: name, level: level}, function () {\r\n                vm.loggers = LogsService.findAll();\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('jhi-health', {\r\n            parent: 'admin',\r\n            url: '/health',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Health Checks'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/health/health.html',\r\n                    controller: 'JhiHealthCheckController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('JhiHealthService', JhiHealthService);\r\n\r\n    JhiHealthService.$inject = ['$rootScope', '$http'];\r\n\r\n    function JhiHealthService ($rootScope, $http) {\r\n        var separator = '.';\r\n        var service = {\r\n            checkHealth: checkHealth,\r\n            transformHealthData: transformHealthData,\r\n            getBaseName: getBaseName,\r\n            getSubSystemName: getSubSystemName\r\n        };\r\n\r\n        return service;\r\n\r\n        function checkHealth () {\r\n            return $http.get('management/health').then(function (response) {\r\n                return response.data;\r\n            });\r\n        }\r\n\r\n        function transformHealthData (data) {\r\n            var response = [];\r\n            flattenHealthData(response, null, data);\r\n            return response;\r\n        }\r\n\r\n        function getBaseName (name) {\r\n            if (name) {\r\n                var split = name.split('.');\r\n                return split[0];\r\n            }\r\n        }\r\n\r\n        function getSubSystemName (name) {\r\n            if (name) {\r\n                var split = name.split('.');\r\n                split.splice(0, 1);\r\n                var remainder = split.join('.');\r\n                return remainder ? ' - ' + remainder : '';\r\n            }\r\n        }\r\n\r\n        /* private methods */\r\n        function flattenHealthData (result, path, data) {\r\n            angular.forEach(data, function (value, key) {\r\n                if (isHealthObject(value)) {\r\n                    if (hasSubSystem(value)) {\r\n                        addHealthObject(result, false, value, getModuleName(path, key));\r\n                        flattenHealthData(result, getModuleName(path, key), value);\r\n                    } else {\r\n                        addHealthObject(result, true, value, getModuleName(path, key));\r\n                    }\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        function addHealthObject (result, isLeaf, healthObject, name) {\r\n\r\n            var healthData = {\r\n                'name': name\r\n            };\r\n            var details = {};\r\n            var hasDetails = false;\r\n\r\n            angular.forEach(healthObject, function (value, key) {\r\n                if (key === 'status' || key === 'error') {\r\n                    healthData[key] = value;\r\n                } else {\r\n                    if (!isHealthObject(value)) {\r\n                        details[key] = value;\r\n                        hasDetails = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Add the of the details\r\n            if (hasDetails) {\r\n                angular.extend(healthData, { 'details': details});\r\n            }\r\n\r\n            // Only add nodes if they provide additional information\r\n            if (isLeaf || hasDetails || healthData.error) {\r\n                result.push(healthData);\r\n            }\r\n            return healthData;\r\n        }\r\n\r\n        function getModuleName (path, name) {\r\n            var result;\r\n            if (path && name) {\r\n                result = path + separator + name;\r\n            }  else if (path) {\r\n                result = path;\r\n            } else if (name) {\r\n                result = name;\r\n            } else {\r\n                result = '';\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function hasSubSystem (healthObject) {\r\n            var result = false;\r\n            angular.forEach(healthObject, function (value) {\r\n                if (value && value.status) {\r\n                    result = true;\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        function isHealthObject (healthObject) {\r\n            var result = false;\r\n            angular.forEach(healthObject, function (value, key) {\r\n                if (key === 'status') {\r\n                    result = true;\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular.module('poliApp')\r\n        .controller('HealthModalController', HealthModalController);\r\n\r\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\r\n\r\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\r\n        var vm = this;\r\n\r\n        vm.cancel = cancel;\r\n        vm.currentHealth = currentHealth;\r\n        vm.baseName = baseName;\r\n        vm.subSystemName = subSystemName;\r\n\r\n        function cancel() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\r\n\r\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\r\n\r\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\r\n        var vm = this;\r\n\r\n        vm.updatingHealth = true;\r\n        vm.getLabelClass = getLabelClass;\r\n        vm.refresh = refresh;\r\n        vm.showHealth = showHealth;\r\n        vm.baseName = JhiHealthService.getBaseName;\r\n        vm.subSystemName = JhiHealthService.getSubSystemName;\r\n\r\n        vm.refresh();\r\n\r\n        function getLabelClass (statusState) {\r\n            if (statusState === 'UP') {\r\n                return 'label-success';\r\n            } else {\r\n                return 'label-danger';\r\n            }\r\n        }\r\n\r\n        function refresh () {\r\n            vm.updatingHealth = true;\r\n            JhiHealthService.checkHealth().then(function (response) {\r\n                vm.healthData = JhiHealthService.transformHealthData(response);\r\n                vm.updatingHealth = false;\r\n            }, function (response) {\r\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\r\n                vm.updatingHealth = false;\r\n            });\r\n        }\r\n\r\n        function showHealth (health) {\r\n            $uibModal.open({\r\n                templateUrl: 'app/admin/health/health.modal.html',\r\n                controller: 'HealthModalController',\r\n                controllerAs: 'vm',\r\n                size: 'lg',\r\n                resolve: {\r\n                    currentHealth: function() {\r\n                        return health;\r\n                    },\r\n                    baseName: function() {\r\n                        return vm.baseName;\r\n                    },\r\n                    subSystemName: function() {\r\n                        return vm.subSystemName;\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig ($stateProvider) {\r\n        $stateProvider.state('docs', {\r\n            parent: 'admin',\r\n            url: '/docs',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'API'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/docs/docs.html'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('jhi-configuration', {\r\n            parent: 'admin',\r\n            url: '/configuration',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Configuration'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/configuration/configuration.html',\r\n                    controller: 'JhiConfigurationController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('JhiConfigurationService', JhiConfigurationService);\r\n\r\n    JhiConfigurationService.$inject = ['$filter', '$http'];\r\n\r\n    function JhiConfigurationService ($filter, $http) {\r\n        var service = {\r\n            get: get,\r\n            getEnv: getEnv\r\n        };\r\n\r\n        return service;\r\n\r\n        function get () {\r\n            return $http.get('management/configprops').then(getConfigPropsComplete);\r\n\r\n            function getConfigPropsComplete (response) {\r\n                var properties = [];\r\n                angular.forEach(response.data, function (data) {\r\n                    properties.push(data);\r\n                });\r\n                var orderBy = $filter('orderBy');\r\n                return orderBy(properties, 'prefix');\r\n            }\r\n        }\r\n\r\n        function getEnv () {\r\n            return $http.get('management/env').then(getEnvComplete);\r\n\r\n            function getEnvComplete (response) {\r\n                var properties = {};\r\n                angular.forEach(response.data, function (val,key) {\r\n                    var vals = [];\r\n                    angular.forEach(val, function (v,k) {\r\n                        vals.push({ key:k, val:v });\r\n                    });\r\n                    properties[key] = vals;\r\n                });\r\n                return properties;\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('JhiConfigurationController', JhiConfigurationController);\r\n\r\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\r\n\r\n    function JhiConfigurationController (filter,JhiConfigurationService) {\r\n        var vm = this;\r\n\r\n        vm.allConfiguration = null;\r\n        vm.configuration = null;\r\n\r\n        JhiConfigurationService.get().then(function(configuration) {\r\n            vm.configuration = configuration;\r\n        });\r\n        JhiConfigurationService.getEnv().then(function (configuration) {\r\n            vm.allConfiguration = configuration;\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('audits', {\r\n            parent: 'admin',\r\n            url: '/audits',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'Audits'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/audits/audits.html',\r\n                    controller: 'AuditsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('AuditsService', AuditsService);\r\n\r\n    AuditsService.$inject = ['$resource'];\r\n\r\n    function AuditsService ($resource) {\r\n        var service = $resource('management/audits/:id', {}, {\r\n            'get': {\r\n                method: 'GET',\r\n                isArray: true\r\n            },\r\n            'query': {\r\n                method: 'GET',\r\n                isArray: true,\r\n                params: {fromDate: null, toDate: null}\r\n            }\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('AuditsController', AuditsController);\r\n\r\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\r\n\r\n    function AuditsController ($filter, AuditsService, ParseLinks) {\r\n        var vm = this;\r\n\r\n        vm.audits = null;\r\n        vm.fromDate = null;\r\n        vm.links = null;\r\n        vm.loadPage = loadPage;\r\n        vm.onChangeDate = onChangeDate;\r\n        vm.page = 1;\r\n        vm.previousMonth = previousMonth;\r\n        vm.toDate = null;\r\n        vm.today = today;\r\n        vm.totalItems = null;\r\n\r\n        vm.today();\r\n        vm.previousMonth();\r\n        vm.onChangeDate();\r\n\r\n        function onChangeDate () {\r\n            var dateFormat = 'yyyy-MM-dd';\r\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\r\n            var toDate = $filter('date')(vm.toDate, dateFormat);\r\n\r\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\r\n                vm.audits = result;\r\n                vm.links = ParseLinks.parse(headers('link'));\r\n                vm.totalItems = headers('X-Total-Count');\r\n            });\r\n        }\r\n\r\n        // Date picker configuration\r\n        function today () {\r\n            // Today + 1 day - needed if the current day must be included\r\n            var today = new Date();\r\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\r\n        }\r\n\r\n        function previousMonth () {\r\n            var fromDate = new Date();\r\n            if (fromDate.getMonth() === 0) {\r\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\r\n            } else {\r\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\r\n            }\r\n\r\n            vm.fromDate = fromDate;\r\n        }\r\n\r\n        function loadPage (page) {\r\n            vm.page = page;\r\n            vm.onChangeDate();\r\n        }\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig ($stateProvider) {\r\n        $stateProvider.state('admin', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SocialRegisterController', SocialRegisterController);\r\n\r\n    SocialRegisterController.$inject = ['$filter', '$stateParams'];\r\n\r\n    function SocialRegisterController ($filter, $stateParams) {\r\n        var vm = this;\r\n\r\n        vm.success = $stateParams.success;\r\n        vm.error = !vm.success;\r\n        vm.provider = $stateParams.provider;\r\n        vm.providerLabel = $filter('capitalize')(vm.provider);\r\n        vm.success = $stateParams.success;\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SocialAuthController', SocialAuthController);\r\n\r\n    SocialAuthController.$inject = ['$state', '$cookies', 'Auth'];\r\n\r\n    function SocialAuthController($state, $cookies, Auth) {\r\n        var token = $cookies.get('social-authentication');\r\n\r\n        Auth.loginWithToken(token, false).then(function () {\r\n            $cookies.remove('social-authentication');\r\n            Auth.authorize(true);\r\n        }, function () {\r\n            $state.go('social-register', {'success': 'false'});\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('social-register', {\r\n            parent: 'account',\r\n            url: '/social-register/:provider?{success:boolean}',\r\n            data: {\r\n                authorities: [],\r\n                pageTitle: 'Register with {{ label }}'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/social/social-register.html',\r\n                    controller: 'SocialRegisterController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        })\r\n        .state('social-auth', {\r\n            parent: 'account',\r\n            url: '/social-auth',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    controller: 'SocialAuthController'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .factory('SocialService', SocialService);\r\n\r\n    SocialService.$inject = ['$http', '$cookies'];\r\n\r\n    function SocialService ($http, $cookies) {\r\n        var socialService = {\r\n            getProviderSetting: getProviderSetting,\r\n            getProviderURL: getProviderURL,\r\n            getCSRF: getCSRF\r\n        };\r\n\r\n        return socialService;\r\n\r\n        function getProviderSetting (provider) {\r\n            switch(provider) {\r\n            case 'google': return 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email';\r\n            case 'facebook': return 'public_profile,email';\r\n            case 'twitter': return '';\r\n                // jhipster-needle-add-social-button\r\n            default: return 'Provider setting not defined';\r\n            }\r\n        }\r\n\r\n        function getProviderURL (provider) {\r\n            return 'signin/' + provider;\r\n        }\r\n\r\n        function getCSRF () {\r\n            return $cookies.get($http.defaults.xsrfCookieName);\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('jhSocial', jhSocial);\r\n\r\n    jhSocial.$inject = ['$filter', 'SocialService'];\r\n\r\n    function jhSocial($filter, SocialService) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            scope: {\r\n                provider: '@ngProvider'\r\n            },\r\n            templateUrl: 'app/account/social/directive/social.html',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        /* private helper methods */\r\n\r\n        function linkFunc(scope) {\r\n            \r\n            scope.label = $filter('capitalize')(scope.provider);\r\n            scope.providerSetting = SocialService.getProviderSetting(scope.provider);\r\n            scope.providerURL = SocialService.getProviderURL(scope.provider);\r\n            scope.csrf = SocialService.getCSRF();\r\n        }\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('settings', {\r\n            parent: 'account',\r\n            url: '/settings',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Settings'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/settings/settings.html',\r\n                    controller: 'SettingsController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('SettingsController', SettingsController);\r\n\r\n    SettingsController.$inject = ['Principal', 'Auth'];\r\n\r\n    function SettingsController (Principal, Auth) {\r\n        var vm = this;\r\n\r\n        vm.error = null;\r\n        vm.save = save;\r\n        vm.settingsAccount = null;\r\n        vm.success = null;\r\n\r\n        /**\r\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\r\n         */\r\n        var copyAccount = function (account) {\r\n            return {\r\n                activated: account.activated,\r\n                email: account.email,\r\n                firstName: account.firstName,\r\n                langKey: account.langKey,\r\n                lastName: account.lastName,\r\n                login: account.login\r\n            };\r\n        };\r\n\r\n        Principal.identity().then(function(account) {\r\n            vm.settingsAccount = copyAccount(account);\r\n        });\r\n\r\n        function save () {\r\n            Auth.updateAccount(vm.settingsAccount).then(function() {\r\n                vm.error = null;\r\n                vm.success = 'OK';\r\n                Principal.identity(true).then(function(account) {\r\n                    vm.settingsAccount = copyAccount(account);\r\n                });\r\n            }).catch(function() {\r\n                vm.success = null;\r\n                vm.error = 'ERROR';\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('requestReset', {\r\n            parent: 'account',\r\n            url: '/reset/request',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/reset/request/reset.request.html',\r\n                    controller: 'RequestResetController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('RequestResetController', RequestResetController);\r\n\r\n    RequestResetController.$inject = ['$timeout', 'Auth'];\r\n\r\n    function RequestResetController ($timeout, Auth) {\r\n        var vm = this;\r\n\r\n        vm.error = null;\r\n        vm.errorEmailNotExists = null;\r\n        vm.requestReset = requestReset;\r\n        vm.resetAccount = {};\r\n        vm.success = null;\r\n\r\n        $timeout(function (){angular.element('#email').focus();});\r\n\r\n        function requestReset () {\r\n\r\n            vm.error = null;\r\n            vm.errorEmailNotExists = null;\r\n\r\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\r\n                vm.success = 'OK';\r\n            }).catch(function (response) {\r\n                vm.success = null;\r\n                if (response.status === 400 && response.data === 'email address not registered') {\r\n                    vm.errorEmailNotExists = 'ERROR';\r\n                } else {\r\n                    vm.error = 'ERROR';\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('finishReset', {\r\n            parent: 'account',\r\n            url: '/reset/finish?key',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\r\n                    controller: 'ResetFinishController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ResetFinishController', ResetFinishController);\r\n\r\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\r\n\r\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\r\n        var vm = this;\r\n\r\n        vm.keyMissing = angular.isUndefined($stateParams.key);\r\n        vm.confirmPassword = null;\r\n        vm.doNotMatch = null;\r\n        vm.error = null;\r\n        vm.finishReset = finishReset;\r\n        vm.login = LoginService.open;\r\n        vm.resetAccount = {};\r\n        vm.success = null;\r\n\r\n        $timeout(function (){angular.element('#password').focus();});\r\n\r\n        function finishReset() {\r\n            vm.doNotMatch = null;\r\n            vm.error = null;\r\n            if (vm.resetAccount.password !== vm.confirmPassword) {\r\n                vm.doNotMatch = 'ERROR';\r\n            } else {\r\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\r\n                    vm.success = 'OK';\r\n                }).catch(function () {\r\n                    vm.success = null;\r\n                    vm.error = 'ERROR';\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('register', {\r\n            parent: 'account',\r\n            url: '/register',\r\n            data: {\r\n                authorities: [],\r\n                pageTitle: 'Registration'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/register/register.html',\r\n                    controller: 'RegisterController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('RegisterController', RegisterController);\r\n\r\n\r\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\r\n\r\n    function RegisterController ($timeout, Auth, LoginService) {\r\n        var vm = this;\r\n\r\n        vm.doNotMatch = null;\r\n        vm.error = null;\r\n        vm.errorUserExists = null;\r\n        vm.login = LoginService.open;\r\n        vm.register = register;\r\n        vm.registerAccount = {};\r\n        vm.success = null;\r\n\r\n        $timeout(function (){angular.element('#login').focus();});\r\n\r\n        function register () {\r\n            if (vm.registerAccount.password !== vm.confirmPassword) {\r\n                vm.doNotMatch = 'ERROR';\r\n            } else {\r\n                vm.registerAccount.langKey =  'en' ;\r\n                vm.doNotMatch = null;\r\n                vm.error = null;\r\n                vm.errorUserExists = null;\r\n                vm.errorEmailExists = null;\r\n\r\n                Auth.createAccount(vm.registerAccount).then(function () {\r\n                    vm.success = 'OK';\r\n                }).catch(function (response) {\r\n                    vm.success = null;\r\n                    if (response.status === 400 && response.data === 'login already in use') {\r\n                        vm.errorUserExists = 'ERROR';\r\n                    } else if (response.status === 400 && response.data === 'email address already in use') {\r\n                        vm.errorEmailExists = 'ERROR';\r\n                    } else {\r\n                        vm.error = 'ERROR';\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n/* globals $ */\r\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .directive('passwordStrengthBar', passwordStrengthBar);\r\n\r\n    function passwordStrengthBar () {\r\n        var directive = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            template: '<div id=\"strength\">' +\r\n                '<small>Password strength:</small>' +\r\n                '<ul id=\"strengthBar\">' +\r\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\r\n                '</ul>' +\r\n                '</div>',\r\n            scope: {\r\n                passwordToCheck: '='\r\n            },\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        /* private helper methods*/\r\n\r\n        function linkFunc(scope, iElement) {\r\n            var strength = {\r\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\r\n                mesureStrength: function (p) {\r\n\r\n                    var _force = 0;\r\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\r\n\r\n                    var _lowerLetters = /[a-z]+/.test(p);\r\n                    var _upperLetters = /[A-Z]+/.test(p);\r\n                    var _numbers = /[0-9]+/.test(p);\r\n                    var _symbols = _regex.test(p);\r\n\r\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\r\n                    var _passedMatches = $.grep(_flags, function (el) {\r\n                        return el === true;\r\n                    }).length;\r\n\r\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\r\n                    _force += _passedMatches * 10;\r\n\r\n                    // penalty (short password)\r\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\r\n\r\n                    // penalty (poor variety of characters)\r\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\r\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\r\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\r\n\r\n                    return _force;\r\n\r\n                },\r\n                getColor: function (s) {\r\n\r\n                    var idx;\r\n                    if (s <= 10) {\r\n                        idx = 0;\r\n                    }\r\n                    else if (s <= 20) {\r\n                        idx = 1;\r\n                    }\r\n                    else if (s <= 30) {\r\n                        idx = 2;\r\n                    }\r\n                    else if (s <= 40) {\r\n                        idx = 3;\r\n                    }\r\n                    else {\r\n                        idx = 4;\r\n                    }\r\n\r\n                    return { idx: idx + 1, col: this.colors[idx] };\r\n                }\r\n            };\r\n            scope.$watch('passwordToCheck', function (password) {\r\n                if (password) {\r\n                    var c = strength.getColor(strength.mesureStrength(password));\r\n                    iElement.removeClass('ng-hide');\r\n                    iElement.find('ul').children('li')\r\n                        .css({ 'background-color': '#DDD' })\r\n                        .slice(0, c.idx)\r\n                        .css({ 'background-color': c.col });\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('password', {\r\n            parent: 'account',\r\n            url: '/password',\r\n            data: {\r\n                authorities: ['ROLE_USER'],\r\n                pageTitle: 'Password'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/password/password.html',\r\n                    controller: 'PasswordController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('PasswordController', PasswordController);\r\n\r\n    PasswordController.$inject = ['Auth', 'Principal'];\r\n\r\n    function PasswordController (Auth, Principal) {\r\n        var vm = this;\r\n\r\n        vm.changePassword = changePassword;\r\n        vm.doNotMatch = null;\r\n        vm.error = null;\r\n        vm.success = null;\r\n\r\n        Principal.identity().then(function(account) {\r\n            vm.account = account;\r\n        });\r\n\r\n        function changePassword () {\r\n            if (vm.password !== vm.confirmPassword) {\r\n                vm.error = null;\r\n                vm.success = null;\r\n                vm.doNotMatch = 'ERROR';\r\n            } else {\r\n                vm.doNotMatch = null;\r\n                Auth.changePassword(vm.password).then(function () {\r\n                    vm.error = null;\r\n                    vm.success = 'OK';\r\n                }).catch(function () {\r\n                    vm.success = null;\r\n                    vm.error = 'ERROR';\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('activate', {\r\n            parent: 'account',\r\n            url: '/activate?key',\r\n            data: {\r\n                authorities: [],\r\n                pageTitle: 'Activation'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/account/activate/activate.html',\r\n                    controller: 'ActivationController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .controller('ActivationController', ActivationController);\r\n\r\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\r\n\r\n    function ActivationController ($stateParams, Auth, LoginService) {\r\n        var vm = this;\r\n\r\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\r\n            vm.error = null;\r\n            vm.success = 'OK';\r\n        }).catch(function () {\r\n            vm.success = null;\r\n            vm.error = 'ERROR';\r\n        });\r\n\r\n        vm.login = LoginService.open;\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('poliApp')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('account', {\r\n            abstract: true,\r\n            parent: 'app'\r\n        });\r\n    }\r\n})();\r\n(function(){angular.module('poliApp').run(['$templateCache', function($templateCache) {$templateCache.put('app/clubContact/clubContact.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-12\"><h4>Ne pute\\u021Bi contacta la adresa de email <a href=\"mailto:acsupolibucuresti@gmail.com\" target=\"_top\">acsupolibucuresti@gmail.com</a></h4></div></div><div class=\"row\"><div class=\"col-md-6 col-sm-12\"><h4>Stadion Complex Leu</h4><iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3040.2876763655468!2d26.054945394434174!3d44.433078395205435!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x10c071629497a118!2sTeren+Fotbal+Leu!5e0!3m2!1sen!2sro!4v1500755129044\" width=\"450\" height=\"450\" frameborder=\"0\" style=\"border:0\" allowfullscreen></iframe></div><div class=\"col-md-6 col-sm-12\"><h4>Stadion Politehnica (l\\xE2ng\\u0103 Sport Arena)</h4><iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d1334.7257677675382!2d26.05501487806949!3d44.43972847020909!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sro!4v1500755765675\" width=\"450\" height=\"450\" frameborder=\"0\" style=\"border:0\" allowfullscreen></iframe></div></div></div>');\n$templateCache.put('app/clubPartners/clubPartners.html','<div><jhi-alert></jhi-alert><div class=\"row\"><div class=\"col-md-2 col-sm-3 col-xs-4 margin-bottom-05\" ng-repeat=\"partner in vm.partners\"><img class=\"imgPartner\" data-ng-src=\"{{\\'data:\\' + partner.imageContentType + \\';base64,\\' + partner.image}}\" alt=\"partner image\"></div></div></div>');\n$templateCache.put('app/clubNews/clubNews-detail.html','<div><jhi-alert-error></jhi-alert-error><div class=\"row\"><div class=\"col-sm-12 text-danger\" style=\"margin-top: 1vw\"><small>{{vm.news.createdDate | date:\\'hh/MM/yyyy HH:mm\\'}}</small></div><h4 class=\"text-center\">{{vm.news.title}}</h4></div><hr><div class=\"row\"><div class=\"col-sm-12 text-center\"><img data-ng-src=\"{{\\'data:\\' +vm. news.imageContentType + \\';base64,\\' + vm.news.image}}\" class=\"clubNewsImage\" alt=\"news image\"></div></div><div class=\"row\" style=\"margin-top: 3vw\"><div class=\"col-sm-12\"><span ng-bind-html=\"vm.news.content | to_trusted\"></span></div></div></div>');\n$templateCache.put('app/clubNews/clubNews.html','<div class=\"row\"><jhi-alert></jhi-alert><div ng-repeat=\"news in vm.news | orderBy:\\'createdDate\\':\\'reverse\\'\"><div class=\"col-md-6 clickableNews\" ui-sref=\"clubNews-detail({id:news.id})\"><div class=\"col-sm-6\"><a ng-if=\"news.image\"><img data-ng-src=\"{{\\'data:\\' + news.imageContentType + \\';base64,\\' + news.image}}\" class=\"img-thumbnail\" style=\"max-height:10em\" alt=\"news image\"></a></div><div class=\"col-sm-6\"><div class=\"col-md-12\"><h4>{{news.title}}<h4></h4></h4></div><div class=\"col-md-12 text-danger\">{{news.createdDate | date:\\'hh/MM/yyyy HH:mm\\'}}</div></div></div></div></div>');\n$templateCache.put('app/home/home.html','<div class=\"row\"><div class=\"col-md-8 col-sm-12\"><ul class=\"bxslider\"><li class=\"sliderImage no-padding\" ng-repeat=\"news in vm.news\"><img data-ng-src=\"{{\\'data:\\' + news.imageContentType + \\';base64,\\' + news.image}}\" class=\"img-responsive\" alt=\"news image\"><h4 ui-sref=\"clubNews-detail({id:news.id})\">{{news.title}}</h4></li></ul></div><div class=\"col-md-4 col-sm-12\"><div class=\"row\"><div class=\"col-md-12 matchWell\" ng-repeat=\"match in vm.matches | orderBy:\\'matchdatetime\\':\\'reverse\\'\"><div class=\"row margin-bottom-05 text-center\">{{match.matchcompetition.name}}, {{match.description}}</div><div class=\"row margin-bottom-05 text-center\"><div class=\"col-md-4\"><label>{{match.hometeam}}</label></div><div class=\"col-md-4\">{{match.homegoals}} : {{match.awaygoals}}</div><div class=\"col-md-4\"><label>{{match.awayteam}}</label></div></div><div class=\"row text-center margin-top-10\">Stadion {{match.location}}. {{match.matchdatetime | date:\\'dd/MM/yyyy HH:mm\\'}}</div></div><div class=\"col-md-12\"><button type=\"button\" class=\"btn btn-default btn-block\" ui-sref=\"clubMatches\">Vezi toate meciurile</button></div></div><div class=\"row\" class=\"leagueTableWell\" style=\"margin-top: 15px\"><table class=\"jh-table table\"><thead ng-style=\"{\\'visibility\\' : vm.leagueTables.length > 0 ? \\'visible\\' : \\'hidden\\'}\"><tr class=\"leagueTableWell\"><th><span>Pozi\\u021Bia</span></th><th><span>Denumirea echipei</span></th><th><span>Meciuri jucate</span></th><th><span>Puncte</span></th></tr></thead><tbody><tr ng-repeat=\"leagueTable in vm.leagueTables | orderBy:\\'position\\'\" ng-style=\"setFontWeight(leagueTable)\" class=\"leagueTableWell\"><td>{{leagueTable.position}}</td><td>{{leagueTable.teamname}}</td><td>{{leagueTable.played}}</td><td>{{leagueTable.points}}</td></tr></tbody><tfoot><tr><td colspan=\"4\"><button type=\"button\" class=\"btn btn-default btn-block\" ui-sref=\"clubRanking\">Vezi clasamentul complet</button></td></tr></tfoot></table></div></div></div><hr style=\"border: 2px solid black\"><div class=\"row\"><div class=\"col-md-12 text-center\"><img src=\"content/images/upb.png\" alt=\"logo\" style=\"max-width:100px; max-height:100px\"></div></div>');\n$templateCache.put('app/account/activate/activate.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Activation</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Your user has been activated.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>');\n$templateCache.put('app/account/password/password.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>Password for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Password changed!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.changePassword()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/account/register/register.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Registration</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Registration failed!</strong> Please try again later.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorUserExists\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailExists\"><strong>Email is already in use!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div></div><div class=\"col-md-4 col-md-offset-2\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.register()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"login\">Username</label><input type=\"text\" class=\"form-control\" id=\"login\" name=\"login\" placeholder=\"Your username\" ng-model=\"vm.registerAccount.login\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\" required><div ng-show=\"form.login.$dirty && form.login.$invalid\"><p class=\"help-block\" ng-show=\"form.login.$error.required\">Your username is required.</p><p class=\"help-block\" ng-show=\"form.login.$error.minlength\">Your username is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.login.$error.maxlength\">Your username cannot be longer than 50 characters.</p><p class=\"help-block\" ng-show=\"form.login.$error.pattern\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\">Email</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your email\" ng-model=\"vm.registerAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your email is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your email is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your email is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your email cannot be longer than 100 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.registerAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.registerAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Register</button></form><p></p><div class=\"alert alert-warning\">If you want to <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div></div><div class=\"col-md-4\"><br><jh-social ng-provider=\"google\"></jh-social><jh-social ng-provider=\"facebook\"></jh-social><jh-social ng-provider=\"twitter\"></jh-social><!-- jhipster-needle-add-social-button --></div></div></div>');\n$templateCache.put('app/account/settings/settings.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Settings saved!</strong></div><jhi-alert-error></jhi-alert-error><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"firstName\">First Name</label><input type=\"text\" class=\"form-control\" id=\"firstName\" name=\"firstName\" placeholder=\"Your first name\" ng-model=\"vm.settingsAccount.firstName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.firstName.$dirty && form.firstName.$invalid\"><p class=\"help-block\" ng-show=\"form.firstName.$error.required\">Your first name is required.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.minlength\">Your first name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.maxlength\">Your first name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"lastName\">Last Name</label><input type=\"text\" class=\"form-control\" id=\"lastName\" name=\"lastName\" placeholder=\"Your last name\" ng-model=\"vm.settingsAccount.lastName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.lastName.$dirty && form.lastName.$invalid\"><p class=\"help-block\" ng-show=\"form.lastName.$error.required\">Your last name is required.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.minlength\">Your last name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.maxlength\">Your last name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\">Email</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your email\" ng-model=\"vm.settingsAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required maxlength=\"100\"><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your email is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your email is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your email is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your email cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/account/social/social-register.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1 ng-show=\"success\">Registration with</h1><h1 ng-show=\"error\">Registration</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Registration failed!</strong> Please try again later.</div><jh-social ng-if=\"vm.success\" ng-provider=\"{{ vm.provider }}\"></jh-social><br><div class=\"alert alert-warning\">If you want to <a class=\"alert-link\" href=\"#/login\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div></div></div></div>');\n$templateCache.put('app/admin/audits/audits.html','<div><h2>Audits</h2><div class=\"row\"><div class=\"col-md-5\"><h4>Filter by date</h4><p class=\"input-group\"><span class=\"input-group-addon\">from</span> <input type=\"date\" class=\"input-sm form-control\" name=\"start\" ng-model=\"vm.fromDate\" ng-change=\"vm.onChangeDate()\" required> <span class=\"input-group-addon\">to</span> <input type=\"date\" class=\"input-sm form-control\" name=\"end\" ng-model=\"vm.toDate\" ng-change=\"vm.onChangeDate()\" required></p></div></div><table class=\"table table-condensed table-striped table-bordered table-responsive\"><thead><tr><th ng-click=\"predicate = \\'timestamp\\'; reverse=!reverse\"><span>Date</span></th><th ng-click=\"predicate = \\'principal\\'; reverse=!reverse\"><span>User</span></th><th ng-click=\"predicate = \\'type\\'; reverse=!reverse\"><span>State</span></th><th ng-click=\"predicate = \\'data.message\\'; reverse=!reverse\"><span>Extra data</span></th></tr></thead><tr ng-repeat=\"audit in vm.audits | filter:filter | orderBy:predicate:reverse\" ng-hide=\"audit.filtered\"><td><span>{{audit.timestamp| date:\\'medium\\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show=\"audit.data.message\">{{audit.data.message}}</span> <span ng-show=\"audit.data.remoteAddress\"><span>Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class=\"text-center\"><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.loadPage(vm.page)\"></uib-pagination></div></div>');\n$templateCache.put('app/admin/configuration/configuration.html','<div><h2>Configuration</h2><span>Filter (by prefix)</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><label ng-hide=\"filteredConfig.length === 0\">Spring configuration</label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filteredConfig.length === 0\"><thead><tr><th ng-click=\"predicate = \\'prefix\\'; reverse=!reverse\" class=\"col-sm-4\"><span>Prefix</span></th><th class=\"col-sm-8\">Properties</th></tr></thead><tr ng-repeat=\"entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)\"><td><span>{{entry.prefix}}</span></td><td><div class=\"row\" ng-repeat=\"(key, value) in entry.properties\"><div class=\"col-md-4\">{{key}}</div><div class=\"col-md-8\"><span class=\"pull-right label label-default break\">{{value}}</span></div></div></td></tr></table><div ng-repeat=\"(key, value) in vm.allConfiguration\"><label ng-hide=\"filtered.length === 0\"><span>{{key}}</span></label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filtered.length === 0\"><thead><tr><th class=\"col-sm-4\">Property</th><th class=\"col-sm-8\">Value</th></tr></thead><tbody><tr ng-repeat=\"item in filtered = (value | filter:filter)\"><td class=\"break\">{{item.key}}</td><td class=\"break\"><span class=\"pull-right label label-default break\">{{item.val}}</span></td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/health/health.html','<div><h2>Health Checks</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><table id=\"healthCheck\" class=\"table table-striped\"><thead><tr><th class=\"col-md-7\">Service Name</th><th class=\"col-md-2 text-center\">Status</th><th class=\"col-md-2 text-center\">Details</th></tr></thead><tbody><tr ng-repeat=\"health in vm.healthData\"><td><span class=\"text-capitalize\">{{ vm.baseName(health.name) }}</span> {{vm.subSystemName(health.name)}}</td><td class=\"text-center\"><span class=\"label\" ng-class=\"vm.getLabelClass(health.status)\">{{ health.status }}</span></td><td class=\"text-center\"><a class=\"hand\" ng-click=\"vm.showHealth(health)\" ng-show=\"health.details || health.error\"><i class=\"glyphicon glyphicon-eye-open\"></i></a></td></tr></tbody></table></div>');\n$templateCache.put('app/admin/health/health.modal.html','<div class=\"modal-header\"><button aria-label=\"Close\" data-dismiss=\"modal\" class=\"close\" type=\"button\" ng-click=\"vm.cancel()\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\" id=\"showHealthLabel\"><span class=\"text-capitalize\">{{ vm.baseName(vm.currentHealth.name) }}</span> {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class=\"modal-body pad\"><div ng-show=\"vm.currentHealth.details\"><h4>Properties</h4><table class=\"table table-striped\"><thead><tr><th class=\"col-md-6 text-left\">Name</th><th class=\"col-md-6 text-left\">Value</th></tr></thead><tbody><tr ng-repeat=\"(k,v) in vm.currentHealth.details\"><td class=\"col-md-6 text-left\">{{k}}</td><td class=\"col-md-6 text-left\">{{v}}</td></tr></tbody></table></div><div ng-show=\"vm.currentHealth.error\"><h4>Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-default pull-left\" type=\"button\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/docs/docs.html','<iframe src=\"swagger-ui/index.html\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" width=\"100%\" height=\"900\" scrolling=\"auto\" target=\"_top\" title=\"Swagger UI\"></iframe>');\n$templateCache.put('app/admin/logs/logs.html','<div class=\"table-responsive\"><h2>Logs</h2><p>There are {{ vm.loggers.length }} loggers.</p><span>Filter</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><table class=\"table table-condensed table-striped table-bordered\"><thead><tr title=\"click to order\"><th ng-click=\"predicate = \\'name\\'; reverse=!reverse\"><span>Name</span></th><th ng-click=\"predicate = \\'level\\'; reverse=!reverse\"><span>Level</span></th></tr></thead><tr ng-repeat=\"logger in vm.loggers | filter:filter | orderBy:predicate:reverse\"><td><small>{{logger.name | characters:140}}</small></td><td><button ng-click=\"vm.changeLevel(logger.name, \\'TRACE\\')\" ng-class=\"(logger.level==\\'TRACE\\') ? \\'btn-danger\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">TRACE</button> <button ng-click=\"vm.changeLevel(logger.name, \\'DEBUG\\')\" ng-class=\"(logger.level==\\'DEBUG\\') ? \\'btn-warning\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">DEBUG</button> <button ng-click=\"vm.changeLevel(logger.name, \\'INFO\\')\" ng-class=\"(logger.level==\\'INFO\\') ? \\'btn-info\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">INFO</button> <button ng-click=\"vm.changeLevel(logger.name, \\'WARN\\')\" ng-class=\"(logger.level==\\'WARN\\') ? \\'btn-success\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">WARN</button> <button ng-click=\"vm.changeLevel(logger.name, \\'ERROR\\')\" ng-class=\"(logger.level==\\'ERROR\\') ? \\'btn-primary\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">ERROR</button></td></tr></table></div>');\n$templateCache.put('app/admin/metrics/metrics.html','<div><h2>Application Metrics</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><h3>JVM Metrics</h3><div class=\"row\" ng-hide=\"vm.updatingMetrics\"><div class=\"col-md-4\"><b>Memory</b><p><span>Total Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.total.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.total.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.total.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.total.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Non-Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Threads</b> (Total: {{vm.metrics.gauges[\\'jvm.threads.count\\'].value}}) <a class=\"hand\" ng-click=\"vm.refreshThreadDumpData()\" data-toggle=\"modal\" data-target=\"#threadDump\"><i class=\"glyphicon glyphicon-eye-open\"></i></a><p><span>Runnable</span> {{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value}}</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Timed Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Blocked</span> ({{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Garbage collections</b><div class=\"row\"><div class=\"col-md-9\">Mark Sweep count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Mark Sweep time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.time\\'].value}}ms</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.time\\'].value}}ms</div></div></div></div><div class=\"well well-lg\" ng-show=\"vm.updatingMetrics\">Updating...</div><h3>HTTP requests (events per second)</h3><p><span>Active requests</span> <b>{{vm.metrics.counters[\\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\\'].count | number:0}}</b> - <span>Total requests</span> <b>{{vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count | number:0}}</b></p><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Code</th><th>Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\"><span>Average</span> (1 min)</th><th class=\"text-right\"><span>Average</span> (5 min)</th><th class=\"text-right\"><span>Average</span> (15 min)</th></tr></thead><tbody><tr><td>OK</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m15_rate | number:2}}</td></tr><tr><td>Not Found</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m15_rate | number:2}}</td></tr><tr><td>Server error</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3>Services statistics (time in millisecond)</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Service name</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.servicesStats\"><td>{{k}}</td><td class=\"text-right\">{{v.count}}</td><td class=\"text-right\">{{v.mean * 1000 | number:0}}</td><td class=\"text-right\">{{v.min * 1000 | number:0}}</td><td class=\"text-right\">{{v.p50 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p75 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p95 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p99 * 1000 | number:0}}</td><td class=\"text-right\">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3>Cache statistics</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Cache name</th><th class=\"text-right\">Cache Hits</th><th class=\"text-right\">Cache Misses</th><th class=\"text-right\">Cache Gets</th><th class=\"text-right\">Cache Puts</th><th class=\"text-right\">Cache Removals</th><th class=\"text-right\">Cache Evictions</th><th class=\"text-right\">Cache Hit %</th><th class=\"text-right\">Cache Miss %</th><th class=\"text-right\">Average get time (\\xB5s)</th><th class=\"text-right\">Average put time (\\xB5s)</th><th class=\"text-right\">Average remove time (\\xB5s)</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.cachesStats\" ng-once><td>{{v.name}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-hits\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-misses\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-gets\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-puts\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-removals\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-evictions\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-hit-percentage\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-miss-percentage\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-get-time\\'].value | number:2}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-put-time\\'].value | number:2}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-remove-time\\'].value | number:2}}</td></tr></tbody></table></div><h3 ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\">DataSource statistics (time in millisecond)</h3><div class=\"table-responsive\" ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\"><table class=\"table table-striped\"><thead><tr><th><span>Usage</span> ({{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value}} / {{vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value}})</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr><td><div class=\"progress progress-striped\"><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value\" value=\"vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value * 100 / vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value | number:0}}%</span></uib-progressbar></div></td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].count}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].mean | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].min | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p50 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p75 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p95 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p99 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].max | number:2}}</td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/metrics/metrics.modal.html','<!-- Modal used to display the threads dump --><div class=\"modal-header\"><button type=\"button\" class=\"close\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Threads dump</h4></div><div class=\"modal-body pad\"><span class=\"label label-primary\" ng-click=\"threadDumpFilter = {}\">All&nbsp;<span class=\"badge\">{{vm.threadDumpAll}}</span></span>&nbsp; <span class=\"label label-success\" ng-click=\"threadDumpFilter = {threadState: \\'RUNNABLE\\'}\">Runnable&nbsp;<span class=\"badge\">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class=\"label label-info\" ng-click=\"threadDumpFilter = {threadState: \\'WAITING\\'}\">Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class=\"label label-warning\" ng-click=\"threadDumpFilter = {threadState: \\'TIMED_WAITING\\'}\">Timed Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\"label label-danger\" ng-click=\"threadDumpFilter = {threadState: \\'BLOCKED\\'}\">Blocked&nbsp;<span class=\"badge\">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class=\"voffset2\">&nbsp;</div>Filter <input type=\"text\" ng-model=\"threadDumpFilter\" class=\"form-control\"><div class=\"row pad\" ng-repeat=\"(k, v) in vm.threadDump | filter:threadDumpFilter\"><h5><span class=\"label\" ng-class=\"vm.getLabelClass(v.threadState)\">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\"show = !show\"><span ng-show=\"!show\">Show StackTrace</span> <span ng-show=\"show\">Hide StackTrace</span></a></h5><div class=\"well\" ng-show=\"show\"><div ng-repeat=\"(stK, stV) in v.stackTrace\">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=\"voffset1\"></span></div></div><table class=\"table table-condensed\"><thead><tr><th class=\"text-right\">Blocked Time</th><th class=\"text-right\">Blocked Count</th><th class=\"text-right\">Waited Time</th><th class=\"text-right\">Waited Count</th><th>Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/user-management/user-management-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.user.login)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this User?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management-detail.html','<div><h2><span>User</span> [<b>{{vm.user.login}}</b>]</h2><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Login</span></dt><dd><span>{{vm.user.login}}</span> <span class=\"label label-danger\" ng-show=\"!vm.user.activated\">Deactivated</span> <span class=\"label label-success\" ng-show=\"vm.user.activated\">Activated</span></dd><dt><span>First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span>Last Name</span></dt><dd>{{vm.user.lastName}}</dd><dt><span>Email</span></dt><dd>{{vm.user.email}}</dd><dt><span>Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span>Created Date</span></dt><dd>{{vm.user.createdDate | date:\\'dd/MM/yy HH:mm\\' }}</dd><dt><span>Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span>Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</dd><dt><span>Profiles</span></dt><dd><ul class=\"list-unstyled\"><li ng-repeat=\"authority in vm.user.authorities\"><span class=\"label label-info\">{{authority}}</span></li></ul></dd></dl><button type=\"submit\" ui-sref=\"user-management\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button></div>');\n$templateCache.put('app/admin/user-management/user-management-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myUserLabel\">Create or edit a User</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\"><label>ID</label><input type=\"text\" class=\"form-control\" name=\"id\" ng-model=\"vm.user.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\">Login</label><input type=\"text\" class=\"form-control\" name=\"login\" ng-model=\"vm.user.login\" required ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\"><div ng-show=\"editForm.login.$invalid\"><p class=\"help-block\" ng-show=\"editForm.login.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.login.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\">First Name</label><input type=\"text\" class=\"form-control\" name=\"firstName\" ng-model=\"vm.user.firstName\" ng-maxlength=\"50\"><div ng-show=\"editForm.firstName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.firstName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label>Last Name</label><input type=\"text\" class=\"form-control\" name=\"lastName\" ng-model=\"vm.user.lastName\" ng-maxlength=\"50\"><div ng-show=\"editForm.lastName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.lastName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\">Email</label><input type=\"email\" class=\"form-control\" name=\"email\" ng-model=\"vm.user.email\" required ng-maxlength=\"100\"><div ng-show=\"editForm.email.$invalid\"><p class=\"help-block\" ng-show=\"editForm.email.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.maxlength\">This field cannot be longer than 100 characters.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.email\">Your email is invalid.</p></div></div><div class=\"form-group\"><label for=\"activated\"><input ng-disabled=\"vm.user.id === null\" type=\"checkbox\" id=\"activated\" name=\"activated\" ng-model=\"vm.user.activated\"> <span>Activated</span></label></div><div class=\"form-group\"><label>Profiles</label><select class=\"form-control\" multiple=\"multiple\" name=\"authority\" ng-model=\"vm.user.authorities\" ng-options=\"authority for authority in vm.authorities\"></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management.html','<div><h2>Users</h2><jhi-alert></jhi-alert><div class=\"row\"><div class=\"col-md-4\"><button class=\"btn btn-primary\" ui-sref=\"user-management.new\"><span class=\"glyphicon glyphicon-flash\"></span> <span>Create a new User</span></button></div></div><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span><span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"login\"><span>Login</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"email\"><span>Email</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th><th><span>Profiles</span></th><th jh-sort-by=\"createdDate\"><span>Created Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedBy\"><span>Last Modified By</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedDate\"><span>Last Modified Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"user in vm.users track by user.id\"><td><a ui-sref=\"user-management-detail({login:user.login})\">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><td><button class=\"btn btn-danger btn-xs\" ng-click=\"vm.setActive(user, true)\" ng-show=\"!user.activated\">Deactivated</button> <button class=\"btn btn-success btn-xs\" ng-click=\"vm.setActive(user, false)\" ng-show=\"user.activated\" ng-disabled=\"vm.currentAccount.login === user.login\">Activated</button></td><td><div ng-repeat=\"authority in user.authorities\"><span class=\"label label-info\">{{ authority }}</span></div></td><td>{{user.createdDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"user-management-detail({login:user.login})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.edit({login:user.login})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.delete({login:user.login})\" class=\"btn btn-danger btn-sm\" ng-disabled=\"vm.currentAccount.login === user.login\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/club/clubHistory/clubHistory.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-12\">Club History</div></div></div>');\n$templateCache.put('app/club/clubStadium/clubStadium.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-12\">Club Stadium</div></div></div>');\n$templateCache.put('app/clubSchedule/clubRanking/clubRanking.html','<div ng-style=\"{\\'visibility\\' : vm.leagueTables.length > 0 ? \\'visible\\' : \\'hidden\\'}\"><jhi-alert></jhi-alert><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"position\"><span>Pozi\\u021Bia</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th><span>Denumirea echipei</span></th><th jh-sort-by=\"played\"><span>Meciuri jucate</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"wins\"><span>Victorii</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"draws\"><span>Egaluri</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"losses\"><span>\\xCEnfr\\xE2ngeri</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"goalsfor\"><span>Goluri marcate</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"goalsagainst\"><span>Goluri primite</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"points\"><span>Puncte</span> <span class=\"glyphicon glyphicon-sort\"></span></th></tr></thead><tbody><tr ng-repeat=\"leagueTable in vm.leagueTables\" ng-style=\"setFontWeight(leagueTable)\"><td>{{leagueTable.position}}</td><td>{{leagueTable.teamname}}</td><td>{{leagueTable.played}}</td><td>{{leagueTable.wins}}</td><td>{{leagueTable.draws}}</td><td>{{leagueTable.losses}}</td><td>{{leagueTable.goalsfor}}</td><td>{{leagueTable.goalsagainst}}</td><td>{{leagueTable.points}}</td></tr></tbody></table></div></div><div ng-style=\"{\\'visibility\\' : vm.leagueTables.length == 0 ? \\'visible\\' : \\'hidden\\'}\">Pagina in lucru...</div>');\n$templateCache.put('app/clubSchedule/clubMatches/clubMatches.html','<div ng-style=\"{\\'visibility\\' : vm.matches.length > 0 ? \\'visible\\' : \\'hidden\\'}\"><jhi-alert></jhi-alert><br><div class=\"row\"><div class=\"col-md-12 matchWell\" ng-repeat=\"match in vm.matches | orderBy:\\'matchdatetime\\':\\'reverse\\'\"><div class=\"row margin-bottom-05 text-center\">{{match.matchcompetition.name}}, {{match.description}}</div><div class=\"row margin-bottom-05 text-center\"><div class=\"col-md-4\"><label>{{match.hometeam}}</label></div><div class=\"col-md-4\">{{match.homegoals}} : {{match.awaygoals}}</div><div class=\"col-md-4\"><label>{{match.awayteam}}</label></div></div><div class=\"row text-center margin-top-10\">Stadion {{match.location}}. {{match.matchdatetime | date:\\'dd/MM/yyyy HH:mm\\'}}</div></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div></div><div ng-style=\"{\\'visibility\\' : vm.matches.length == 0 ? \\'visible\\' : \\'hidden\\'}\">Pagina in lucru...</div>');\n$templateCache.put('app/clubTeam/clubStaff/clubStaff.html','<div ng-style=\"{\\'visibility\\' : vm.staff.length > 0 ? \\'visible\\' : \\'hidden\\'}\"><jhi-alert></jhi-alert><div class=\"row\"><div class=\"col-md-2 col-sm-4 col-xs-6 text-center\" ng-repeat=\"staff in vm.staff | orderBy:\\'priority\\'\"><h4>{{staff.staffjob.name}}</h4><a ng-if=\"staff.image\" ng-click=\"vm.showStaffDetails(staff)\"><img data-ng-src=\"{{\\'data:\\' + staff.imageContentType + \\';base64,\\' + staff.image}}\" class=\"img-thumbnail\" style=\"max-height:10em\" alt=\"staff image\"></a><h4>{{staff.fullname}}</h4></div></div></div><div ng-style=\"{\\'visibility\\' : vm.staff.length == 0 ? \\'visible\\' : \\'hidden\\'}\">Pagina in lucru...</div><div id=\"staffDetailsModal\" class=\"modal fade\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header text-center\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h4 class=\"modal-title\">{{vm.selectedPlayer.fullname}}</h4></div><div class=\"modal-body\"><div class=\"row\"><div class=\"col-md-4\"><img data-ng-src=\"{{\\'data:\\' + vm.selectedPlayer.imageContentType + \\';base64,\\' + vm.selectedPlayer.image}}\" style=\"height:10vw\" alt=\"player image\"></div><div class=\"col-md-8\"><div class=\"row\"><div class=\"col-md-4\"><label>Data Nasterii</label></div><div class=\"col-md-8\">{{vm.selectedPlayer.dateofbirth | date:\\'dd-MM-yyyy\\'}}</div></div><div class=\"row\"><div class=\"col-md-4\"><label>Locul Nasterii</label></div><div class=\"col-md-8\">{{vm.selectedPlayer.placeofbirth}}</div></div><div class=\"row\"><div class=\"col-md-4\"><label>Cluburi Anterioare</label></div><div class=\"col-md-8\">{{vm.selectedPlayer.previousclubs}}</div></div></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Ok</button></div></div></div></div>');\n$templateCache.put('app/clubTeam/clubPlayers/clubPlayers.html','<div ng-style=\"{\\'visibility\\' : vm.players.length > 0 ? \\'visible\\' : \\'hidden\\'}\"><jhi-alert></jhi-alert><div class=\"row\"><div class=\"col-md-12\" style=\"margin-bottom:5px\"><h4>Portari</h4></div><div class=\"col-md-2 col-sm-4 col-xs-6 text-center\" ng-repeat=\"player in vm.players | orderBy:\\'priority\\'\" ng-show=\"player.playerposition.id ==  1\"><a ng-if=\"player.image\" ng-click=\"vm.showPlayerDetails(player)\"><img data-ng-src=\"{{\\'data:\\' + player.imageContentType + \\';base64,\\' + player.image}}\" class=\"img-circle img-thumbnail\" style=\"max-height:10em\" alt=\"player image\"></a><h4>{{player.shirtno}}. {{player.fullname}}</h4></div></div><hr><div class=\"row\"><div class=\"col-md-12\" style=\"margin-bottom:5px\"><h4>Funda\\u0219i</h4></div><div class=\"col-md-2 col-sm-4 col-xs-6 text-center\" ng-repeat=\"player in vm.players | orderBy:\\'priority\\'\" ng-show=\"player.playerposition.id ==  2\"><a ng-if=\"player.image\" ng-click=\"vm.showPlayerDetails(player)\"><img data-ng-src=\"{{\\'data:\\' + player.imageContentType + \\';base64,\\' + player.image}}\" class=\"img-circle img-thumbnail\" style=\"max-height:10em\" alt=\"player image\"></a><h4>{{player.shirtno}}. {{player.fullname}}</h4></div></div><hr><div class=\"row\"><div class=\"col-md-12\" style=\"margin-bottom:5px\"><h4>Mijloca\\u0219i</h4></div><div class=\"col-md-2 col-sm-4 col-xs-6 text-center\" ng-repeat=\"player in vm.players | orderBy:\\'priority\\'\" ng-show=\"player.playerposition.id ==  3\"><a ng-if=\"player.image\" ng-click=\"vm.showPlayerDetails(player)\"><img data-ng-src=\"{{\\'data:\\' + player.imageContentType + \\';base64,\\' + player.image}}\" class=\"img-circle img-thumbnail\" style=\"max-height:10em\" alt=\"player image\"></a><h4>{{player.shirtno}}. {{player.fullname}}</h4></div></div><hr><div class=\"row\"><div class=\"col-md-12\" style=\"margin-bottom:5px\"><h4>Atacan\\u021Bi</h4></div><div class=\"col-md-2 col-sm-4 col-xs-6 text-center\" ng-repeat=\"player in vm.players | orderBy:\\'priority\\'\" ng-show=\"player.playerposition.id ==  4\"><a ng-if=\"player.image\" ng-click=\"vm.showPlayerDetails(player)\"><img data-ng-src=\"{{\\'data:\\' + player.imageContentType + \\';base64,\\' + player.image}}\" class=\"img-circle img-thumbnail\" style=\"max-height:10em\" alt=\"player image\"></a><h4>{{player.shirtno}}. {{player.fullname}}</h4></div></div></div><div id=\"playerDetailsModal\" class=\"modal fade\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header text-center\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h4 class=\"modal-title\">{{vm.selectedPlayer .shirtno}}. {{vm.selectedPlayer .fullname}}</h4></div><div class=\"modal-body\"><div class=\"row\"><div class=\"col-md-4\"><img data-ng-src=\"{{\\'data:\\' + vm.selectedPlayer.imageContentType + \\';base64,\\' + vm.selectedPlayer.image}}\" style=\"height:10vw\" alt=\"player image\"></div><div class=\"col-md-8\"><div class=\"row\"><div class=\"col-md-4\"><label>Data Nasterii</label></div><div class=\"col-md-8\">{{vm.selectedPlayer.dateofbirth | date:\\'dd-MM-yyyy\\'}}</div></div><div class=\"row\"><div class=\"col-md-4\"><label>Locul Nasterii</label></div><div class=\"col-md-8\">{{vm.selectedPlayer.placeofbirth}}</div></div><div class=\"row\"><div class=\"col-md-4\"><label>Cluburi Anterioare</label></div><div class=\"col-md-8\">{{vm.selectedPlayer.previousclubs}}</div></div></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Ok</button></div></div></div></div><div ng-style=\"{\\'visibility\\' : vm.players.length == 0 ? \\'visible\\' : \\'hidden\\'}\">Pagina in lucru...</div>');\n$templateCache.put('app/components/login/login.html','<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Sign in</h4></div><div class=\"modal-body\"><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1>Sign in</h1></div><div class=\"col-md-8 col-md-offset-2\"><div class=\"alert alert-danger\" ng-show=\"vm.authenticationError\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class=\"col-md-6\"><form class=\"form\" role=\"form\" ng-submit=\"vm.login($event)\"><div class=\"form-group\"><label for=\"username\">Login</label><input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"Your username\" ng-model=\"vm.username\"></div><div class=\"form-group\"><label for=\"password\">Password</label><input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Your password\" ng-model=\"vm.password\"></div><div class=\"form-group\"><label for=\"rememberMe\"><input type=\"checkbox\" id=\"rememberMe\" ng-model=\"vm.rememberMe\" checked=\"checked\"> <span>Remember me</span></label></div><button type=\"submit\" class=\"btn btn-primary\">Sign in</button></form><p></p><div class=\"alert alert-warning\"><a class=\"alert-link\" href=\"\" ng-click=\"vm.requestResetPassword()\">Did you forget your password?</a></div><div class=\"alert alert-warning\">You don\\'t have an account yet? <a class=\"alert-link\" href=\"\" ng-click=\"vm.register()\">Register a new account</a></div></div><div class=\"col-md-6\"><br><jh-social ng-provider=\"google\"></jh-social><jh-social ng-provider=\"facebook\"></jh-social><jh-social ng-provider=\"twitter\"></jh-social><!-- jhipster-needle-add-social-button --></div></div></div>');\n$templateCache.put('app/entities/competition/competition-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.competition.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Competition?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/competition/competition-detail.html','<div><h2><span>Competition</span> {{vm.competition.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.competition.name}}</span></dd><dt><span>Competitionseason</span></dt><dd><a ui-sref=\"season-detail({id:vm.competition.competitionseason.id})\">{{vm.competition.competitionseason.id}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"competition-detail.edit({id:vm.competition.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/competition/competition-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myCompetitionLabel\">Create or edit a Competition</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.competition.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.competition.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.competition.name\" required><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label for=\"field_competitionseason\">Sezon</label><select class=\"form-control\" id=\"field_competitionseason\" name=\"competitionseason\" ng-model=\"vm.competition.competitionseason\" ng-options=\"season as season.name for season in vm.seasons track by season.id\" required></select></div><div ng-show=\"editForm.competitionseason.$invalid\"><p class=\"help-block\" ng-show=\"editForm.competitionseason.$error.required\">This field is required.</p></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/competition/competitions.html','<div><h2>Competitions</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"competition.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Competition</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"competitionseason.id\"><span>Sezon</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"competition in vm.competitions track by competition.id\"><td><a ui-sref=\"competition-detail({id:competition.id})\">{{competition.id}}</a></td><td>{{competition.name}}</td><td><a ui-sref=\"season-detail({id:competition.competitionseason.id})\">{{competition.competitionseason.name}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"competition-detail({id:competition.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"competition.edit({id:competition.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"competition.delete({id:competition.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/entities/job/job-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.job.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Job?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/job/job-detail.html','<div><h2><span>Job</span> {{vm.job.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.job.name}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"job-detail.edit({id:vm.job.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/job/job-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myJobLabel\">Create or edit a Job</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.job.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.job.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.job.name\" required><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/job/jobs.html','<div><h2>Jobs</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"job.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Job</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"job in vm.jobs track by job.id\"><td><a ui-sref=\"job-detail({id:job.id})\">{{job.id}}</a></td><td>{{job.name}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"job-detail({id:job.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"job.edit({id:job.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"job.delete({id:job.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/entities/league-table/league-table-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.leagueTable.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this League Table?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/league-table/league-table-detail.html','<div><h2><span>League Table</span> {{vm.leagueTable.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Position</span></dt><dd><span>{{vm.leagueTable.position}}</span></dd><dt><span>Teamname</span></dt><dd><span>{{vm.leagueTable.teamname}}</span></dd><dt><span>Played</span></dt><dd><span>{{vm.leagueTable.played}}</span></dd><dt><span>Wins</span></dt><dd><span>{{vm.leagueTable.wins}}</span></dd><dt><span>Draws</span></dt><dd><span>{{vm.leagueTable.draws}}</span></dd><dt><span>Losses</span></dt><dd><span>{{vm.leagueTable.losses}}</span></dd><dt><span>Goalsfor</span></dt><dd><span>{{vm.leagueTable.goalsfor}}</span></dd><dt><span>Goalsagainst</span></dt><dd><span>{{vm.leagueTable.goalsagainst}}</span></dd><dt><span>Points</span></dt><dd><span>{{vm.leagueTable.points}}</span></dd><dt><span>Leaguetablecompetition</span></dt><dd><a ui-sref=\"competition-detail({id:vm.leagueTable.leaguetablecompetition.id})\">{{vm.leagueTable.leaguetablecompetition.id}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"league-table-detail.edit({id:vm.leagueTable.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/league-table/league-table-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myLeagueTableLabel\">Create or edit a League Table</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.leagueTable.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.leagueTable.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_position\">Pozi\\u021Bie</label><input type=\"number\" class=\"form-control\" name=\"position\" id=\"field_position\" ng-model=\"vm.leagueTable.position\" required><div ng-show=\"editForm.position.$invalid\"><p class=\"help-block\" ng-show=\"editForm.position.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.position.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_teamname\">Denumire echip\\u0103</label><input type=\"text\" class=\"form-control\" name=\"teamname\" id=\"field_teamname\" ng-model=\"vm.leagueTable.teamname\" required><div ng-show=\"editForm.teamname.$invalid\"><p class=\"help-block\" ng-show=\"editForm.teamname.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_played\">Meciuri jucate</label><input type=\"number\" class=\"form-control\" name=\"played\" id=\"field_played\" ng-model=\"vm.leagueTable.played\" required><div ng-show=\"editForm.played.$invalid\"><p class=\"help-block\" ng-show=\"editForm.played.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.played.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_wins\">Victorii</label><input type=\"number\" class=\"form-control\" name=\"wins\" id=\"field_wins\" ng-model=\"vm.leagueTable.wins\" required><div ng-show=\"editForm.wins.$invalid\"><p class=\"help-block\" ng-show=\"editForm.wins.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.wins.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_draws\">Egaluri</label><input type=\"number\" class=\"form-control\" name=\"draws\" id=\"field_draws\" ng-model=\"vm.leagueTable.draws\" required><div ng-show=\"editForm.draws.$invalid\"><p class=\"help-block\" ng-show=\"editForm.draws.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.draws.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_losses\">\\xEEnfr\\xE2ngeri</label><input type=\"number\" class=\"form-control\" name=\"losses\" id=\"field_losses\" ng-model=\"vm.leagueTable.losses\" required><div ng-show=\"editForm.losses.$invalid\"><p class=\"help-block\" ng-show=\"editForm.losses.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.losses.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_goalsfor\">Goluri marcate</label><input type=\"number\" class=\"form-control\" name=\"goalsfor\" id=\"field_goalsfor\" ng-model=\"vm.leagueTable.goalsfor\" required><div ng-show=\"editForm.goalsfor.$invalid\"><p class=\"help-block\" ng-show=\"editForm.goalsfor.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.goalsfor.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_goalsagainst\">Goluri primite</label><input type=\"number\" class=\"form-control\" name=\"goalsagainst\" id=\"field_goalsagainst\" ng-model=\"vm.leagueTable.goalsagainst\" required><div ng-show=\"editForm.goalsagainst.$invalid\"><p class=\"help-block\" ng-show=\"editForm.goalsagainst.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.goalsagainst.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_points\">Puncte</label><input type=\"number\" class=\"form-control\" name=\"points\" id=\"field_points\" ng-model=\"vm.leagueTable.points\" required><div ng-show=\"editForm.points.$invalid\"><p class=\"help-block\" ng-show=\"editForm.points.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.points.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label for=\"field_leaguetablecompetition\">Competi\\u021Bie</label><select class=\"form-control\" id=\"field_leaguetablecompetition\" name=\"leaguetablecompetition\" ng-model=\"vm.leagueTable.leaguetablecompetition\" ng-options=\"competition as competition.name for competition in vm.competitions track by competition.id\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/league-table/league-tables.html','<div><h2>League Tables</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"league-table.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new League Table</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"position\"><span>Pozi\\u021Bie</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"teamname\"><span>Nume echip\\u0103</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"played\"><span>Meciuri jucate</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"wins\"><span>Victorii</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"draws\"><span>Egaluri</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"losses\"><span>\\xCEnfr\\xE2ngeri</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"goalsfor\"><span>Goluri marcate</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"goalsagainst\"><span>Goluri primite</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"points\"><span>Puncte</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"leaguetablecompetition.id\"><span>Competi\\u021Bie</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"leagueTable in vm.leagueTables track by leagueTable.id\"><td><a ui-sref=\"league-table-detail({id:leagueTable.id})\">{{leagueTable.id}}</a></td><td>{{leagueTable.position}}</td><td>{{leagueTable.teamname}}</td><td>{{leagueTable.played}}</td><td>{{leagueTable.wins}}</td><td>{{leagueTable.draws}}</td><td>{{leagueTable.losses}}</td><td>{{leagueTable.goalsfor}}</td><td>{{leagueTable.goalsagainst}}</td><td>{{leagueTable.points}}</td><td><a ui-sref=\"competition-detail({id:leagueTable.leaguetablecompetition.id})\">{{leagueTable.leaguetablecompetition.name}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"league-table-detail({id:leagueTable.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"league-table.edit({id:leagueTable.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"league-table.delete({id:leagueTable.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/entities/match/match-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.match.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Match?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/match/match-detail.html','<div><h2><span>Match</span> {{vm.match.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Hometeam</span></dt><dd><span>{{vm.match.hometeam}}</span></dd><dt><span>Awayteam</span></dt><dd><span>{{vm.match.awayteam}}</span></dd><dt><span>Homegoals</span></dt><dd><span>{{vm.match.homegoals}}</span></dd><dt><span>Awaygoals</span></dt><dd><span>{{vm.match.awaygoals}}</span></dd><dt><span>Location</span></dt><dd><span>{{vm.match.location}}</span></dd><dt><span>Description</span></dt><dd><span>{{vm.match.description}}</span></dd><dt><span>Matchdatetime</span></dt><dd><span>{{vm.match.matchdatetime | date:\\'medium\\'}}</span></dd><dt><span>Matchcompetition</span></dt><dd><a ui-sref=\"competition-detail({id:vm.match.matchcompetition.id})\">{{vm.match.matchcompetition.id}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"match-detail.edit({id:vm.match.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/match/match-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myMatchLabel\">Create or edit a Match</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.match.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.match.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_hometeam\">Echipa gazd\\u0103</label><input type=\"text\" class=\"form-control\" name=\"hometeam\" id=\"field_hometeam\" ng-model=\"vm.match.hometeam\" required><div ng-show=\"editForm.hometeam.$invalid\"><p class=\"help-block\" ng-show=\"editForm.hometeam.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_awayteam\">Echip\\u0103 oaspete</label><input type=\"text\" class=\"form-control\" name=\"awayteam\" id=\"field_awayteam\" ng-model=\"vm.match.awayteam\" required><div ng-show=\"editForm.awayteam.$invalid\"><p class=\"help-block\" ng-show=\"editForm.awayteam.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_homegoals\">Goluri gazd\\u0103</label><input type=\"number\" class=\"form-control\" name=\"homegoals\" id=\"field_homegoals\" ng-model=\"vm.match.homegoals\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_awaygoals\">Goluri oaspete</label><input type=\"number\" class=\"form-control\" name=\"awaygoals\" id=\"field_awaygoals\" ng-model=\"vm.match.awaygoals\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_location\">Loca\\u021Bie</label><input type=\"text\" class=\"form-control\" name=\"location\" id=\"field_location\" ng-model=\"vm.match.location\" required><div ng-show=\"editForm.location.$invalid\"><p class=\"help-block\" ng-show=\"editForm.location.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_description\">Descriere (etap\\u0103)</label><input type=\"text\" class=\"form-control\" name=\"description\" id=\"field_description\" ng-model=\"vm.match.description\" required><div ng-show=\"editForm.description.$invalid\"><p class=\"help-block\" ng-show=\"editForm.description.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_matchdatetime\">Data meciului</label><div class=\"input-group\"><input id=\"field_matchdatetime\" type=\"text\" class=\"form-control\" name=\"matchdatetime\" datetime-picker=\"{{dateformat}}\" ng-model=\"vm.match.matchdatetime\" is-open=\"vm.datePickerOpenStatus.matchdatetime\" required> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'matchdatetime\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div><div ng-show=\"editForm.matchdatetime.$invalid\"><p class=\"help-block\" ng-show=\"editForm.matchdatetime.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.matchdatetime.$error.ZonedDateTimelocal\">This field should be a date and time.</p></div></div><div class=\"form-group\"><label for=\"field_matchcompetition\">Competi\\u021Bie</label><select class=\"form-control\" id=\"field_matchcompetition\" name=\"matchcompetition\" ng-model=\"vm.match.matchcompetition\" ng-options=\"competition as competition.id for competition in vm.competitions track by competition.id\" required></select></div><div ng-show=\"editForm.matchcompetition.$invalid\"><p class=\"help-block\" ng-show=\"editForm.matchcompetition.$error.required\">This field is required.</p></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/match/matches.html','<div><h2>Matches</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"match.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Match</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"hometeam\"><span>Echipa gazd\\u0103</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"awayteam\"><span>Echipa oaspete</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"homegoals\"><span>Goluri gazda</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"awaygoals\"><span>Goluri oaspete</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"location\"><span>Loca\\u021Bie</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"description\"><span>Descriere (etap\\u0103)</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"matchdatetime\"><span>Data meciului</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"matchcompetition.id\"><span>Competi\\u021Bie</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"match in vm.matches track by match.id\"><td><a ui-sref=\"match-detail({id:match.id})\">{{match.id}}</a></td><td>{{match.hometeam}}</td><td>{{match.awayteam}}</td><td>{{match.homegoals}}</td><td>{{match.awaygoals}}</td><td>{{match.location}}</td><td>{{match.description}}</td><td>{{match.matchdatetime | date:\\'medium\\'}}</td><td><a ui-sref=\"competition-detail({id:match.matchcompetition.id})\">{{match.matchcompetition.id}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"match-detail({id:match.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"match.edit({id:match.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"match.delete({id:match.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/entities/news/news-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.news.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this News?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/news/news-detail.html','<div><h2><span>News</span> {{vm.news.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Title</span></dt><dd><span>{{vm.news.title}}</span></dd><dt><span>Image</span></dt><dd><div ng-if=\"vm.news.image\"><a ng-click=\"vm.openFile(vm.news.imageContentType, vm.news.image)\"><img data-ng-src=\"{{\\'data:\\' + vm.news.imageContentType + \\';base64,\\' + vm.news.image}}\" style=\"max-width: 100%\" alt=\"news image\"> </a>{{vm.news.imageContentType}}, {{vm.byteSize(vm.news.image)}}</div></dd><dt><span>Video Url</span></dt><dd><span>{{vm.news.videoUrl}}</span></dd><dt><span>External Url</span></dt><dd><span>{{vm.news.externalUrl}}</span></dd><dt><span>Created Date</span></dt><dd><span>{{vm.news.createdDate | date:\\'medium\\'}}</span></dd><dt><span>Content</span></dt><dd><span ng-bind-html=\"vm.news.content | to_trusted\"></span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"news-detail.edit({id:vm.news.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/news/news-dialog.html','<form id=\"formId\" name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myNewsLabel\">Create or edit a News</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.news.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.news.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_title\">Title</label><input type=\"text\" class=\"form-control\" name=\"title\" id=\"field_title\" ng-model=\"vm.news.title\" required><div ng-show=\"editForm.title.$invalid\"><p class=\"help-block\" ng-show=\"editForm.title.$error.required\">This field is required.</p></div></div><div class=\"form-group\" ngf-drop ngf-change=\"vm.setImage($file, vm.news)\" ngf-pattern=\"\\'image/*\\'\"><label class=\"control-label\" for=\"field_image\">Image</label><div><img data-ng-src=\"{{\\'data:\\' + vm.news.imageContentType + \\';base64,\\' + vm.news.image}}\" style=\"max-height: 100px\" ng-if=\"vm.news.image\" alt=\"news image\"><div ng-if=\"vm.news.image\" class=\"help-block clearfix\"><span class=\"pull-left\">{{vm.news.imageContentType}}, {{vm.byteSize(vm.news.image)}}</span> <button type=\"button\" ng-click=\"vm.news.image=null;vm.news.imageContentType=null;\" class=\"btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></div><button type=\"button\" ngf-select class=\"btn btn-default btn-block\" ngf-change=\"vm.setImage($file, vm.news)\" accept=\"image/*\">Add image</button></div><input type=\"hidden\" class=\"form-control\" name=\"image\" id=\"field_image\" ng-model=\"vm.news.image\"> <input type=\"hidden\" class=\"form-control\" name=\"imageContentType\" id=\"field_imageContentType\" ng-model=\"vm.news.imageContentType\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_videoUrl\">Video Url</label><input type=\"text\" class=\"form-control\" name=\"videoUrl\" id=\"field_videoUrl\" ng-model=\"vm.news.videoUrl\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_externalUrl\">External Url</label><input type=\"text\" class=\"form-control\" name=\"externalUrl\" id=\"field_externalUrl\" ng-model=\"vm.news.externalUrl\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_createdDate\">Created Date</label><div class=\"input-group\"><input id=\"field_createdDate\" type=\"text\" class=\"form-control\" name=\"createdDate\" datetime-picker=\"{{dateformat}}\" ng-model=\"vm.news.createdDate\" is-open=\"vm.datePickerOpenStatus.createdDate\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'createdDate\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_content\">Content</label><div id=\"summernote\"></div><textarea style=\"display:none\" class=\"form-control\" name=\"content\" id=\"field_content\" ng-model=\"vm.news.content\" required></textarea><div ng-show=\"editForm.content.$invalid\"><p class=\"help-block\" ng-show=\"editForm.content.$error.required\">This field is required.</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button id=\"saveId\" type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form><script>$(document).ready(function () {\\r\\n        $(\"#summernote\").on(\"summernote.change\", function (e) {\\r\\n            $(\"#field_content\").val($(\\'#summernote\\').summernote(\\'code\\'));\\r\\n        });\\r\\n\\r\\n        $(\"#summernote\").summernote({ height: 200 });\\r\\n        $(\"#summernote\").summernote(\\'code\\', $(\"#field_content\").val());\\r\\n    });</script>');\n$templateCache.put('app/entities/news/news.html','<div><h2>News</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"news.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new News</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"title\"><span>Title</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"image\"><span>Image</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"videoUrl\"><span>Video Url</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"externalUrl\"><span>External Url</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"createdDate\"><span>Created Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"content\"><span>Content</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"news in vm.news track by news.id\"><td><a ui-sref=\"news-detail({id:news.id})\">{{news.id}}</a></td><td>{{news.title}}</td><td><a ng-if=\"news.image\" ng-click=\"vm.openFile(news.imageContentType, news.image)\"><img data-ng-src=\"{{\\'data:\\' + news.imageContentType + \\';base64,\\' + news.image}}\" style=\"max-height: 30px\" alt=\"news image\"> </a><span ng-if=\"news.image\">{{news.imageContentType}}, {{vm.byteSize(news.image)}}</span></td><td>{{news.videoUrl}}</td><td>{{news.externalUrl}}</td><td>{{news.createdDate | date:\\'medium\\'}}</td><td ng-bind-html=\"news.content | to_trusted\"></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"news-detail({id:news.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"news.edit({id:news.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"news.delete({id:news.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/entities/partner/partner-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.partner.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Partner?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/partner/partner-detail.html','<div><h2><span>Partner</span> {{vm.partner.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.partner.name}}</span></dd><dt><span>Image</span></dt><dd><div ng-if=\"vm.partner.image\"><a ng-click=\"vm.openFile(vm.partner.imageContentType, vm.partner.image)\"><img data-ng-src=\"{{\\'data:\\' + vm.partner.imageContentType + \\';base64,\\' + vm.partner.image}}\" style=\"max-width: 100%\" alt=\"partner image\"> </a>{{vm.partner.imageContentType}}, {{vm.byteSize(vm.partner.image)}}</div></dd><dt><span>External Url</span></dt><dd><span>{{vm.partner.externalUrl}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"partner-detail.edit({id:vm.partner.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/partner/partner-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myPartnerLabel\">Create or edit a Partner</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.partner.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.partner.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.partner.name\"></div><div class=\"form-group\" ngf-drop ngf-change=\"vm.setImage($file, vm.partner)\" ngf-pattern=\"\\'image/*\\'\"><label class=\"control-label\" for=\"field_image\">Image</label><div><img data-ng-src=\"{{\\'data:\\' + vm.partner.imageContentType + \\';base64,\\' + vm.partner.image}}\" style=\"max-height: 100px\" ng-if=\"vm.partner.image\" alt=\"partner image\"><div ng-if=\"vm.partner.image\" class=\"help-block clearfix\"><span class=\"pull-left\">{{vm.partner.imageContentType}}, {{vm.byteSize(vm.partner.image)}}</span> <button type=\"button\" ng-click=\"vm.partner.image=null;vm.partner.imageContentType=null;\" class=\"btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></div><button type=\"button\" ngf-select class=\"btn btn-default btn-block\" ngf-change=\"vm.setImage($file, vm.partner)\" accept=\"image/*\">Add image</button></div><input type=\"hidden\" class=\"form-control\" name=\"image\" id=\"field_image\" ng-model=\"vm.partner.image\" required> <input type=\"hidden\" class=\"form-control\" name=\"imageContentType\" id=\"field_imageContentType\" ng-model=\"vm.partner.imageContentType\"><div ng-show=\"editForm.image.$invalid\"><p class=\"help-block\" ng-show=\"editForm.image.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_externalUrl\">External Url</label><input type=\"text\" class=\"form-control\" name=\"externalUrl\" id=\"field_externalUrl\" ng-model=\"vm.partner.externalUrl\"></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/partner/partners.html','<div><h2>Partners</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"partner.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Partner</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"image\"><span>Image</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"externalUrl\"><span>External Url</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"partner in vm.partners track by partner.id\"><td><a ui-sref=\"partner-detail({id:partner.id})\">{{partner.id}}</a></td><td>{{partner.name}}</td><td><a ng-if=\"partner.image\" ng-click=\"vm.openFile(partner.imageContentType, partner.image)\"><img data-ng-src=\"{{\\'data:\\' + partner.imageContentType + \\';base64,\\' + partner.image}}\" style=\"max-height: 30px\" alt=\"partner image\"> </a><span ng-if=\"partner.image\">{{partner.imageContentType}}, {{vm.byteSize(partner.image)}}</span></td><td>{{partner.externalUrl}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"partner-detail({id:partner.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"partner.edit({id:partner.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"partner.delete({id:partner.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/entities/player/player-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.player.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Player?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/player/player-detail.html','<div><h2><span>Player</span> {{vm.player.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Fullname</span></dt><dd><span>{{vm.player.fullname}}</span></dd><dt><span>Priority</span></dt><dd><span>{{vm.player.priority}}</span></dd><dt><span>Dateofbirth</span></dt><dd><span>{{vm.player.dateofbirth | date:\\'mediumDate\\'}}</span></dd><dt><span>Shirtno</span></dt><dd><span>{{vm.player.shirtno}}</span></dd><dt><span>Previousclubs</span></dt><dd><span>{{vm.player.previousclubs}}</span></dd><dt><span>Placeofbirth</span></dt><dd><span>{{vm.player.placeofbirth}}</span></dd><dt><span>Image</span></dt><dd><div ng-if=\"vm.player.image\"><a ng-click=\"vm.openFile(vm.player.imageContentType, vm.player.image)\"><img data-ng-src=\"{{\\'data:\\' + vm.player.imageContentType + \\';base64,\\' + vm.player.image}}\" style=\"max-width: 100%\" alt=\"player image\"> </a>{{vm.player.imageContentType}}, {{vm.byteSize(vm.player.image)}}</div></dd><dt><span>Playerposition</span></dt><dd><a ui-sref=\"position-detail({id:vm.player.playerposition.id})\">{{vm.player.playerposition.id}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"player-detail.edit({id:vm.player.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/player/player-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myPlayerLabel\">Create or edit a Player</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.player.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.player.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_fullname\">Fullname</label><input type=\"text\" class=\"form-control\" name=\"fullname\" id=\"field_fullname\" ng-model=\"vm.player.fullname\" required><div ng-show=\"editForm.fullname.$invalid\"><p class=\"help-block\" ng-show=\"editForm.fullname.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_priority\">Priority</label><input type=\"number\" class=\"form-control\" name=\"priority\" id=\"field_priority\" ng-model=\"vm.player.priority\" required><div ng-show=\"editForm.priority.$invalid\"><p class=\"help-block\" ng-show=\"editForm.priority.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.priority.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_dateofbirth\">Dateofbirth</label><div class=\"input-group\"><input id=\"field_dateofbirth\" type=\"text\" class=\"form-control\" name=\"dateofbirth\" uib-datepicker-popup=\"{{dateformat}}\" ng-model=\"vm.player.dateofbirth\" is-open=\"vm.datePickerOpenStatus.dateofbirth\" required> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'dateofbirth\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div><div ng-show=\"editForm.dateofbirth.$invalid\"><p class=\"help-block\" ng-show=\"editForm.dateofbirth.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_shirtno\">Shirtno</label><input type=\"number\" class=\"form-control\" name=\"shirtno\" id=\"field_shirtno\" ng-model=\"vm.player.shirtno\" required><div ng-show=\"editForm.shirtno.$invalid\"><p class=\"help-block\" ng-show=\"editForm.shirtno.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.shirtno.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_previousclubs\">Previousclubs</label><input type=\"text\" class=\"form-control\" name=\"previousclubs\" id=\"field_previousclubs\" ng-model=\"vm.player.previousclubs\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_placeofbirth\">Placeofbirth</label><input type=\"text\" class=\"form-control\" name=\"placeofbirth\" id=\"field_placeofbirth\" ng-model=\"vm.player.placeofbirth\"></div><div class=\"form-group\" ngf-drop ngf-change=\"vm.setImage($file, vm.player)\" ngf-pattern=\"\\'image/*\\'\"><label class=\"control-label\" for=\"field_image\">Image</label><div><img data-ng-src=\"{{\\'data:\\' + vm.player.imageContentType + \\';base64,\\' + vm.player.image}}\" style=\"max-height: 100px\" ng-if=\"vm.player.image\" alt=\"player image\"><div ng-if=\"vm.player.image\" class=\"help-block clearfix\"><span class=\"pull-left\">{{vm.player.imageContentType}}, {{vm.byteSize(vm.player.image)}}</span> <button type=\"button\" ng-click=\"vm.player.image=null;vm.player.imageContentType=null;\" class=\"btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></div><button type=\"button\" ngf-select class=\"btn btn-default btn-block\" ngf-change=\"vm.setImage($file, vm.player)\" accept=\"image/*\">Add image</button></div><input type=\"hidden\" class=\"form-control\" name=\"image\" id=\"field_image\" ng-model=\"vm.player.image\"> <input type=\"hidden\" class=\"form-control\" name=\"imageContentType\" id=\"field_imageContentType\" ng-model=\"vm.player.imageContentType\"></div><div class=\"form-group\"><label for=\"field_playerposition\">Playerposition</label><select class=\"form-control\" id=\"field_playerposition\" name=\"playerposition\" ng-model=\"vm.player.playerposition\" ng-options=\"position as position.name for position in vm.positions track by position.id\" required></select></div><div ng-show=\"editForm.playerposition.$invalid\"><p class=\"help-block\" ng-show=\"editForm.playerposition.$error.required\">This field is required.</p></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/player/players.html','<div><h2>Players</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"player.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Player</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"fullname\"><span>Fullname</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"priority\"><span>Priority</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"dateofbirth\"><span>Dateofbirth</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"shirtno\"><span>Shirtno</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"previousclubs\"><span>Previousclubs</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"placeofbirth\"><span>Placeofbirth</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"image\"><span>Image</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"playerposition.id\"><span>Playerposition</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"player in vm.players track by player.id\"><td><a ui-sref=\"player-detail({id:player.id})\">{{player.id}}</a></td><td>{{player.fullname}}</td><td>{{player.priority}}</td><td>{{player.dateofbirth | date:\\'mediumDate\\'}}</td><td>{{player.shirtno}}</td><td>{{player.previousclubs}}</td><td>{{player.placeofbirth}}</td><td><a ng-if=\"player.image\" ng-click=\"vm.openFile(player.imageContentType, player.image)\"><img data-ng-src=\"{{\\'data:\\' + player.imageContentType + \\';base64,\\' + player.image}}\" style=\"max-height: 30px\" alt=\"player image\"> </a><span ng-if=\"player.image\">{{player.imageContentType}}, {{vm.byteSize(player.image)}}</span></td><td><a ui-sref=\"position-detail({id:player.playerposition.id})\">{{player.playerposition.name}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"player-detail({id:player.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"player.edit({id:player.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"player.delete({id:player.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/entities/season/season-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.season.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Season?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/season/season-detail.html','<div><h2><span>Season</span> {{vm.season.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.season.name}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"season-detail.edit({id:vm.season.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/season/season-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"mySeasonLabel\">Create or edit a Season</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.season.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.season.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.season.name\" required><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/season/seasons.html','<div><h2>Seasons</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"season.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Season</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"season in vm.seasons track by season.id\"><td><a ui-sref=\"season-detail({id:season.id})\">{{season.id}}</a></td><td>{{season.name}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"season-detail({id:season.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"season.edit({id:season.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"season.delete({id:season.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/entities/position/position-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.position.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Position?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/position/position-detail.html','<div><h2><span>Position</span> {{vm.position.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.position.name}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"position-detail.edit({id:vm.position.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/position/position-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myPositionLabel\">Create or edit a Position</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.position.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.position.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.position.name\" required><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/position/positions.html','<div><h2>Positions</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"position.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Position</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"position in vm.positions track by position.id\"><td><a ui-sref=\"position-detail({id:position.id})\">{{position.id}}</a></td><td>{{position.name}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"position-detail({id:position.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"position.edit({id:position.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"position.delete({id:position.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/entities/staff/staff-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.staff.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Staff?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/staff/staff-detail.html','<div><h2><span>Staff</span> {{vm.staff.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Fullname</span></dt><dd><span>{{vm.staff.fullname}}</span></dd><dt><span>Priority</span></dt><dd><span>{{vm.staff.priority}}</span></dd><dt><span>Placeofbirth</span></dt><dd><span>{{vm.staff.placeofbirth}}</span></dd><dt><span>Dateofbirth</span></dt><dd><span>{{vm.staff.dateofbirth | date:\\'mediumDate\\'}}</span></dd><dt><span>Previousclubs</span></dt><dd><span>{{vm.staff.previousclubs}}</span></dd><dt><span>Image</span></dt><dd><div ng-if=\"vm.staff.image\"><a ng-click=\"vm.openFile(vm.staff.imageContentType, vm.staff.image)\"><img data-ng-src=\"{{\\'data:\\' + vm.staff.imageContentType + \\';base64,\\' + vm.staff.image}}\" style=\"max-width: 100%\" alt=\"staff image\"> </a>{{vm.staff.imageContentType}}, {{vm.byteSize(vm.staff.image)}}</div></dd><dt><span>Staffjob</span></dt><dd><a ui-sref=\"job-detail({id:vm.staff.staffjob.id})\">{{vm.staff.staffjob.id}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"staff-detail.edit({id:vm.staff.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/staff/staff-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myStaffLabel\">Create or edit a Staff</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.staff.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.staff.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_fullname\">Fullname</label><input type=\"text\" class=\"form-control\" name=\"fullname\" id=\"field_fullname\" ng-model=\"vm.staff.fullname\" required><div ng-show=\"editForm.fullname.$invalid\"><p class=\"help-block\" ng-show=\"editForm.fullname.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_priority\">Priority</label><input type=\"number\" class=\"form-control\" name=\"priority\" id=\"field_priority\" ng-model=\"vm.staff.priority\" required><div ng-show=\"editForm.priority.$invalid\"><p class=\"help-block\" ng-show=\"editForm.priority.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.priority.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_placeofbirth\">Placeofbirth</label><input type=\"text\" class=\"form-control\" name=\"placeofbirth\" id=\"field_placeofbirth\" ng-model=\"vm.staff.placeofbirth\" required><div ng-show=\"editForm.placeofbirth.$invalid\"><p class=\"help-block\" ng-show=\"editForm.placeofbirth.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_dateofbirth\">Dateofbirth</label><div class=\"input-group\"><input id=\"field_dateofbirth\" type=\"text\" class=\"form-control\" name=\"dateofbirth\" uib-datepicker-popup=\"{{dateformat}}\" ng-model=\"vm.staff.dateofbirth\" is-open=\"vm.datePickerOpenStatus.dateofbirth\" required> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'dateofbirth\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div><div ng-show=\"editForm.dateofbirth.$invalid\"><p class=\"help-block\" ng-show=\"editForm.dateofbirth.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_previousclubs\">Previousclubs</label><input type=\"text\" class=\"form-control\" name=\"previousclubs\" id=\"field_previousclubs\" ng-model=\"vm.staff.previousclubs\"></div><div class=\"form-group\" ngf-drop ngf-change=\"vm.setImage($file, vm.staff)\" ngf-pattern=\"\\'image/*\\'\"><label class=\"control-label\" for=\"field_image\">Image</label><div><img data-ng-src=\"{{\\'data:\\' + vm.staff.imageContentType + \\';base64,\\' + vm.staff.image}}\" style=\"max-height: 100px\" ng-if=\"vm.staff.image\" alt=\"staff image\"><div ng-if=\"vm.staff.image\" class=\"help-block clearfix\"><span class=\"pull-left\">{{vm.staff.imageContentType}}, {{vm.byteSize(vm.staff.image)}}</span> <button type=\"button\" ng-click=\"vm.staff.image=null;vm.staff.imageContentType=null;\" class=\"btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></div><button type=\"button\" ngf-select class=\"btn btn-default btn-block\" ngf-change=\"vm.setImage($file, vm.staff)\" accept=\"image/*\">Add image</button></div><input type=\"hidden\" class=\"form-control\" name=\"image\" id=\"field_image\" ng-model=\"vm.staff.image\"> <input type=\"hidden\" class=\"form-control\" name=\"imageContentType\" id=\"field_imageContentType\" ng-model=\"vm.staff.imageContentType\"></div><div class=\"form-group\"><label for=\"field_staffjob\">Staffjob</label><select class=\"form-control\" id=\"field_staffjob\" name=\"staffjob\" ng-model=\"vm.staff.staffjob\" ng-options=\"job as job.name for job in vm.jobs track by job.id\" required></select></div><div ng-show=\"editForm.staffjob.$invalid\"><p class=\"help-block\" ng-show=\"editForm.staffjob.$error.required\">This field is required.</p></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/staff/staff.html','<div><h2>Staff</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"staff.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Staff</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"fullname\"><span>Fullname</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"priority\"><span>Priority</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"placeofbirth\"><span>Placeofbirth</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"dateofbirth\"><span>Dateofbirth</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"previousclubs\"><span>Previousclubs</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"image\"><span>Image</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"staffjob.id\"><span>Staffjob</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"staff in vm.staff track by staff.id\"><td><a ui-sref=\"staff-detail({id:staff.id})\">{{staff.id}}</a></td><td>{{staff.fullname}}</td><td>{{staff.priority}}</td><td>{{staff.placeofbirth}}</td><td>{{staff.dateofbirth | date:\\'mediumDate\\'}}</td><td>{{staff.previousclubs}}</td><td><a ng-if=\"staff.image\" ng-click=\"vm.openFile(staff.imageContentType, staff.image)\"><img data-ng-src=\"{{\\'data:\\' + staff.imageContentType + \\';base64,\\' + staff.image}}\" style=\"max-height: 30px\" alt=\"staff image\"> </a><span ng-if=\"staff.image\">{{staff.imageContentType}}, {{vm.byteSize(staff.image)}}</span></td><td><a ui-sref=\"job-detail({id:staff.staffjob.id})\">{{staff.staffjob.name}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"staff-detail({id:staff.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"staff.edit({id:staff.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"staff.delete({id:staff.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count></div><uib-pager total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pager></div>');\n$templateCache.put('app/layouts/error/accessdenied.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div class=\"alert alert-danger\">You are not authorized to access the page.</div></div></div></div>');\n$templateCache.put('app/layouts/error/error.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div ng-show=\"errorMessage\"><div class=\"alert alert-danger\">{{errorMessage}}</div></div></div></div></div>');\n$templateCache.put('app/layouts/navbar/navbar.html','<nav class=\"navbar navbar-inverse bg-primary\" role=\"navigation\"><div class=\"container\"><div class=\"navbar-header\"><div class=\"col-xs-12 visible-xs\"><a href=\"https://www.facebook.com/AcsuPoliBucuresti\"><img class=\"socialMediaImage\" src=\"content/images/facebook.png\" alt=\"logo\"></a><a href=\"https://www.instagram.com/acsupolibucuresti/\"><img class=\"socialMediaImage\" src=\"content/images/instagram.png\" alt=\"logo\"></a><a href=\"https://www.youtube.com/channel/UC2SqqZKAJxTvuoczuyQD5mw\"><img class=\"socialMediaImage\" src=\"content/images/youtube.png\" alt=\"logo\"></a><button type=\"button\" class=\"navbar-toggle\" ng-click=\"vm.toggleNavbar()\"><span class=\"sr-only\">Toggle navigation</span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span></button></div></div><div class=\"navbar-collapse\" uib-collapse=\"vm.isNavbarCollapsed\" ng-switch=\"vm.isAuthenticated()\"><ul class=\"nav navbar-nav navbar-left\"><li><div class=\"col-sm-12 hidden-xs\"><a href=\"https://www.facebook.com/AcsuPoliBucuresti\"><img class=\"socialMediaImage\" src=\"content/images/facebook.png\" alt=\"logo\"></a><a href=\"https://www.instagram.com/acsupolibucuresti/\"><img class=\"socialMediaImage\" src=\"content/images/instagram.png\" alt=\"logo\"></a><a href=\"https://www.youtube.com/channel/UC2SqqZKAJxTvuoczuyQD5mw\"><img class=\"socialMediaImage\" src=\"content/images/youtube.png\" alt=\"logo\"></a></div></li></ul><ul class=\"nav navbar-nav navbar-right\"><li ui-sref-active=\"active\"><a ui-sref=\"home\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-home\"></span> <span class=\"hidden-sm\">Acas\\u0103</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"clubNews\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-list-alt\"></span> <span class=\"hidden-sm\">\\u0218tiri</span></a></li><!--     <li ng-class=\"{active: vm.$state.includes(\\'club\\')}\" uib-dropdown class=\"dropdown pointer\">\\r\\n                    <a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"club-menu\">\\r\\n                        <span>\\r\\n                            <span class=\"glyphicon glyphicon-copyright-mark\"></span>\\r\\n                            <span class=\"hidden-sm\">\\r\\n                                Club\\r\\n                            </span>\\r\\n                            <b class=\"caret\"></b>\\r\\n                        </span>\\r\\n                    </a>\\r\\n                    <ul class=\"dropdown-menu\" uib-dropdown-menu>\\r\\n                        <li ui-sref-active=\"active\">\\r\\n                            <a ui-sref=\"clubHistory\" ng-click=\"vm.collapseNavbar()\">\\r\\n                                    <span class=\"glyphicon glyphicon-circle-arrow-right\"></span>&nbsp;\\r\\n                                    <span>Istoric</span>\\r\\n                                </a>\\r\\n                        </li>\\r\\n                        <li ui-sref-active=\"active\">\\r\\n                            <a ui-sref=\"clubStadium\" ng-click=\"vm.collapseNavbar()\">\\r\\n                                    <span class=\"glyphicon glyphicon-circle-arrow-right\"></span>&nbsp;\\r\\n                                    <span>Stadion</span>\\r\\n                                </a>\\r\\n                        </li>\\r\\n                    </ul>\\r\\n                </li>--><li ng-class=\"{active: vm.$state.includes(\\'clubTeam\\')}\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"team-menu\"><span><span class=\"glyphicon glyphicon-blackboard\"></span> <span class=\"hidden-sm\">Echip\\u0103 </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"clubPlayers\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-circle-arrow-right\"></span>&nbsp; <span>Jucatori</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"clubStaff\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-circle-arrow-right\"></span>&nbsp; <span>Staff</span></a></li></ul></li><li ng-class=\"{active: vm.$state.includes(\\'clubSchedule\\')}\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"schedule-menu\"><span><span class=\"glyphicon glyphicon-calendar\"></span> <span class=\"hidden-sm\">Program </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"clubMatches\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-circle-arrow-right\"></span>&nbsp; <span>Meciuri</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"clubRanking\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-circle-arrow-right\"></span>&nbsp; <span>Clasament</span></a></li></ul></li><li ui-sref-active=\"active\"><a ui-sref=\"clubPartners\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-lock\"></span> <span class=\"hidden-sm\">Parteneri</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"clubContact\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-map-marker\"></span> <span class=\"hidden-sm\">Contact</span></a></li><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class=\"{active: vm.$state.includes(\\'entity\\')}\" ng-switch-when=\"true\" has-authority=\"ROLE_ADMIN\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"entity-menu\"><span><span class=\"glyphicon glyphicon-th-list\"></span> <span class=\"hidden-sm\">Set\\u0103ri generale </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"season\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Sezon</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"competition\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Competi\\u021Bii</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"league-table\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Clasamente</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"match\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Meciuri</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"position\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Pozi\\u021Bii juc\\u0103tori</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"player\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Juc\\u0103tori</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"job\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Pozi\\u021Bii staff</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"staff\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Staff</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"news\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>\\u0218tiri</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"partner\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Parteneri</span></a></li></ul></li><li id=\"xxx\" ng-class=\"{active: vm.$state.includes(\\'account\\')}\" uib-dropdown class=\"dropdown pointer\" style=\"display:none\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"account-menu\"><span><span class=\"glyphicon glyphicon-user\"></span> <span class=\"hidden-sm\">Contul meu </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"settings\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-wrench\"></span>&nbsp; <span>Set\\u0103ri</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"password\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-lock\"></span>&nbsp; <span>Parol\\u0103</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a href=\"\" ng-click=\"vm.logout()\" id=\"logout\"><span class=\"glyphicon glyphicon-log-out\"></span>&nbsp; <span>Deconectare</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a href=\"\" ng-click=\"vm.login()\" id=\"login\"><span class=\"glyphicon glyphicon-log-in\"></span>&nbsp; <span>Conectare</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a ui-sref=\"register\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-plus-sign\"></span>&nbsp; <span>\\xCEnregistrare</span></a></li></ul></li><!--<li ng-class=\"{active: vm.$state.includes(\\'admin\\')}\" ng-switch-when=\"true\" has-authority=\"ROLE_ADMIN\" uib-dropdown class=\"dropdown pointer\">\\r\\n                    <a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"admin-menu\">\\r\\n                        <span>\\r\\n                            <span class=\"glyphicon glyphicon-tower\"></span>\\r\\n                            <span class=\"hidden-sm\">Administration</span>\\r\\n                            <b class=\"caret\"></b>\\r\\n                        </span>\\r\\n                    </a>\\r\\n                    <ul class=\"dropdown-menu\" uib-dropdown-menu>\\r\\n                        <li ui-sref-active=\"active\">\\r\\n                            <a ui-sref=\"user-management\" ng-click=\"vm.collapseNavbar()\">\\r\\n                                <span class=\"glyphicon glyphicon-user\"></span>&nbsp;\\r\\n                                <span>User management</span>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                        <li ui-sref-active=\"active\">\\r\\n                            <a ui-sref=\"jhi-metrics\" ng-click=\"vm.collapseNavbar()\">\\r\\n                                <span class=\"glyphicon glyphicon-dashboard\"></span>&nbsp;\\r\\n                                <span>Metrics</span>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                        <li ui-sref-active=\"active\">\\r\\n                            <a ui-sref=\"jhi-health\" ng-click=\"vm.collapseNavbar()\">\\r\\n                                <span class=\"glyphicon glyphicon-heart\"></span>&nbsp;\\r\\n                                <span>Health</span>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                        <li ui-sref-active=\"active\">\\r\\n                            <a ui-sref=\"jhi-configuration\" ng-click=\"vm.collapseNavbar()\">\\r\\n                                <span class=\"glyphicon glyphicon-list-alt\"></span>&nbsp;\\r\\n                                <span>Configuration</span>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                        <li ui-sref-active=\"active\">\\r\\n                            <a ui-sref=\"audits\" ng-click=\"vm.collapseNavbar()\">\\r\\n                                <span class=\"glyphicon glyphicon-bell\"></span>&nbsp;\\r\\n                                <span>Audits</span>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                        <li ui-sref-active=\"active\">\\r\\n                            <a ui-sref=\"logs\" ng-click=\"vm.collapseNavbar()\">\\r\\n                                <span class=\"glyphicon glyphicon-tasks\"></span>&nbsp;\\r\\n                                <span>Logs</span>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                        <li ng-show=\"vm.swaggerEnabled\" ui-sref-active=\"active\">\\r\\n                            <a ui-sref=\"docs\" ng-click=\"vm.collapseNavbar()\">\\r\\n                                <span class=\"glyphicon glyphicon-book\"></span>&nbsp;\\r\\n                                <span>API</span>\\r\\n                            </a>\\r\\n                        </li>\\r\\n                    </ul>\\r\\n                </li>--></ul></div></div></nav>');\n$templateCache.put('app/account/reset/finish/reset.finish.html','<div><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1>Reset password</h1><div class=\"alert alert-danger\" ng-show=\"vm.keyMissing\"><strong>The password reset key is missing.</strong></div><div class=\"alert alert-warning\" ng-hide=\"vm.success || vm.keyMissing\"><p>Choose a new password</p></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><p>Your password couldn\\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success\"><p><strong>Your password has been reset.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</p></div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div><div ng-hide=\"vm.keyMissing\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.finishReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.resetAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.resetAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your password confirmation is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your password confirmation is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your password confirmation cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Reset Password</button></form></div></div></div></div>');\n$templateCache.put('app/account/reset/request/reset.request.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Reset your password</h1><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailNotExists\"><strong>Email address isn\\'t registered!</strong> Please check and try again.</div><div class=\"alert alert-warning\" ng-hide=\"vm.success\"><p>Enter the email address you used to register.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success === \\'OK\\'\"><p>Check your emails for details on how to reset your password.</p></div><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.requestReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"email\">Email</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your email\" ng-model=\"vm.resetAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your email is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your email is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your email is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your email cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Reset</button></form></div></div></div>');\n$templateCache.put('app/account/social/directive/social.html','<form action=\"{{ providerURL }}\" method=\"POST\"><button type=\"submit\" class=\"btn btn-block jh-btn-social jh-btn-{{ provider }}\"><span>Sign in with {{ label }}</span></button> <input name=\"scope\" type=\"hidden\" value=\"{{\\xA0providerSetting }}\"> <input name=\"_csrf\" type=\"hidden\" value=\"{{\\xA0csrf }}\"></form>');}]);})();"],"sourceRoot":"/source/"}